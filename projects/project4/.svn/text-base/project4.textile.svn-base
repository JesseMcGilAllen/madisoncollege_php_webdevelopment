h2. Project Four

<hr />

bq. The PHP and MySQL Orders Application

h3. Concepts


This project is designed to enhance a simple PHP web application to use additional HTML Form features, and the MySQL database to store records. You will learn these concepts:

* Creating and Adding Functionality to PHP scripts
* Using Additional Functionality of HTML Forms
* Using the MySQL DBMS
* Accessing a MySQL Database Using PHP

h3. Readings


To prepare for this project you should study or review the following:

* *PHP and MySQL by Example* Ellie Quigley with Marko Gargenta, Prentice Hall
** *Chapter 10*, More on PHP Forms
** *Chapter 13*, Introduction to MySQL
** *Chapter 14*, SQL Language Tutorial
** *Chapter 15*, PHP and MySQL Integration

h3. Project Overview

This project will involve additional HTML form features, and use of the MySQL DBMS with the PHP programming language.

h3. Exercises


* Create a directory named *project4* under your web server's document root directory. Place all HTML files and PHP scripts for this project in this new directory.
* Note: If you are working on an MATC lab computer, always save a copy of this directory and all the files in it to either the class server, a USB thumb drive, a floppy disk or similar media, at the end of each work session. Otherwise your work will be lost!

h4. Exercise 1


* Download these two files containing an HTML form ("p4form.html":/attachment/unit12/p4form.html.txt) and a PHP script for processing the form ("p4process.php":/attachment/unit12/p4process.php.txt) into your project4 directory. Be sure to give the files the original names, since the HTML form file invokes the PHP file by name.
* Modify the data collected by the form in *p4form.html* to include customer name and address fields, and hidden fields that identify the form. Modify the PHP script named *p4process.php* to save the order information to two MySQL database tables named "*order_master*" and "*order_detail*".
** Create form fields for:
*** customer name - text box
*** customer address - text area with 2 rows
*** form identifier - hidden
*** form version date - hidden
** Prior to processing the HTML form, your script should verify that the input in the *@$_POST@* array came from your form by checking that the form identifier hidden field is set to the value you gave it. If the input is not from your form, display a message such as "Invalid form input, script aborted!" and exit.
** Create local variables in the PHP script to store the data from the form's new fields.
** Display the customer name and address along with other order information already being displayed by the PHP script.
** Create the "order_master" and "order_detail" tables in your personal database schema on the class server using the following CREATE TABLE statements:
<br /><pre>
CREATE TABLE order_master
( id INT(12) NOT NULL AUTO_INCREMENT
, order_date DATETIME
, ship_date DATETIME
, customer_name VARCHAR(40) NOT NULL
, address VARCHAR(100) NOT NULL
, item_total FLOAT(10,2) NOT NULL
, total_amt_due FLOAT(10,2) NOT NULL
, PRIMARY KEY(id)
);

CREATE TABLE order_detail
( order_id INT(12) NOT NULL
, item_name VARCHAR(20) NOT NULL
, quantity INT(6) NOT NULL
, price_per_unit FLOAT(10,2) NOT NULL
, PRIMARY KEY(id, item_name)
);
</pre>
** If the total number of items ordered is greater than zero, write the customer order to the "order_master" and "order_detail" tables.
** Create an "order_master" record for the order, containing the following information:
*** *id* - This column will be automatically generated and written to the database by the auto_increment feature.
*** *order_date* - The date and time the order was written to the database.
*** *ship_date* - NULL (empty)
*** *customer_name* - Value entered on the HTML form. Use *@mysql_real_escape_string()@* to escape any characters that might cause a problem for your INSERT statement.
*** *customer_address* - Value entered on the HTML form. Use *@mysql_real_escape_string()@* here also.
*** *item_total* - Total dollar amount of items ordered.
*** *total_amt_due* - Total amount of order, including the 5% tax added to the item total.
** Create an "*order_detail*" record for each item ordered, containing the following information:
*** *order_id* - This column must contain the same value as the corresponding order_master record's "id" column. The *@mysql_insert_id()@* function will be useful here.
*** *item_name* - Use the strings "calendar", "pigs card", and "reindeer card" to specify which item this detail record is for.
*** *quantity* - How many of this item the customer ordered. (Do not write a record if zero (0) of this item were ordered.)
*** price_per_unit - Record the price of this item as displayed on the HTML form. This could change over time, so it is best to record what it was at time of sale.
** Display a message to the user to indicate their order was successfully saved to the database.

h4. Exercise 2


* Now, write a PHP script named *p4view.php* that reads the customer orders from your "*order_master*" and "*order_detail*" tables and displays the records on a web page:
** Display the company name, "RPCV of Wisconsin", and the text "Pending Orders" both as a title and as headers in the body of the web page.
** I recommend that you first query the "*order_master*" table, and transfer the result set into a local array. Then you can loop through order_master records (in the array) and query the corresponding records from the "*order_detail*" table.
<br />For each order, display the order_master data on a line. Then display the data from each order_detail record for that order on an indented line beneath it.
** Loop through the order_master records, displaying each one followed by its corresponding detail records.
** Be sure to use *@stripslashes()@* to strip off any backslashes added when the records were read from the database if the *magic_qutoes_gpc* directive is turned on.
** Close the MySQL database explicitly, before ending your script.

5. Submitting the project


* All of your PHP scripts and HTML files for this project should be in one directory. Using a compression program like WinZip, zip this directory and its contents into a single file named *project4.zip*. If you are using Linux or Macintosh OSX then you should tar and gzip your directory into a file named *project4.tar.gz*. Submit the *project4.tar.gz* or *project4.zip* file to your instructor via Blackboard, using the Blackboard Assignment Submission Procedures. In addition to this your instructor might grade your projects with you in the lab.

<br />

<hr />

[[Unit Twelve => 152-166 Unit Twelve Index]]