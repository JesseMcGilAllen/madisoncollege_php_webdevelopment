h2. Strings and String Comparison



h3. What Is a String?

* Because PHP is a hypertext preprocessor, and most textual data is represented as strings, strings are an essential part of the language and probably more used than any other data type.
* For example, data read in from a file, database, email, or Web page is represented as string data.
* By definition, a PHP string is a piece of text, a series of characters enclosed in quotes.
* Because PHP puts no limit on the length of a string, it can consist of one character, a word, or an entire novel.
* In Unit 2 we discussed strings as a basic data type, how to create strings, quote strings, assign them to variables, and print them.
* In Unit 3, we covered the operators used to concatenate strings, compare them, and test whether or not strings are equal or identical.
* In addition to basic operators, PHP provides a huge collection of useful functions to help you manipulate strings such as comparing strings, searching for strings, extracting substrings, copying strings, trimming strings, and translating characters in strings to uppercase or lowercase.
* This unit introduces some of the most useful of these built-in functions.
* Here's a simple strings example.
<br /><pre><?php
 // Two simple strings
 $name = 'John Doe';
 print "$name is my mentor.<br />";
?>
</pre>
* The first executable statement defines a string 'John Doe' and stores it in a variable called $name .
* The next line prints out the value of that variable, the string 'John Doe' and some additional text.

h3. Quotes

* In Unit 2, you were introduced to strings as a data type and how quotes are used to delimit a string. Here is a bit of review.
* There are two types of quotes and thus two types of strings: (1) single quoted strings and (2) double quoted strings. For example:
<br /><pre>
'I am a string.'
</pre>
and
<br /><pre>
"I am also a string."
</pre>

h3. Single Quotes

* All characters enclosed within single quotes are treated as literals, so what you see is what you get, with the exception of a single quote embedded within a set of single quotes, and the backslash character.
* The quotes must be matched, a single quote to start the string and a single quote to terminate it.
* The example below demonstrates how single quotes are used.
* Filename: *singlequotes.php*
<br /><PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax8">print</span> <span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;His</span><span class="syntax13"> </span><span class="syntax13">salary</span><span class="syntax13"> </span><span class="syntax13">was</span><span class="syntax13"> </span><span class="syntax13">$50,000&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax10">$</span><span class="syntax10">salary</span><span class="syntax18">=</span><span class="syntax5">50000</span> <span class="syntax18">&#42;</span> <span class="syntax5">1</span><span class="syntax18">.</span><span class="syntax5">1</span><span class="syntax18">;</span>
<span class="gutter">   4:</span>  <span class="syntax8">print</span> <span class="syntax13">'</span><span class="syntax13">After</span><span class="syntax13"> </span><span class="syntax13">his</span><span class="syntax13"> </span><span class="syntax13">raise</span><span class="syntax13"> </span><span class="syntax13">his</span><span class="syntax13"> </span><span class="syntax13">salary</span><span class="syntax13"> </span><span class="syntax13">is</span><span class="syntax13"> </span><span class="syntax13">$salary\n</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutterH">   5:</span><span class="syntax17">?&gt;</span></span>
</PRE>
* Because all characters are treated literally within single quotes, the dollar sign in salary is not interpreted as a variable. The '\n' to represent the newline is also treated literally.
* When these characters are between double quotes, they will be interpolated; that is, the value of the variable, $salary, will be extracted, and the backslash sequence "\n" will be converted into a newline.

h3. Quoting Errors

* Because quotes are matched from left to right, embedding a single quote in a string, such as 'I don't care', would produce an error because PHP would treat the quote in the contraction don't as the terminating single quote for the string.
* The solution is to either place the whole string in double quotes or precede the apostrophe in don't with a backslash (e.g., don\'t).
* The following example demonstrates this problem. Run the script to observer the error message generated.
* Filename: *quoteserr.php*
<br /><PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">business</span> <span class="syntax18">=</span> <span class="syntax13">'</span><span class="syntax13">Joe</span><span class="syntax13">'</span>s Pizza<span class="syntax13">'</span><span class="syntax13">;</span>
<span class="gutter">   3:</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">print</span><span class="syntax13"> </span><span class="syntax13">$business;</span>
<span class="gutter">   4:</span><span class="syntax13">?&gt;</span></span>
</PRE>
* The first single quote opens the string and is matched by the next single quote.
* The problem: PHP sees the apostrophe in Joe's as the string's closing quote because it is the next quote it encounters after the initial single quote.
* The rest of the string is syntactically invalid and PHP reports an error.
* To solve the problem, the inner quote must be escaped with the backslash character as shown here:
<br /><pre>
$business = 'Joe\'s Pizza';
</pre>
* The backslash character takes away the special meaning of the inner quote. PHP will treat it as any other character in the string and continue looking for the closing single quote to terminate the string.

h3. Double Quotes

* Another way to denote a string is to enclose it in double quotes:
<br /><pre>
$business = "Joe's Pizza";
</pre>
* When PHP encounters the first double quote in the string "Joe's Pizza" it considers all the enclosed text as part of a string until it reaches the closing double quote. The inner quote is ignored and treated as just another character.
* Double quotes are like single quotes, but with three important differences:
## They interpolate escape sequences, which consist of a backslash followed by a single character.
<br />When enclosed in double quotes, the backslash causes the interpolation of the next character to "escape" from its normal ASCII code and to represent something else.
<br />For example, "\t" is interpreted as a tab character and "\n" as a newline character.
<br />Note that when the PHP ouput is displayed in a browser, we must use the HTML &lt;pre&gt; tag for "\t" and "\n" to affect the format of the output.
<br />HTML ignores "white space" including tab and newline characters unless we enclose the text in &lt;pre&gt; tags.
## Single quotes are ignored inside double quotes, such as in "Joe's Pizza".
## Variables are replaced with their values when placed between double quotes.

h3.  String Operators

* Operators that can be used with strings were discussed in Unit 3. But just as we reviewed the use of quotes a bit, we revisit the operators used to manipulate strings.

h3. Concatenation

* String concatenation is the merging of one or more strings into one string.
* You might recall the string concatenation operator is a dot (.). It concatenates its left and right operand.
* The example below demonstrates how to use the string concatenation operator.
* Filename: *concat.php*
<br /><PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;html</span><span class="syntax17">&gt;</span>
<span class="gutter">   2:</span> <span class="syntax17">&lt;head</span><span class="syntax17">&gt;</span>
<span class="gutter">   3:</span>  <span class="syntax17">&lt;title</span><span class="syntax17">&gt;</span>String Concatenation<span class="syntax17">&lt;/title</span><span class="syntax17">&gt;</span>
<span class="gutter">   4:</span> <span class="syntax17">&lt;/head</span><span class="syntax17">&gt;</span>
<span class="gutterH">   5:</span> <span class="syntax17">&lt;body</span><span class="syntax17"> </span><span class="syntax17">bgcolor</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">silver</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">   6:</span>  <span class="syntax17">&lt;h3</span><span class="syntax17">&gt;</span>String Concatenation<span class="syntax17">&lt;/h3</span><span class="syntax17">&gt;</span>
<span class="gutter">   7:</span>  <span class="syntax17">&lt;?php</span>
<span class="gutter">   8:</span>    <span class="syntax10">$</span><span class="syntax10">name</span>     <span class="syntax18">=</span> <span class="syntax13">'</span><span class="syntax13">Ellie</span><span class="syntax13"> </span><span class="syntax13">Quigley</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>    <span class="syntax10">$</span><span class="syntax10">street</span>   <span class="syntax18">=</span> <span class="syntax13">'</span><span class="syntax13">123</span><span class="syntax13"> </span><span class="syntax13">Main</span><span class="syntax13"> </span><span class="syntax13">Street</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutterH">  10:</span>    <span class="syntax10">$</span><span class="syntax10">city</span>     <span class="syntax18">=</span> <span class="syntax13">'</span><span class="syntax13">San</span><span class="syntax13"> </span><span class="syntax13">Francisco</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  11:</span>    <span class="syntax10">$</span><span class="syntax10">state</span>    <span class="syntax18">=</span> <span class="syntax13">'</span><span class="syntax13">CA</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  12:</span>    <span class="syntax10">$</span><span class="syntax10">zip</span>      <span class="syntax18">=</span> <span class="syntax13">'</span><span class="syntax13">94107</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  13:</span>
<span class="gutter">  14:</span>    <span class="syntax10">$</span><span class="syntax10">address</span> <span class="syntax18">=</span> <span class="syntax14">&quot;</span><span class="syntax14">Name</span><span class="syntax14">:</span><span class="syntax14"> </span><span class="syntax14">&quot;</span><span class="syntax18">.</span><span class="syntax14">&quot;</span><span class="syntax10">$</span><span class="syntax10">name\n</span><span class="syntax14">&quot;</span>
<span class="gutterH">  15:</span>              <span class="syntax18">.</span><span class="syntax14">&quot;</span><span class="syntax14">Address</span><span class="syntax14">:</span><span class="syntax14"> </span><span class="syntax14">&quot;</span><span class="syntax18">.</span><span class="syntax14">&quot;</span><span class="syntax10">$</span><span class="syntax10">street\n</span><span class="syntax14">&quot;</span>
<span class="gutter">  16:</span>              <span class="syntax18">.</span><span class="syntax14">&quot;</span><span class="syntax14">Zip</span><span class="syntax14">:</span><span class="syntax14"> </span><span class="syntax14">&quot;</span><span class="syntax18">.</span> <span class="syntax10">$</span><span class="syntax10">zip</span> <span class="syntax18">.</span><span class="syntax14">&quot;</span><span class="syntax14">\n</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">  17:</span>    <span class="syntax8">print</span> <span class="syntax13">'</span><span class="syntax13">&lt;pre&gt;</span><span class="syntax13">'</span><span class="syntax18">.</span> <span class="syntax10">$</span><span class="syntax10">address</span><span class="syntax18">;</span>
<span class="gutter">  18:</span>    <span class="syntax8">print</span> <span class="syntax14">&quot;</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">.</span><span class="syntax14">\n</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">  19:</span>    <span class="syntax8">print</span> <span class="syntax13">'</span><span class="syntax13">&lt;/pre&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutterH">  20:</span>  <span class="syntax17">?&gt;</span>
<span class="gutter">  21:</span> <span class="syntax17">&lt;/body</span><span class="syntax17">&gt;</span>
<span class="gutter">  22:</span><span class="syntax17">&lt;/html</span><span class="syntax17">&gt;</span></span>
</PRE>
* In this example we use the dot (.) operator, the PHP concatenation operator, to "glue" together multiple strings into one long string.
* You use the concatenation operator to merge any two strings, whether they are single-quoted, double-quoted, or assigned to variables.
* If you put the dot within a string, it is just the literal dot character with no special meaning.

h3. Equal and Identical

* The equality operator, *@==@* , can be used to see if two strings are equal, and the identity operator, *@===@* , can be used to check whether the strings are identical.
* If you are using these operators for string comparison, make sure that both of the operands are strings, because if you are comparing a string to a number, PHP will first cast the string to a number.
* This example demonstrates how to use the equality and identity operators.
* Filename: *equal.php*
<br /><PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;html</span><span class="syntax17">&gt;</span>
<span class="gutter">   2:</span> <span class="syntax17">&lt;head</span><span class="syntax17">&gt;</span>
<span class="gutter">   3:</span>  <span class="syntax17">&lt;title</span><span class="syntax17">&gt;</span>Equal and Identical Strings<span class="syntax17">&lt;/title</span><span class="syntax17">&gt;</span>
<span class="gutter">   4:</span> <span class="syntax17">&lt;/head</span><span class="syntax17">&gt;</span>
<span class="gutterH">   5:</span> <span class="syntax17">&lt;body</span><span class="syntax17"> </span><span class="syntax17">bgcolor</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">lavender</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">   6:</span>  <span class="syntax17">&lt;font</span><span class="syntax17"> </span><span class="syntax17">size</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">+</span><span class="syntax14">1</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">   7:</span>  <span class="syntax17">&lt;h3</span><span class="syntax17">&gt;</span>The == and === Operator<span class="syntax17">&lt;/h3</span><span class="syntax17">&gt;</span>
<span class="gutter">   8:</span>  <span class="syntax17">&lt;?php</span>
<span class="gutter">   9:</span>    <span class="syntax10">$</span><span class="syntax10">str1</span> <span class="syntax18">=</span> <span class="syntax14">&quot;</span><span class="syntax14">hello</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutterH">  10:</span>    <span class="syntax10">$</span><span class="syntax10">str2</span> <span class="syntax18">=</span> <span class="syntax14">&quot;</span><span class="syntax14">hello</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">  11:</span>    <span class="syntax10">$</span><span class="syntax10">str3</span> <span class="syntax18">=</span> <span class="syntax5">0</span><span class="syntax18">;</span>
<span class="gutter">  12:</span>
<span class="gutter">  13:</span>    <span class="syntax8">if</span><span class="syntax18"> (</span> <span class="syntax10">$</span><span class="syntax10">str1</span> <span class="syntax18">=</span><span class="syntax18">=</span> <span class="syntax10">$</span><span class="syntax10">str2</span> <span class="syntax18">)</span><span class="syntax18">{</span>
<span class="gutter">  14:</span>      <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">They</span><span class="syntax2"> </span><span class="syntax2">are</span><span class="syntax2"> </span><span class="syntax2">equal</span>
<span class="gutterH">  15:</span>      <span class="syntax8">print</span> <span class="syntax14">&quot;</span><span class="syntax14">\&quot;</span><span class="syntax10">$</span><span class="syntax10">str1\&quot;</span><span class="syntax14"> </span><span class="syntax14">and</span><span class="syntax14"> </span><span class="syntax14">\&quot;</span><span class="syntax10">$</span><span class="syntax10">str2\&quot;</span><span class="syntax14"> </span><span class="syntax14">are</span><span class="syntax14"> </span><span class="syntax14">equal</span><span class="syntax14">.</span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">  16:</span>    <span class="syntax18">}</span>
<span class="gutter">  17:</span>    <span class="syntax8">else</span><span class="syntax18">{</span>
<span class="gutter">  18:</span>      <span class="syntax8">print</span> <span class="syntax14">&quot;</span><span class="syntax14">\&quot;</span><span class="syntax10">$</span><span class="syntax10">str1\&quot;</span><span class="syntax14"> </span><span class="syntax14">and</span><span class="syntax14"> </span><span class="syntax14">\&quot;</span><span class="syntax10">$</span><span class="syntax10">str2\&quot;</span><span class="syntax14"> </span><span class="syntax14">are</span><span class="syntax14"> </span><span class="syntax14">not</span><span class="syntax14"> </span><span class="syntax14">equal</span><span class="syntax14">.</span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">  19:</span>    <span class="syntax18">}</span>
<span class="gutterH">  20:</span>
<span class="gutter">  21:</span>    <span class="syntax8">if</span><span class="syntax18"> (</span> <span class="syntax10">$</span><span class="syntax10">str2</span> <span class="syntax18">=</span><span class="syntax18">=</span> <span class="syntax10">$</span><span class="syntax10">str3</span> <span class="syntax18">)</span><span class="syntax18">{</span>
<span class="gutter">  22:</span>      <span class="syntax8">print</span> <span class="syntax14">&quot;</span><span class="syntax14">\&quot;</span><span class="syntax10">$</span><span class="syntax10">str2\&quot;</span><span class="syntax14"> </span><span class="syntax14">and</span><span class="syntax14"> </span><span class="syntax10">$</span><span class="syntax10">str3</span><span class="syntax14"> </span><span class="syntax14">are</span><span class="syntax14"> </span><span class="syntax14">equal</span><span class="syntax14">.</span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">  23:</span>    <span class="syntax18">}</span>
<span class="gutter">  24:</span>    <span class="syntax8">else</span><span class="syntax18">{</span>
<span class="gutterH">  25:</span>      <span class="syntax8">print</span> <span class="syntax14">&quot;</span><span class="syntax14">\&quot;</span><span class="syntax10">$</span><span class="syntax10">str2\&quot;</span><span class="syntax14"> </span><span class="syntax14">and</span><span class="syntax14"> </span><span class="syntax10">$</span><span class="syntax10">str3</span><span class="syntax14"> </span><span class="syntax14">are</span><span class="syntax14"> </span><span class="syntax14">not</span><span class="syntax14"> </span><span class="syntax14">equal</span><span class="syntax14">.</span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">  26:</span>    <span class="syntax18">}</span>
<span class="gutter">  27:</span>
<span class="gutter">  28:</span>    <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax10">$</span><span class="syntax10">str2</span> <span class="syntax18">=</span><span class="syntax18">=</span><span class="syntax18">=</span> <span class="syntax10">$</span><span class="syntax10">str3</span><span class="syntax18">)</span><span class="syntax18">{</span>
<span class="gutter">  29:</span>      <span class="syntax8">print</span> <span class="syntax14">&quot;</span><span class="syntax14">\&quot;</span><span class="syntax10">$</span><span class="syntax10">str2\&quot;</span><span class="syntax14"> </span><span class="syntax14">and</span><span class="syntax14"> </span><span class="syntax10">$</span><span class="syntax10">str3</span><span class="syntax14"> </span><span class="syntax14">are</span><span class="syntax14"> </span><span class="syntax14">identical</span><span class="syntax14">.</span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutterH">  30:</span>    <span class="syntax18">}</span>
<span class="gutter">  31:</span>    <span class="syntax8">else</span><span class="syntax18">{</span>
<span class="gutter">  32:</span>      <span class="syntax8">print</span> <span class="syntax14">&quot;</span><span class="syntax14">\&quot;</span><span class="syntax10">$</span><span class="syntax10">str2\&quot;</span><span class="syntax14"> </span><span class="syntax14">and</span><span class="syntax14"> </span><span class="syntax10">$</span><span class="syntax10">str3</span><span class="syntax14"> </span><span class="syntax14">are</span><span class="syntax14"> </span><span class="syntax14">not</span><span class="syntax14"> </span><span class="syntax14">identical</span><span class="syntax14">.</span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">  33:</span>    <span class="syntax18">}</span>
<span class="gutter">  34:</span>  <span class="syntax17">?&gt;</span>
<span class="gutterH">  35:</span> <span class="syntax17">&lt;/body</span><span class="syntax17">&gt;</span>
<span class="gutter">  36:</span><span class="syntax17">&lt;/html</span><span class="syntax17">&gt;</span></span>
</PRE>
* On line 13, both strings contain the same value, "hello", so they are equal.
* On line 21, "hello", is being compared to the number 0. PHP will convert the string to 0 and compare. The result is equal numeric values.
* On line 28, the identity operator compares the variables on both data type and value. One is a string and the other a number, so they are not identical.

h3. String Functions

* Now it is time to talk about some of the useful built-in string functions provided by PHP.
* These functions allow you to manipulate the entire string or parts of the string such as the individual characters or words within it, and because you will spend so much of your time working with text in PHP, it's more practical to use these functions than trying to write your own.
* If you want to do more sophisticated pattern matching, PHP offers regular expressions, which we will discuss later in the course.
* The following functions are broken down into categories to help you find the one that best fits your needs.

h3. Formatting and Printing Strings

* There are a number of built-in functions that allow you to output the string or number in a specified format. See the following table.
* Table: Formatting Strings

table{text-align:left; margin-left: 4em;}.
|{background:#ccc}.*Function*|{background:#ccc}.*What_It_Does*|
|@printf()@         |Displays a formatted string           |
|@sprintf()@        |Saves a formatted string in a variable|
|@fprintf()@        |Prints a formatted string to a file   |
|@number_format()@  |Formats numbers as strings            |

h3. The @printf()@ Function

* Like C/C++ and most modern languages, PHP supports the *@printf()@* function for string formatting.
* Unlike the print or echo constructs that just print a string as is, the *@printf()@* function allows you to format text to give it the look you want.
* For example, you might want to line up the output in left-justified 30-space columns or print numbers representing money with only two places after the decimal point.
* The *@printf()@* function has a number of format specifiers to control the appearance of strings.
* Format:
<br /><pre>
int printf ( string format [, mixed args [, mixed ...]] )
</pre>
* Example:
<br /><pre>
// prints "The number is 152.00\n"
printf("The number is %.2f\n", 152);
</pre>
* The first argument to *@printf()@* is called the control string. It is enclosed in quotes and consists of text and formatting conversion specifiers.
* The formatting conversion specifier starts with a percent sign followed by a character, which represents the type of data you want to format.
* For example, "%s" says a string will be formatted and "%d" says a whole decimal number will be formatted.
* In the preceding example, the control string is: "The number is %.2f\n"
* The format specifier is %.2f , which represents a floating-point number with two significant digits to the right of the decimal point. Any other text in the control string is printed as is.
* There are a number of format specifiers listed in the table below.
* The control string is followed by a comma and an argument list, each argument also separated by a comma. For each format conversion specifier in the control string, there is a corrsponding value in the argument list.
* In the following example, "%.2f" specifies the value 152 will be printed as: 152.00
<br /><pre>
printf("The number is %.2f\n", 152);
</pre>
* Table: Format Specifiers

table{text-align:left; margin-left: 4em;}.
|{background:#ccc}.*Specifier*|{background:#ccc}.*Format*|
|b         |Integer in binary format                                    |
|c         |ASCII character value for that integer                      |
|d         |Signed integer                                              |
|e         |Scientific notation (%1.5e+1)                               |
|f         |Floating-point number                                       |
|o         |Integer presented in octal representation                   |
|s         |String of characters                                        |
|u         |Unsigned integer                                            |
|x         |Integer presented in hexadecimal representation in lowercase|
|X         |Integer presented in hexadecimal representation in uppercase|

* If the format specifier character is preceded by a number, the number can be used to specify the width of a field.
* For example, @%10s@ specifies a string with a width of 10 characters, @%5d@ a field to hold a 5-digit number, and @%10.1f@ a floating-point number consisting of 10 digits, including the decimal point and one significant digit.
* Consider a couple *@printf()@* examples:
* Filename: *printf.php*
<br /><PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax9">printf</span><span class="syntax18">(</span> <span class="syntax14">&quot;</span><span class="syntax14">Value</span><span class="syntax14"> </span><span class="syntax14">of</span><span class="syntax14"> </span><span class="syntax14">Pi</span><span class="syntax14"> </span><span class="syntax14">to</span><span class="syntax14"> </span><span class="syntax14">2</span><span class="syntax14"> </span><span class="syntax14">decimals</span><span class="syntax14"> </span><span class="syntax14">is</span><span class="syntax14"> </span><span class="syntax14">%</span><span class="syntax14">.</span><span class="syntax14">2f</span><span class="syntax14"> </span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">\n</span><span class="syntax14">&quot;</span><span class="syntax18">,</span> M_PI <span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax9">printf</span><span class="syntax18">(</span> <span class="syntax14">&quot;</span><span class="syntax14">Value</span><span class="syntax14"> </span><span class="syntax14">of</span><span class="syntax14"> </span><span class="syntax14">Pi</span><span class="syntax14"> </span><span class="syntax14">to</span><span class="syntax14"> </span><span class="syntax14">4</span><span class="syntax14"> </span><span class="syntax14">decimals</span><span class="syntax14"> </span><span class="syntax14">is</span><span class="syntax14"> </span><span class="syntax14">%</span><span class="syntax14">.</span><span class="syntax14">4f</span><span class="syntax14"> </span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">\n</span><span class="syntax14">&quot;</span><span class="syntax18">,</span> M_PI <span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   4:</span><span class="syntax17">?&gt;</span></span>
</PRE>
* In the control string on Line 2, %.2f specifies the format we will use to represent pi.
* The value corresponding to %.2f is the first argument after the control string, M_PI, a predefined PHP constant.
* The second *@printf()@* control string is identical to the first except the precision of the floating-point number is 4 now, instead of 2.
* In the next example, *@printf()@* will format a string and a number.
* Filename: *printf2.php*
<br /><PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">product_name</span> <span class="syntax18">=</span> <span class="syntax14">&quot;</span><span class="syntax14">Black</span><span class="syntax14"> </span><span class="syntax14">shoes</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax10">$</span><span class="syntax10">product_price</span> <span class="syntax18">=</span> <span class="syntax5">249</span><span class="syntax18">.</span><span class="syntax5">95</span><span class="syntax18">;</span>
<span class="gutter">   4:</span>  <span class="syntax9">printf</span><span class="syntax18">(</span><span class="syntax14">&quot;</span><span class="syntax14">Product</span><span class="syntax14"> </span><span class="syntax14">%s</span><span class="syntax14"> </span><span class="syntax14">will</span><span class="syntax14"> </span><span class="syntax14">cost</span><span class="syntax14"> </span><span class="syntax14">%</span><span class="syntax14">6</span><span class="syntax14">.</span><span class="syntax14">2f</span><span class="syntax14"> </span><span class="syntax14">dollars</span><span class="syntax14">&quot;</span><span class="syntax18">,</span>
<span class="gutterH">   5:</span>         <span class="syntax10">$</span><span class="syntax10">product_name</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">product_price</span> <span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span><span class="syntax17">?&gt;</span></span>
</PRE>
* The *@printf()@* control string contains two format specifiers: @%s@ and @%6.2d@
* The variable *@$product_name@*, the first argument, will be printed according to the first format specifier, @%s@, a string.
* The second argument, @$product_price@, will be printed according to the second format specifier: @%6.2f@ In this case, 6 refers to total number of digits that this number can occupy and @.2@ specfiies a precision of 2 places to the right of the decimal point. If the number is larger than 6 digits, *@printf()@* will not truncate it.
* The table below shows the most common format specifiers.
* The format specifier can be modified by placing specifying a precision, left or right justification, padding characters, and so on, as shown in the table below.
* Table: Modifiers for the *@printf()@* Format Specifier

table{text-align:left; margin-left: 4em;}.
|{background:#ccc}.*Modifier*|{background:#ccc}.*Example*|{background:#ccc}.*Format*|
|.         |%.2f     |Specifies a precision of two digits to the right of the<br />decimal point in a floating-point number|
|integer   |%8d      |Specifies number of characters for this argument to<br />be displayed; e.g., field width of 8 digits|
|-         |%-8.2f<br />%-30s    |Causes the formatting to be left justified; e.g.,<br />left-justified floating-point number with a field width of 8,<br />or left-justified 30-space string|
|0         |%08d     |Pads the number with 0s                                      |

* There are some other formatting functions similar to the printf function differing primarily in how the output is displayed.

h3. The @sprintf()@ Function

* This function is identical to *@printf()@* except that instead of displaying the formatted string, *@sprintf()@* returns the formatted string so that you can assign it to a variable. Examples below demonstrate the use of *@sprintf()@*.
* Format:
<br /><pre>
string sprintf ( string format [, mixed args [, mixed ...]] )
</pre>
* Example:
<br /><pre>
$formatted_string=sprintf("%s owes me %.2f dollars\n",
                         $name, $amount);
</pre>
* Filename: *sprintf.php*
<br /><PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">product_name</span> <span class="syntax18">=</span> <span class="syntax14">&quot;</span><span class="syntax14">Purple</span><span class="syntax14"> </span><span class="syntax14">Dress</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax10">$</span><span class="syntax10">product_price</span> <span class="syntax18">=</span> <span class="syntax5">199</span><span class="syntax18">.</span><span class="syntax5">95</span><span class="syntax18">;</span>
<span class="gutter">   4:</span>  <span class="syntax10">$</span><span class="syntax10">output</span> <span class="syntax18">=</span> <span class="syntax9">sprintf</span><span class="syntax18">(</span><span class="syntax14">&quot;</span><span class="syntax14">Product</span><span class="syntax14">:</span><span class="syntax14"> </span><span class="syntax14">&lt;</span><span class="syntax14">b</span><span class="syntax14">&gt;</span><span class="syntax14">%</span><span class="syntax14">s</span><span class="syntax14">&lt;</span><span class="syntax14">/</span><span class="syntax14">b</span><span class="syntax14">&gt;</span><span class="syntax14"> </span><span class="syntax14">will</span><span class="syntax14"> </span><span class="syntax14">cost</span><span class="syntax14"> </span><span class="syntax10">$</span><span class="syntax14">&lt;</span><span class="syntax14">u</span><span class="syntax14">&gt;</span><span class="syntax14">%</span><span class="syntax14">6</span><span class="syntax14">.</span><span class="syntax14">2f</span><span class="syntax14">&lt;</span><span class="syntax14">/</span><span class="syntax14">u</span><span class="syntax14">&gt;</span><span class="syntax14"> </span><span class="syntax14">+</span>
<span class="gutterH">   5:</span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14">tax</span><span class="syntax14">&quot;</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">product_name</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">product_price</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span><span class="syntax17">?&gt;</span>
<span class="gutter">   7:</span><span class="syntax17">&lt;html</span><span class="syntax17">&gt;</span>
<span class="gutter">   8:</span> <span class="syntax17">&lt;head</span><span class="syntax17">&gt;</span><span class="syntax17">&lt;title</span><span class="syntax17">&gt;</span>The sprintf() Function<span class="syntax17">&lt;/title</span><span class="syntax17">&gt;</span><span class="syntax17">&lt;/head</span><span class="syntax17">&gt;</span>
<span class="gutter">   9:</span> <span class="syntax17">&lt;body</span><span class="syntax17"> </span><span class="syntax17">bgcolor</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">#</span><span class="syntax14">EBF4F3</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutterH">  10:</span>  <span class="syntax17">&lt;h1</span><span class="syntax17">&gt;</span>Shopping Cart Checkout<span class="syntax17">&lt;/h1</span><span class="syntax17">&gt;</span>
<span class="gutter">  11:</span>  <span class="syntax17">&lt;font</span><span class="syntax17"> </span><span class="syntax17">face</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">Arial</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">  12:</span>  <span class="syntax17">&lt;?</span><span class="syntax18">=</span> <span class="syntax10">$</span><span class="syntax10">output</span> <span class="syntax17">?&gt;</span>
<span class="gutter">  13:</span>  <span class="syntax17">&lt;/font</span><span class="syntax17">&gt;</span>
<span class="gutter">  14:</span> <span class="syntax17">&lt;/body</span><span class="syntax17">&gt;</span>
<span class="gutterH">  15:</span><span class="syntax17">&lt;/html</span><span class="syntax17">&gt;</span></span>
</PRE>
* The first parameter to the *@sprintf()@* function is the control string specifying how to print the string.
* The two arguments following the control string are the actual variables, *@$product_name@* and *@$product_price@*, that correspond to each of the format conversion specifiers, @%s@ and @%6.2f@, in turn.
* The *@sprintf()@* function will format the string and assign it to the variable: *@$output@*
* We use the PHP short tags to print out the value of the variable $output to the HTML browser.

h3. The @fprintf()@ Function

* Whereas the *@printf()@* function writes the output to the standard output stream (the browser), the *@fprintf()@* function sends the output to any output stream specified, usually a file.
* Format:
<br /><pre>
int fprintf ( resource handle, string format [, mixed args
            [, mixed ...]] )
</pre>
* Example:
<br /><pre>
fprintf($filehandle, "%04d-%02d-%02d", $year, $month, $day);
</pre>

h3. Formatting Numbers and Money

* Putting commas or spaces in numbers or printing out the dollar value of money causes a number to become a string and can be handled with *@printf()@*.
* PHP also provides two special functions, the *@number_format()@* function and the *@money_format()@* function.

h3. The @number_format()@ Function

* PHP provides the *@number_format()@* function to format a number with grouped thousands.
* There are three ways to use this function. You can specify no arguments, two arguments, or four arguments, but not three arguments.
* When only one number is specified, the number returned will be a whole number. It will include commas for every group of thousands, but the fractional part will be truncated along with the decimal point. If the first number after the decimal point is 5 or higher, the new number will be rounded up.
* If two numbers are specified, the second number will indicate the number of decimal places to format, such as two places after the decimal point for a dollar and cents amount. Groups of thousands will still be comma-separated.
* The third way to use this function is to specify the number to format, number of decimal places, as well as the characters to use for separating groups of thousands, as well as the decimal point.
* This is useful for locales that use number formats different than North American formats.
* The examples that follow illustrate how to use the *@number_format()@* function.
* Format:
<br /><pre>
string number_format ( float number [, int decimals
                     [, string dec_point, string thousands_sep]] )
</pre>
* Example:
<br /><pre>
$number=123456.5456
$new_string = number_format($number); // Returns: 123,457
$new_string = number_format($number, 2); // Returns: 123,456.55
$num_francais = number_format($number, 2, ',', ' '); // Returns 1 234,56
</pre>
* Filename: *numformat.php*
<br /><PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">number</span> <span class="syntax18">=</span> <span class="syntax5">7634</span><span class="syntax18">.</span><span class="syntax5">887</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">American</span><span class="syntax2"> </span><span class="syntax2">format</span><span class="syntax2"> </span><span class="syntax2">is</span><span class="syntax2"> </span><span class="syntax2">the</span><span class="syntax2"> </span><span class="syntax2">default:</span><span class="syntax2"> </span><span class="syntax2">7,643.89</span>
<span class="gutter">   4:</span>  <span class="syntax10">$</span><span class="syntax10">us_format</span> <span class="syntax18">=</span> <span class="syntax9">number_format</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">number</span><span class="syntax18">,</span> <span class="syntax5">2</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">   5:</span>  <span class="syntax8">print</span> <span class="syntax14">&quot;</span><span class="syntax14">Default</span><span class="syntax14"> </span><span class="syntax14">is</span><span class="syntax14"> </span><span class="syntax14">US</span><span class="syntax14"> </span><span class="syntax14">format</span><span class="syntax14">:</span><span class="syntax14"> </span><span class="syntax10">$</span><span class="syntax10">us_format</span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">   6:</span>
<span class="gutter">   7:</span>  <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">French</span><span class="syntax2"> </span><span class="syntax2">format:</span><span class="syntax2"> </span><span class="syntax2">7</span><span class="syntax2"> </span><span class="syntax2">634,89</span>
<span class="gutter">   8:</span>  <span class="syntax10">$</span><span class="syntax10">french_format</span> <span class="syntax18">=</span> <span class="syntax9">number_format</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">number</span><span class="syntax18">,</span> <span class="syntax5">2</span><span class="syntax18">,</span> <span class="syntax13">'</span><span class="syntax13">,</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax13">'</span><span class="syntax13"> </span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>  <span class="syntax8">print</span> <span class="syntax14">&quot;</span><span class="syntax14">French</span><span class="syntax14"> </span><span class="syntax14">format</span><span class="syntax14">:</span><span class="syntax14"> </span><span class="syntax10">$</span><span class="syntax10">french_format</span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutterH">  10:</span>   
<span class="gutter">  11:</span>  <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">Spanish/Latin</span><span class="syntax2"> </span><span class="syntax2">American</span><span class="syntax2"> </span><span class="syntax2">format:</span><span class="syntax2"> </span><span class="syntax2">7.634,89</span>
<span class="gutter">  12:</span>  <span class="syntax10">$</span><span class="syntax10">spanish_format</span> <span class="syntax18">=</span> <span class="syntax9">number_format</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">number</span><span class="syntax18">,</span> <span class="syntax5">2</span><span class="syntax18">,</span> <span class="syntax13">'</span><span class="syntax13">,</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax13">'</span><span class="syntax13">.</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  13:</span>  <span class="syntax8">print</span> <span class="syntax14">&quot;</span><span class="syntax14">Spanish</span><span class="syntax14"> </span><span class="syntax14">format</span><span class="syntax14">:</span><span class="syntax14"> </span><span class="syntax10">$</span><span class="syntax10">spanish_format</span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">  14:</span>
<span class="gutterH">  15:</span>  <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">American</span><span class="syntax2"> </span><span class="syntax2">format</span><span class="syntax2"> </span><span class="syntax2">without</span><span class="syntax2"> </span><span class="syntax2">thousands</span><span class="syntax2"> </span><span class="syntax2">separator:</span><span class="syntax2"> </span><span class="syntax2">7634.89</span>
<span class="gutter">  16:</span>  <span class="syntax10">$</span><span class="syntax10">us_format2</span> <span class="syntax18">=</span> <span class="syntax9">number_format</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">number</span><span class="syntax18">,</span> <span class="syntax5">2</span><span class="syntax18">,</span> <span class="syntax13">'</span><span class="syntax13">.</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax13">'</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  17:</span>  <span class="syntax8">print</span> <span class="syntax14">&quot;</span><span class="syntax14">US</span><span class="syntax14"> </span><span class="syntax14">format</span><span class="syntax14"> </span><span class="syntax14">w</span><span class="syntax14">/</span><span class="syntax14">o</span><span class="syntax14"> </span><span class="syntax14">commas</span><span class="syntax14">:</span><span class="syntax14"> </span><span class="syntax10">$</span><span class="syntax10">us_format2</span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">&quot;</span><span class="syntax18">;</span><span class="gutter">  18:</span><span class="syntax17">?&gt;</span></span>
</PRE>
* The first print statement shows the default format for numbers, the U.S. format. The second parameter specifies the number of decimal places. *@number_format()@* automatically rounds to two decimals in this case.
* The second and third print statements show how to use the *@number_format()@* function with four arguments to format numbers for other countries. The first two arguments are the same as in the first print line, but the third argument specifies the separator character to be used for decimal places. and the fourth argument is the separator for the thousands.
* A single space, rather than a comma, is the thousands separator commonly used in most European countries.

h3. The @money_format()@ Function

* The *@money_format()@* function formats a number as a string representing currency. Because this function depends on a C library function called *@strfmon()@* , it cannot be implemented on your system if you are using Windows.
* This function can format money for any number of locales and comes with a large array of formatting specifications. It works with negative numbers, deals with left and right precision, padding, and so on, similar to the *@printf()@* function.
* Format:
<br /><pre>
string money_format ( string format, float number )
</pre>
* Example:
<br /><pre>
setlocale(LC_MONETARY, 'en_US');
echo money_format('%i', $number) . "\n"; // USD 1,234.56
</pre>

h3. Finding the Length of a String - The @strlen()@ Function

* To find the length of a string (how many characters there are in the string), PHP provides the *@strlen()@* function.
* Format: 
<br />
<pre>int strlen ( string string )
</pre>
* Example:
<br /><pre>
$length = strlen("Hello, world\n");
</pre>
* Filename: *strlen.php*
<br /><PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;html</span><span class="syntax17">&gt;</span>
<span class="gutter">   2:</span> <span class="syntax17">&lt;head</span><span class="syntax17">&gt;</span>
<span class="gutter">   3:</span>  <span class="syntax17">&lt;title</span><span class="syntax17">&gt;</span>Finding the Length of a String<span class="syntax17">&lt;/title</span><span class="syntax17">&gt;</span>
<span class="gutter">   4:</span> <span class="syntax17">&lt;/head</span><span class="syntax17">&gt;</span>
<span class="gutterH">   5:</span> <span class="syntax17">&lt;body</span><span class="syntax17"> </span><span class="syntax17">bgcolor</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">lightgreen</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">   6:</span>  <span class="syntax17">&lt;font</span><span class="syntax17"> </span><span class="syntax17">size</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">+</span><span class="syntax14">1</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">   7:</span>  <span class="syntax17">&lt;?php</span>
<span class="gutter">   8:</span>    <span class="syntax10">$</span><span class="syntax10">string</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">\t\tHello</span><span class="syntax14">,</span><span class="syntax14"> </span><span class="syntax14">world</span><span class="syntax14">.</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>    <span class="syntax10">$</span><span class="syntax10">length</span><span class="syntax18">=</span><span class="syntax9">strlen</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">string</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">  10:</span>    <span class="syntax8">print</span> <span class="syntax14">&quot;</span><span class="syntax14">There</span><span class="syntax14"> </span><span class="syntax14">are</span><span class="syntax14"> </span><span class="syntax10">$</span><span class="syntax10">length</span><span class="syntax14"> </span><span class="syntax14">characters</span><span class="syntax14"> </span><span class="syntax14">in</span><span class="syntax14"> </span><span class="syntax14">\&quot;</span><span class="syntax10">$</span><span class="syntax10">string\&quot;</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">  11:</span>  <span class="syntax17">?&gt;</span>
<span class="gutter">  12:</span> <span class="syntax17">&lt;/body</span><span class="syntax17">&gt;</span>
<span class="gutter">  13:</span><span class="syntax17">&lt;/html</span><span class="syntax17">&gt;</span></span>
</PRE>
* The variable *@$string@* contains a string of characters including two tab characters.
* The *@strlen()@* function returns the number of characters in $string. The tab characters don't show up in the browser, but by viewing the source code, you can see them.

h3. Finding the Number of Words in a String - The @str_word_count()@ Function

* The *@str_word_count()@* function returns information about the words that make up a string.
* A word is defined as a locale-dependent (Germany, U.S., etc.) string containing alphabetic characters, which also may contain, but not start with "'" and "-" characters.
* By default, the *@str_word_count()@* function counts the number of words in a string. An optional third argument can be one of the three values shown in the table:
* Table: Optional Third Arguments to the *@str_word_count()@* Function

table{text-align:left; margin-left: 4em;}.
|{background:#ccc}.*Argument*|{background:#ccc}.*What_It_Returns*|
|@0@         |Returns the number of words found.                                                                                                        |
|@1@         |Returns an array containing all the words found inside the string.                                                                        |
|@2@         |Returns an associative array, where the key is the numeric position of the word inside the string and the value is the actual word itself.|

* An optional fourth argument charlist allows you to add characters that will be accepted as part of a word, such as foreign accent marks, ellipses, long dashes, or hyphens.
* Format:
<br /><pre>
mixed str_word_count(string string [, int format [, string charlist]] )
</pre>
* Example:
* Filename: *wordcount.php*
<br /><PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">string</span> <span class="syntax18">=</span> <span class="syntax14">&quot;</span><span class="syntax14">Happy</span><span class="syntax14"> </span><span class="syntax14">New</span><span class="syntax14"> </span><span class="syntax14">Year</span><span class="syntax14">,</span><span class="syntax14"> </span><span class="syntax14">to</span><span class="syntax14"> </span><span class="syntax14">you</span><span class="syntax14">!</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax10">$</span><span class="syntax10">num_words</span> <span class="syntax18">=</span> <span class="syntax9">str_word_count</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">string</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   4:</span>  <span class="syntax8">print</span> <span class="syntax14">&quot;</span><span class="syntax14">There</span><span class="syntax14"> </span><span class="syntax14">are</span><span class="syntax14"> </span><span class="syntax10">$</span><span class="syntax10">num_words</span><span class="syntax14"> </span><span class="syntax14">words</span><span class="syntax14"> </span><span class="syntax14">in</span><span class="syntax14"> </span><span class="syntax14">\&quot;</span><span class="syntax10">$</span><span class="syntax10">string\&quot;</span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutterH">   5:</span>  <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">use</span><span class="syntax2"> </span><span class="syntax2">print_r</span><span class="syntax2"> </span><span class="syntax2">to</span><span class="syntax2"> </span><span class="syntax2">demo</span><span class="syntax2"> </span><span class="syntax2">str_word_count()</span><span class="syntax2"> </span><span class="syntax2">with</span><span class="syntax2"> </span><span class="syntax2">accented</span><span class="syntax2"> </span><span class="syntax2">letters</span>
<span class="gutter">   6:</span>  <span class="syntax10">$</span><span class="syntax10">num_words</span> <span class="syntax18">=</span> <span class="syntax9">str_word_count</span><span class="syntax18">(</span><span class="syntax14">&quot;</span><span class="syntax14">Solstickan</span><span class="syntax14"> </span><span class="syntax14">s&aring;ljes</span><span class="syntax14"> </span><span class="syntax14">till</span><span class="syntax14"> </span><span class="syntax14">f&ouml;rm&aring;n</span><span class="syntax14"> </span><span class="syntax14">f&ouml;r</span><span class="syntax14"> </span><span class="syntax14">barn</span><span class="syntax14"> </span><span class="syntax14">och</span>
<span class="gutter">   7:</span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14">gamla</span><span class="syntax14">&quot;</span><span class="syntax18">,</span><span class="syntax5">0</span><span class="syntax18">,</span><span class="syntax14">&quot;</span><span class="syntax14">&aring;&Aring;&ouml;</span><span class="syntax14">&quot;</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   8:</span>  <span class="syntax8">print</span> <span class="syntax14">&quot;</span><span class="syntax14">There</span><span class="syntax14"> </span><span class="syntax14">are</span><span class="syntax14"> </span><span class="syntax10">$</span><span class="syntax10">num_words</span><span class="syntax14"> </span><span class="syntax14">words</span><span class="syntax14"> </span><span class="syntax14">in</span><span class="syntax14"> </span><span class="syntax14">the</span><span class="syntax14"> </span><span class="syntax14">string</span><span class="syntax14"> </span><span class="syntax14">represented</span><span class="syntax14"> </span><span class="syntax14">by</span><span class="syntax14"> </span><span class="syntax14">&quot;</span>
<span class="gutter">   9:</span>       <span class="syntax18">.</span><span class="syntax14">&quot;</span><span class="syntax14">this</span><span class="syntax14"> </span><span class="syntax14">Array</span><span class="syntax14"> </span><span class="syntax14">output</span><span class="syntax14">:</span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutterH">  10:</span>  <span class="syntax9">print_r</span><span class="syntax18">(</span><span class="syntax9">str_word_count</span><span class="syntax18">(</span><span class="syntax14">&quot;</span><span class="syntax14">Solstickan</span><span class="syntax14"> </span><span class="syntax14">s&aring;ljes</span><span class="syntax14"> </span><span class="syntax14">till</span><span class="syntax14"> </span><span class="syntax14">f&ouml;rm&aring;n</span><span class="syntax14"> </span><span class="syntax14">f&ouml;r</span><span class="syntax14"> </span><span class="syntax14">barn</span><span class="syntax14"> </span><span class="syntax14">och</span>
<span class="gutter">  11:</span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14">gamla</span><span class="syntax14">&quot;</span><span class="syntax18">,</span><span class="syntax5">1</span><span class="syntax18">,</span><span class="syntax14">&quot;</span><span class="syntax14">&aring;&Aring;&ouml;</span><span class="syntax14">&quot;</span><span class="syntax18">)</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  12:</span><span class="syntax17">?&gt;</span></span>
</PRE>

h3. Changing the Case of Strings

* If you are validating an e-mail address or the abbreviation for a state, such as "CA" or "MD", you might want to convert the entire string into lowercase letters before proceeding, or you might want to convert just the first character in a string, as in: "Mrs." or "Dr."
* PHP provides functions for changing the case of the characters in a string, as shown in the following table.
* Table: Functions That Change the Case of Strings

table{text-align:left; margin-left: 4em;}.
|{background:#ccc}.*Function*|{background:#ccc}.*What_It_Does*|
|@strtoupper()@       |Converts a string to uppercase letters                         |
|@strtolower()@       |Converts a string to lowercase letters                         |
|@ucfirst()@          |Converts the first letter in a string to uppercase             |
|@ucwords()@          |Converts the first letter in each word of a string to uppercase|
|@mb_convert_case()@  |Converts case of a string based on Unicode character properties|

h3. The @strtoupper()@ and @strtolower()@ Functions

* The functions *@strtoupper()@* and *@strtolower()@* are used to convert the case of characters in a string from upper to lowercase or vice versa.
* *@strtoupper()@* takes a string and returns a new string with all letters capitalized. *@strtolower()@* returns a new string with every character converted to lowercase.
* Format:
<br /><pre>
string strtoupper ( string )
string strtolower ( string )
</pre>
* Example:
<br /><pre>
$newstring=strtoupper("merry christmas"); // returns "MERRY CHRISTMAS"
$newstring=strtolower("HAPPY NEW YEAR"); // returns "happy new year"
</pre>

h3. The @ucfirst()@ and @ucwords()@ Functions

* If you want to change just the first character in a string to uppercase, PHP provides the *@ucfirst()@* and *@ucwords()@* functions.
* The *@ucfirst()@* function converts the first character of a string to uppercase. The *@ucwords()@* function capitalizes first letters of all the words in the string.
* Format:
<br /><pre>
string ucfirst ( string str )
string ucword( string str)
</pre>
* Example:
<br /><pre>
// Returns "San jose, california"
$newstring=ucfirst("san jose, california");
// Returns "San Jose, California"
$newstring=ucwords("san jose, california");
</pre>

h3. The @mb_convert_case()@ Function

* The *@mb_convert_case()@* function is like *@strtolower()@* and *@strtoupper()@* but is not locale dependent.
* It bases its conversion on Unicode characters rather than just ASCII, which means letters containing the German umlaut, the Swedish ring, or French accent marks are folded (included) into case conversion.
* To specify the case, this function provides three modes: *@MB_CASE_UPPER@*, *@MB_CASE_LOWER@*, and *@MB_CASE_TITLE@*. You can also specify a supported character set to establish how the string will be encoded.
* Table: Supported Character Sets

table{text-align:left; margin-left: 4em;}.
|{background:#ccc}.*Charset*|{background:#ccc}.*Aliases*|{background:#ccc}.*Description*|
|ISO-8859-1   |ISO8859-1    |Western European, Latin-1                            |
|ISO-8859-15  |ISO8859-15   |Western European, Latin-9. Adds the Euro sign, French<br />and Finnish letters missing in Latin-1(ISO-8859-1)|
|UTF-8        |ASCII        |compatible multibyte 8-bit Unicode                   |
|cp866        |ibm866, 866  |DOS-specific Cyrillic charset; supported in 4.3.2    |

* Format:
<br /><pre>
string mb_convert_case ( string str, int mode [, string encoding] )
</pre>
* Example:
* Filename: *casecnvt.php*
<br /><PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;!</span><span class="syntax9">DOCTYPE</span><span class="syntax9"> </span><span class="syntax9">html</span><span class="syntax9"> </span><span class="syntax9">PUBLIC</span><span class="syntax9"> </span><span class="syntax13">&quot;</span><span class="syntax13">-//W3C//DTD</span><span class="syntax13"> </span><span class="syntax13">HTML</span><span class="syntax13"> </span><span class="syntax13">3.2//EN</span><span class="syntax13">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">   2:</span><span class="syntax17">&lt;html</span><span class="syntax17">&gt;</span>
<span class="gutter">   3:</span> <span class="syntax17">&lt;head</span><span class="syntax17">&gt;</span>
<span class="gutter">   4:</span>  <span class="syntax17">&lt;meta</span><span class="syntax17"> </span><span class="syntax17">name</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">generator</span><span class="syntax14">&quot;</span><span class="syntax17"> </span><span class="syntax17">content</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">HTML</span><span class="syntax14"> </span><span class="syntax14">Tidy</span><span class="syntax14">,</span><span class="syntax14"> </span><span class="syntax14">see</span><span class="syntax14"> </span><span class="syntax14">www</span><span class="syntax14">.</span><span class="syntax14">w3</span><span class="syntax14">.</span><span class="syntax14">org</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutterH">   5:</span>  <span class="syntax17">&lt;title</span><span class="syntax17">&gt;</span>Case Conversion<span class="syntax17">&lt;/title</span><span class="syntax17">&gt;</span>
<span class="gutter">   6:</span> <span class="syntax17">&lt;/head</span><span class="syntax17">&gt;</span>
<span class="gutter">   7:</span> <span class="syntax17">&lt;body</span><span class="syntax17">&gt;</span>
<span class="gutter">   8:</span>  <span class="syntax17">&lt;?php</span>
<span class="gutter">   9:</span>    <span class="syntax10">$</span><span class="syntax10">string</span> <span class="syntax18">=</span> <span class="syntax14">&quot;</span><span class="syntax14">exit</span><span class="syntax14"> </span><span class="syntax14">here</span><span class="syntax14">!</span><span class="syntax14">!</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutterH">  10:</span>    <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">Returns:</span><span class="syntax2"> </span><span class="syntax2">EXIT</span><span class="syntax2"> </span><span class="syntax2">HERE!!</span>
<span class="gutter">  11:</span>    <span class="syntax8">echo</span> <span class="syntax9">mb_convert_case</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">string</span><span class="syntax18">,</span> MB_CASE_UPPER<span class="syntax18">,</span><span class="syntax14">&quot;</span><span class="syntax14">UTF</span><span class="syntax14">-</span><span class="syntax14">8</span><span class="syntax14">&quot;</span><span class="syntax18">)</span><span class="syntax18">,</span> <span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  12:</span>
<span class="gutter">  13:</span>    <span class="syntax10">$</span><span class="syntax10">string</span> <span class="syntax18">=</span> <span class="syntax14">&quot;</span><span class="syntax14">f</span><span class="syntax14">&amp;</span><span class="syntax14">scaron</span><span class="syntax14">;</span><span class="syntax14">rvaras</span><span class="syntax14"> </span><span class="syntax14">o</span><span class="syntax14">&amp;</span><span class="syntax14">OElig</span><span class="syntax14">;</span><span class="syntax14">tkomligt</span><span class="syntax14"> </span><span class="syntax14">f</span><span class="syntax14">&amp;</span><span class="syntax14">scaron</span><span class="syntax14">;</span><span class="syntax14">r</span><span class="syntax14"> </span><span class="syntax14">barn</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">  14:</span>    <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">Returns:</span><span class="syntax2"> </span><span class="syntax2">F&amp;scaron;rvaras</span><span class="syntax2"> </span><span class="syntax2">O&amp;OElig;tkomligt</span><span class="syntax2"> </span><span class="syntax2">F&amp;scaron;r</span><span class="syntax2"> </span><span class="syntax2">Barn</span>
<span class="gutterH">  15:</span>    <span class="syntax8">echo</span> <span class="syntax9">mb_convert_case</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">string</span><span class="syntax18">,</span> MB_CASE_TITLE<span class="syntax18">,</span><span class="syntax14">&quot;</span><span class="syntax14">ISO-</span><span class="syntax14">8859-</span><span class="syntax14">15</span><span class="syntax14">&quot;</span><span class="syntax18">)</span><span class="syntax18">,</span> <span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  16:</span>  <span class="syntax17">?&gt;</span>
<span class="gutter">  17:</span> <span class="syntax17">&lt;/body</span><span class="syntax17">&gt;</span>
<span class="gutter">  18:</span><span class="syntax17">&lt;/html</span><span class="syntax17">&gt;</span></span>
</PRE>

h3. Comparing Strings

* Does the password a user entered match the one on file? How does the user's response compare to the expected answer?
* PHP provides a number of functions to make comparing strings relatively easy.
* To ensure you are always comparing strings, you should use string comparison functions rather than comparison operators because the functions always cast their arguments to strings before comparing them.
* Also keep in mind when comparing strings, that " hello" is not the same as "hello" or "Hello", for example. PHP provides several functions to compare two strings:
* Table: Return Value from Comparison

table{text-align:left; margin-left: 4em;}.
|{background:#ccc}.*Value*|{background:#ccc}.*What_It_Means*|
|@0 (zero)@                 |The two values are equal           |
|@> 0 (greater than zero)@  |Value two is greater than value one|
|@< 0 (less than zero)@     |Value one is greater than value two|

* All string comparisons take at least two arguments and return a value based on comparing those arguments.
* The return value is always an integer that can be interpreted as shown in the table that follows. It lists string comparison functions and how they compare two strings.
* Table: String Comparison

table{text-align:left; margin-left: 4em;}.
|{background:#ccc}.*Function*|{background:#ccc}.*What_It_Does*|
|@strcmp()@                   |Compares two strings (case sensitive)     |
|@strcasecmp()@               |Compares two strings (not case sensitive) |
|@strnatcmp(str1, str2)@      |Compares two strings in ASCII order, but<br />any numbers are compared numerically|
|@strnatcasecmp(str1, str2)@  |Compares two strings in ASCII order,<br />case insensitive, numbers as numbers<br />Compares two strings (not case sensitive)|
|@strncasecomp()@             |and allows you to specify how many<br />characters to compare|
|@strspn()@                   |Compares a string against characters<br />represented by a mask|
|@strcspn()@                  |Compares a string that contains<br />characters not in the mask|

h3. The @strcmp()@ Function (Case Sensitive)

* The *@strcmp()@* function is most often used to compare two strings.
* Format:
<br /><pre>
int strcmp ( string str1, string str2 )
</pre>
* Example:
<br /><pre>
$number = strcmp("apples","oranges");
</pre>
* The *@strcmp()@* function uses a lexicographical comparison algorithm to compare two strings, meaning it compares each character in the string alphabetically based on the system's collating sequence.
* Because PHP uses the ASCII collating sequence, an uppercase "A" is represented as decimal 65 and an uppercase "B" as decimal 66, and so on. On the other hand, a lowercase "a" is 97 and a lowercase "b" is 98, and so on.
* If you compare "A" to "a," you can say that "A" is less than "a" because of their numeric representation in the ASCII table; that is, 65 is less than 97.
* The *@strcmp()@* function returns a number less than 0 if the first string is less than second string, a number greater than 0 if the first string is greater than the second string, and 0 if they are equal.
* The *@strcmp()@* function is case sensitive meaning that "Dan" and "dan" are not the same. If you want to ignore the case of the letters, use the *@strcasecmp()@* function discussed next. The next example shows how the *@strcmp()@* function works.
* Filename: *strcmp.php*
<br /><PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;html</span><span class="syntax17">&gt;</span>
<span class="gutter">   2:</span> <span class="syntax17">&lt;head</span><span class="syntax17">&gt;</span><span class="syntax17">&lt;title</span><span class="syntax17">&gt;</span>The strcmp() Function<span class="syntax17">&lt;/title</span><span class="syntax17">&gt;</span><span class="syntax17">&lt;/head</span><span class="syntax17">&gt;</span>
<span class="gutter">   3:</span> <span class="syntax17">&lt;body</span><span class="syntax17"> </span><span class="syntax17">bgcolor</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">lavendar</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">   4:</span>  <span class="syntax17">&lt;font</span><span class="syntax17"> </span><span class="syntax17">face</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">verdana</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutterH">   5:</span>  <span class="syntax17">&lt;h3</span><span class="syntax17">&gt;</span>Comparing Strings<span class="syntax17">&lt;/h3</span><span class="syntax17">&gt;</span>
<span class="gutter">   6:</span>  <span class="syntax17">&lt;pre</span><span class="syntax17">&gt;</span>
<span class="gutter">   7:</span>  <span class="syntax17">&lt;?php</span>
<span class="gutter">   8:</span>    <span class="syntax10">$</span><span class="syntax10">string1</span> <span class="syntax18">=</span> <span class="syntax14">&quot;</span><span class="syntax14">Dan</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>    <span class="syntax10">$</span><span class="syntax10">string2</span> <span class="syntax18">=</span> <span class="syntax14">&quot;</span><span class="syntax14">Daniel</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutterH">  10:</span>    <span class="syntax8">print</span> <span class="syntax14">&quot;</span><span class="syntax14">strcmp</span><span class="syntax14">(</span><span class="syntax14">'</span><span class="syntax10">$</span><span class="syntax10">string1</span><span class="syntax14">'</span><span class="syntax14">,</span><span class="syntax14">'</span><span class="syntax10">$</span><span class="syntax10">string2</span><span class="syntax14">'</span><span class="syntax14">)</span><span class="syntax14"> </span><span class="syntax14">outputs</span><span class="syntax14"> </span><span class="syntax14">&quot;</span>
<span class="gutter">  11:</span>         <span class="syntax18">.</span> <span class="syntax9">strcmp</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">string1</span><span class="syntax18">,</span><span class="syntax10">$</span><span class="syntax10">string2</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  12:</span>    <span class="syntax8">print</span> <span class="syntax14">&quot;</span><span class="syntax14">\nstrcmp</span><span class="syntax14">(</span><span class="syntax14">'</span><span class="syntax10">$</span><span class="syntax10">string2</span><span class="syntax14">'</span><span class="syntax14">,</span><span class="syntax14">'</span><span class="syntax10">$</span><span class="syntax10">string2</span><span class="syntax14">'</span><span class="syntax14">)</span><span class="syntax14"> </span><span class="syntax14">outputs</span><span class="syntax14"> </span><span class="syntax14">&quot;</span>
<span class="gutter">  13:</span>         <span class="syntax18">.</span> <span class="syntax9">strcmp</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">string2</span><span class="syntax18">,</span><span class="syntax10">$</span><span class="syntax10">string2</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  14:</span>    <span class="syntax8">print</span> <span class="syntax14">&quot;</span><span class="syntax14">\nstrcmp</span><span class="syntax14">(</span><span class="syntax14">'</span><span class="syntax10">$</span><span class="syntax10">string2</span><span class="syntax14">'</span><span class="syntax14">,</span><span class="syntax14">'</span><span class="syntax10">$</span><span class="syntax10">string1</span><span class="syntax14">'</span><span class="syntax14">)</span><span class="syntax14"> </span><span class="syntax14">outputs</span><span class="syntax14"> </span><span class="syntax14">&quot;</span>
<span class="gutterH">  15:</span>         <span class="syntax18">.</span> <span class="syntax9">strcmp</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">string2</span><span class="syntax18">,</span><span class="syntax10">$</span><span class="syntax10">string1</span> <span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  16:</span>    <span class="syntax8">print</span> <span class="syntax14">&quot;</span><span class="syntax14">\nstrcmp</span><span class="syntax14">(</span><span class="syntax14">'</span><span class="syntax14">dan</span><span class="syntax14">'</span><span class="syntax14">,</span><span class="syntax14">'</span><span class="syntax14">Dan</span><span class="syntax14">'</span><span class="syntax14">)</span><span class="syntax14"> </span><span class="syntax14">outputs</span><span class="syntax14"> </span><span class="syntax14">&quot;</span>
<span class="gutter">  17:</span>         <span class="syntax18">.</span> <span class="syntax9">strcmp</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">dan</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">Dan</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  18:</span>    <span class="syntax8">print</span> <span class="syntax14">&quot;</span><span class="syntax14">\nstrcmp</span><span class="syntax14">(</span><span class="syntax14">'</span><span class="syntax14">Dan</span><span class="syntax14">'</span><span class="syntax14">,</span><span class="syntax14">'</span><span class="syntax14">dan</span><span class="syntax14">'</span><span class="syntax14">)</span><span class="syntax14"> </span><span class="syntax14">outputs</span><span class="syntax14"> </span><span class="syntax14">&quot;</span>
<span class="gutter">  19:</span>         <span class="syntax18">.</span> <span class="syntax9">strcmp</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">Dan</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">dan</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">  20:</span>  <span class="syntax17">?&gt;</span>
<span class="gutter">  21:</span>  <span class="syntax17">&lt;pre</span><span class="syntax17">&gt;</span>
<span class="gutter">  22:</span> <span class="syntax17">&lt;/body</span><span class="syntax17">&gt;</span>
<span class="gutter">  23:</span><span class="syntax17">&lt;/html</span><span class="syntax17">&gt;</span></span>
</PRE>

h3. The @strcasecmp()@ Function (Case Insensitive)

* The *@strcasecmp()@* function works like the *@strcmp()@* function, but ignores the case of characters in strings.
* An uppercase "A" and a lowercase "a" are treated as equals when comparing characters.
* The *@strcasecmp()@* function returns a number less than 0 if the first string is less than the second string, a number greater than 0 if the first string is greater than the second string, and 0 if they are equal.
* The examples below demonstrate how the function works.
* Format:
<br /><pre>
int strcasecmp ( string str1, string str2 )
</pre>
* Example:
<br /><pre>
$number=strcasecmp("apples", "APples"); // Case-insensitive comparison
</pre>
* Filename: *strcasecmp.php*
<br /><PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;html</span><span class="syntax17">&gt;</span>
<span class="gutter">   2:</span> <span class="syntax17">&lt;head</span><span class="syntax17">&gt;</span>
<span class="gutter">   3:</span>  <span class="syntax17">&lt;title</span><span class="syntax17">&gt;</span>The strcasecmp() Function<span class="syntax17">&lt;/title</span><span class="syntax17">&gt;</span><span class="syntax17">&lt;/head</span><span class="syntax17">&gt;</span>
<span class="gutter">   4:</span> <span class="syntax17">&lt;body</span><span class="syntax17"> </span><span class="syntax17">bgcolor</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">lightblue</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutterH">   5:</span>  <span class="syntax17">&lt;h3</span><span class="syntax17">&gt;</span>Comparing Strings--Case-Insensitive<span class="syntax17">&lt;/h3</span><span class="syntax17">&gt;</span>
<span class="gutter">   6:</span>  <span class="syntax17">&lt;?php</span>
<span class="gutter">   7:</span>    <span class="syntax10">$</span><span class="syntax10">str1</span> <span class="syntax18">=</span> <span class="syntax14">&quot;</span><span class="syntax14">new</span><span class="syntax14"> </span><span class="syntax14">york</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">   8:</span>    <span class="syntax10">$</span><span class="syntax10">str2</span> <span class="syntax18">=</span> <span class="syntax14">&quot;</span><span class="syntax14">New</span><span class="syntax14"> </span><span class="syntax14">York</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>    <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax9">strcasecmp</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">str1</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">str2</span><span class="syntax18">)</span> <span class="syntax18">=</span><span class="syntax18">=</span> <span class="syntax5">0</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutterH">  10:</span>      <span class="syntax8">print</span> <span class="syntax14">&quot;</span><span class="syntax14">&lt;</span><span class="syntax14">p</span><span class="syntax14">&gt;</span><span class="syntax14">&lt;</span><span class="syntax14">em</span><span class="syntax14">&gt;</span><span class="syntax10">$</span><span class="syntax10">str1</span><span class="syntax14">&lt;</span><span class="syntax14">/</span><span class="syntax14">em</span><span class="syntax14">&gt;</span><span class="syntax14"> </span><span class="syntax14">is</span><span class="syntax14"> </span><span class="syntax14">equal</span><span class="syntax14"> </span><span class="syntax14">to</span><span class="syntax14"> </span><span class="syntax14">&lt;</span><span class="syntax14">em</span><span class="syntax14">&gt;</span><span class="syntax10">$</span><span class="syntax10">str2</span><span class="syntax14">&lt;</span><span class="syntax14">/</span><span class="syntax14">em</span><span class="syntax14">&gt;</span><span class="syntax14">&lt;</span><span class="syntax14">/</span><span class="syntax14">p</span><span class="syntax14">&gt;</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">  11:</span>    <span class="syntax18">}</span>
<span class="gutter">  12:</span>  <span class="syntax17">?&gt;</span>
<span class="gutter">  13:</span> <span class="syntax17">&lt;/body</span><span class="syntax17">&gt;</span>
<span class="gutter">  14:</span><span class="syntax17">&lt;/html</span><span class="syntax17">&gt;</span></span>
</PRE>
* Two string variables are assigned the same string, only differing in case.
* The *@strcasecmp()@* function ignores the difference in case and compares the characters. The strings are equal.

h3. The @strncasecmp()@ Function (Limits Character Length)

* This *@strncasecmp()@* function is similar to *@strcasecmp()@* in that it also ignores the case of characters when doing the comparison, but in addition, it lets you specify the (upper limit of the) number of characters (length) from each string to be used in the comparison.
* The *@strncasecmp()@* function returns a number less than 0 if the first string is less than the second string, a number greater than 0 if the first string is greater than the second string, and 0 if they are equal.
* Format:
<br /><pre>
int strncasecmp ( string str1, string str2, int length )
</pre>
* Example:
<br /><pre>
// Compares first 4 characters in each string
$number = strncasecmp("Homeland", "homeland", 4);
</pre>

h3. The @strnatcmp()@ Function (Natural Order Comparison)

* If you compare numeric strings, the expression '2' > '100' will evaluate to true because in the first position 2 is greater than 1 when using the ASCII collating sequence. The other character positions are irrelevant because the first string only has one character.
* The string comparison functions we have seen so far always cast their arguments to strings before doing the comparison. The *@strnatcmp()@* function takes into consideration strings that contain numbers.
* This function compares characters in two strings using the ASCII collating sequence, but if there are any numbers within the string they are compared in natural order; that is, as numbers the way we think of numbers, where 100 is greater than 2.
* This is true even if the numbers occur in the middle of the string. Thus 'January 2' will evaluate to less than 'January 10', whereas in a normal string comparison it would be greater since 2 is greater than 1.
* The *@strnatcasecmp()@* function is just like the *@strnatcmp()@* function except that it is not case sensitive when comparing strings.
* Format:
<br /><pre>
int strnatcmp ( string str1, string str2 )
</pre>
* Example:
<br /><pre>
// Returns 1 -- string 2 > string 1
echo strnatcmp('January 2, 2006','January 10, 2006');
// Returns -1 -- string 1 > string 2
echo strcmp( 'January 2, 2006','January 10, 2006' );
</pre>

h3. The @strspn()@ Function (Using a Mask for Comparison)

* h3. The *@strspn()@* function compares two strings and returns the number of characters that are contained in the initial part of the first string that match a set of characters provided in the second string, called the mask.
* For example, if you want to check that a password contains both digits and letters or if a zip code consists of only numbers, this function can be used to check that specified characters are included in the string.
* The two optional arguments allow you define where you want to start looking for the characters in the string and the length of the string to compare.
* The following examples demonstrate how to use the *@strspn()@* function.
* Format:
<br /><pre>
int strspn ( string str1, string str2 [, int start [, int length]] )
</pre>
* Example:
<br /><pre>
$year = "1953 was a very good year!";
$mask="0123456789";
// The string must start with 4 digits
$count=strspn($year,$mask,0,4);
</pre>
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;html</span><span class="syntax17">&gt;</span>
<span class="gutter">   2:</span> <span class="syntax17">&lt;head</span><span class="syntax17">&gt;</span>
<span class="gutter">   3:</span>  <span class="syntax17">&lt;title</span><span class="syntax17">&gt;</span>The strspn() Function<span class="syntax17">&lt;/title</span><span class="syntax17">&gt;</span>
<span class="gutter">   4:</span> <span class="syntax17">&lt;/head</span><span class="syntax17">&gt;</span>
<span class="gutterH">   5:</span> <span class="syntax17">&lt;body</span><span class="syntax17"> </span><span class="syntax17">bgcolor</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">lavender</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">   6:</span>  <span class="syntax17">&lt;font</span><span class="syntax17"> </span><span class="syntax17">size</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">+</span><span class="syntax14">1</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">   7:</span>  <span class="syntax17">&lt;h3</span><span class="syntax17">&gt;</span>Finding the Length of a String by a Mask<span class="syntax17">&lt;/h3</span><span class="syntax17">&gt;</span>
<span class="gutter">   8:</span>  <span class="syntax17">&lt;?php</span>
<span class="gutter">   9:</span>    <span class="syntax10">$</span><span class="syntax10">mask</span> <span class="syntax18">=</span> <span class="syntax14">&quot;</span><span class="syntax14">0123456789</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutterH">  10:</span>    <span class="syntax10">$</span><span class="syntax10">zip</span> <span class="syntax18">=</span> <span class="syntax14">&quot;</span><span class="syntax14">95926</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">  11:</span>    <span class="syntax10">$</span><span class="syntax10">count</span> <span class="syntax18">=</span> <span class="syntax9">strspn</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">zip</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">mask</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  12:</span>    <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax10">$</span><span class="syntax10">count</span> <span class="syntax18">=</span><span class="syntax18">=</span> <span class="syntax9">strlen</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">zip</span><span class="syntax18">)</span><span class="syntax18">)</span><span class="syntax18">{</span>
<span class="gutter">  13:</span>      <span class="syntax8">print</span> <span class="syntax14">&quot;</span><span class="syntax14">The</span><span class="syntax14"> </span><span class="syntax14">zip</span><span class="syntax14"> </span><span class="syntax14">code</span><span class="syntax14"> </span><span class="syntax14">consists</span><span class="syntax14"> </span><span class="syntax14">of</span><span class="syntax14"> </span><span class="syntax10">$</span><span class="syntax10">count</span><span class="syntax14"> </span><span class="syntax14">numbers</span><span class="syntax14">.</span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">  14:</span>    <span class="syntax18">}</span>
<span class="gutterH">  15:</span>  <span class="syntax17">?&gt;</span>
<span class="gutter">  16:</span> <span class="syntax17">&lt;/body</span><span class="syntax17">&gt;</span>
<span class="gutter">  17:</span><span class="syntax17">&lt;/html</span></span>
</PRE>
* The *@strspn()@* function returns the number of characters in $zip that match the characters in the mask.
* The *@strspn()@* function should return a count of 5, because there are 5 numbers in $zip and they are all found in the mask variable.
* The *if* statement checks if the value of $count is equal to the number of characters in $zip, the string length, and if so, prints a message.

h3. The @strcspn()@ Function (Comparison Not Matching a Mask)

* The *@strcspn()@* function is just like the *@strspn()@* function, but finds length of initial segment not matching the mask.
* It returns the length of the initial segment of the first string not containing any of the characters in the second string.
* The *@strcspn()@* function accepts two optional integer parameters that can be used to define the start position and the length of the string being compared.
* Format:
<br /><pre>
int strcspn ( string str1, string str2 [, int start [, int length]] )
</pre>
* Example:
<br /><pre>
$filename = "test3";
$length=strcspn("$filename", "1234567890", 0, 4);
// Returns 4; first 4 characters should not be numbers
</pre>

<br />

---

[[Unit Four => 152-166 Unit Four Index]]
