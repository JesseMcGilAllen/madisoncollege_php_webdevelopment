   PHP and MySQL Development 3 Credits
152-166

 Saving Data for Later

    * Saving Data for Later
      Now that you know how to access and manipulate data entered in an HTML form, you can look at ways of storing that information for later use. In most cases, including the example from the previous unit, you will want to store this data and load it later. In this case, you need to write customer orders to storage so that they can be filled later.
      In this unit, we will learn how to write the customer order from the previous example to a file and read it back. We also discuss why this is not the best solution. When you have large numbers of orders, you should use a database management system such as MySQL instead.
      You can store data in two basic ways: in flat files or in a database. A flat file can have many formats, but in general, when we refer to a flat file, we mean a simple text file. For our next example, we will write customer orders to a text file, one order per line.
      Writing orders this way is very simple, but also reasonably limiting, as you will see. If you are dealing with information of any reasonable volume, you will probably want to use a database instead. However, flat files have their uses, and in some situations you need to know how to use them.
      The processes of writing to and reading from files in PHP are virtually identical to the ways you write and read in the C programming language. If you have done any C programming or Unix shell scripting, these procedures will all seem reasonably familiar to you.
    * Storing and Retrieving Bob's Orders
Here, we will use a slightly modified version of the order form we looked at in Unit 2. Begin with this form and the PHP code we wrote to process the order data.
The form field for the shipping address is called address. This gives us a variable we can access as $_REQUEST['address'] or $_POST['address'] or $_GET['address'] , depending on the form submission METHOD.
In this unit, we write each order that comes in to the same file. Then we construct a web interface for Bob's staff to view the orders that have been received.
Processing Files
Writing data to a file requires three steps:
        1. Open the file. If the file does not already exist, we need to create it.
        2. Write the data to the file.
        3. Close the file.
      Similarly, reading data from a file takes three steps:
        1. Open the file. If you cannot open the file (for example, if it does not exist), you need to recognize this and exit gracefully.
        2. Read data from the file.
        3. Close the file.
      When you want to read data from a file, you have choices about how much of the file to read at a time. We describe each choice in detail. For now, we start at the beginning by opening a file.
