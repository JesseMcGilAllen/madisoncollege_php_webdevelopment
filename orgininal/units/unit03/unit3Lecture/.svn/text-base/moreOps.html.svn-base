<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<title>Expressions</title>
<link href="../../../css/basic.css" rel="stylesheet" type="text/css">
<script type="text/javascript" language="JavaScript">
<!--
function putSemester() {
    var today=new Date();
    var thisMonth=today.getMonth()+1;
    var thisYear=today.getFullYear();
    if(thisMonth <=6) {
        return "Spring, " + thisYear;
    }
    else {
       return "Fall, " + thisYear;
    }
}//-->
</script>
<style type="text/css">
<!--
    .bgStripes {
        background-image:url(../../../images/Xstripes.gif);
        background-attachment: fixed;
    }
    body {
        background-color:white;
    }
    strong {
        font-family: Arial, Helvetica, sans-serif;
    }
-->
</style>
</head>
<body style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">
<table class="bgStripes" border="0" width="100%">
<tbody>
<tr name="firstRow">
<td valign="top" width="80"><span style="font-size: x-small; font-weight: bold;">
<script type="text/javascript">
<!--
    document.write(putSemester());
-->
</script>
</span> <br />
</td>
<td style="text-align: center;"><span style="font-weight: bold; font-size: medium; color: darkblue;">
PHP Web Development with MySQL
</span> </td>
<td align="right" valign="top" width="80"><span style="font-size: x-small; font-weight: bold;">
3 Credits</span> </td>
</tr>
<tr>
<td colspan="3" style="text-align: center;"><span style="font-size: xx-small; font-weight: bold;">
152-166</span> </td>
</tr>
</tbody>
</table>
<!--The heading for the slides --> <br />
<table class="headTable1" border="0">
<tbody>
<tr>
<td width="100"><a href="basicOps.html"><img alt="" src="../../../images/btn_lArrow.gif" border="0"></a><a href="index.html"><img alt="" src="../../../images/btn_upArrow.gif" border="0"></a><a href="conditional.html"><img alt="" src="../../../images/btn_rArrow.gif" border="0"></a></td>
<td>More About Operators and Expressions</td>
</tr>
</tbody>
</table>
<br />
<div class="disp1">
<ul class="slidesUl1">
<li><p>
Comparison Operators
</p><p>
When operands are compared, relational and equality operators are used.
The operands can be numbers or strings.
</p><p>
The result of the comparison is either true or false, a Boolean value.
Comparisons are based on the type of the operands being compared.
</p><p>
If, for example, two numbers are compared, the comparison is numeric,
such as 5 &gt; 4. When comparing two strings, they are compared letter by letter
(lexographically) using ASCII values to represent the numeric value of each letter.
</p><p>
For example, "A" is less than "B" and when comparing "Daniel" to "Dan",
"Daniel" is greater than "Dan".
</p><p>
What if a string contains only numbers and is compared to another string that
contains only numbers? Then the strings are converted to numbers and compared
numerically.
</p><p>
Table: Comparison Operators
</p>
<table>
<tr>
<td><code><u><b>
Operator/Operands</b></u>&nbsp;</code></td>
<td><code><u><b>
Function</b></u></code></td>
</tr><tr>
<td><code>
$x == $y</code></td>
<td><code>
$x is equal to $y</code></td>
</tr><tr>
<td><code>
$x != $y</code></td>
<td><code>
$x is not equal to $y</code></td>
</tr><tr>
<td><code>
$x &gt; $y</code></td>
<td><code>
$x is greater than $y</code></td>
</tr><tr>
<td><code>
$x &gt;= $y</code></td>
<td><code>
$x is greater than or equal to $y</code></td>
</tr><tr>
<td><code>
$x &lt; $y</code></td>
<td><code>
$x is less than $y</code></td>
</tr><tr>
<td><code>
$x &lt;= $y</code></td>
<td><code>
$x is less than or equal to $y</code></td>
</tr><tr>
<td><code>
$x === $y</code></td>
<td><code>
$x is identical to $y in value and type</code></td>
</tr><tr>
<td><code>
$x !== $y</code></td>
<td><code>
$x is not identical to $y</code></td>
</tr>
</table>
<p>
If you want to make sure you are always comparing strings, rather than using
comparison operators, you should use string comparison functions.
</p><p>
<b>What Is Equal?</b> Men are equal, but they are not identical. Clones are identical.
</p><p>
In PHP, operators determine the equality or inequality of their operands,
based on specific rules.
</p><p>
When using the == or != equality operators, the operands may be of any given
data type (e.g., numbers, strings, booleans, objects, arrays, or a combination
of these), and there are rules that govern whether or not they are equal.
</p><p>
For example, two strings are equal when they have the same sequence of characters,
same length, and same characters in corresponding positions.
</p><p>
Two numbers are equal when they have the same numeric value.
If a string is compared to a number, they are equal if their values are the same
(e.g., "500" is equal to 500).
</p><p>
Positive and negative zeros are equal. Two Boolean operands are equal if they
are both true or both false. Two strings are equal if all the characters are
the same: Is "William" equal to "william"? No. The case of the letters makes
the difference.
</p><p>
Table: Equality Test with Strings and Numbers
</p>
<blockquote>
<table>
<tr>
<td><code><u><b>
Test</b></u></code></td>
<td><code><u><b>
Are They Equal?</b></u></code></td>
</tr><tr>
<td><code>
"William" == "William"&nbsp;</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
"william" == "William"</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
5 == 5.0</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
"54" == 54</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
"5.4" == 5.4</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
null == null</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
-0 == +0</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
false == false</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
true == 1</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
null == ""</code></td>
<td><code>
True</code></td>
</tr>
</table>
</blockquote>
<p>
<b>What Is Identical?</b> The <b>===</b> and <b>!==</b> operators test that
their operands are not only of the same value, but also of the same data type.
</p><p>
String "54" is equal to number 54, but not identical because one is a string
and the other is a number, even though their values are equal.
</p><p>
Table: Identity Test with Strings and Numbers
</p>
<blockquote>
<table>
<tr>
<td><code><u><b>
Test</b></u></code></td>
<td><code><u><b>
Are They Identical?</b></u></code></td>
</tr><tr>
<td><code>
"William" === "William"&nbsp;</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
"william" === "William"</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
5 === 5.0</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
"54" === 54</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
null === null</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
-0 == +0</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
false === false</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
true === 1</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
null === ""</code></td>
<td><code>
False</code></td>
</tr>
</table>
</blockquote>
</li>
<li><p>
Comparing Numbers
</p><p>
When the comparison operators are used to compare numbers, numeric values are
compared; for example, is 50 > 45? A boolean value of either true or false is returned.
PHP compares its operands numerically if:
</p>
</li>
</ul>
<blockquote>
<ol type="1">
<li class="row1">
<p>
Both operands are numbers: <code>4 &gt; 5</code>
</p></li>
<li class="row0">
<p>
One operand is a number and the other is a string consisting of all numbers:
<code>"54" &gt; 6</code>
</p></li>
<li class="row1">
<p>
Both operands are strings containing all numbers: <code>"56" &lt; "57"</code>
</p></li>
</ol>
</blockquote>
<ul class="slidesUl1">
<p>
The following examples illustrate numeric comparison:
</p>
<blockquote><code><small>
$x &gt; $y // $x is greater than $y<br>
$x &gt;= $y // $x is greater than or equal to $y<br>
$x &lt; $y // $x is less than $y<br>
$x &lt;= $y // $x is less than or equal to $y<br>
</small></code></blockquote>
<h4>
Filename: numcompare.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Comparing Numbers<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">#</SPAN><SPAN CLASS="syntax13">00ff99</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN>  <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">x</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax5">5</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">y</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax5">4</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">result</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">x</SPAN> <SPAN CLASS="syntax18">&gt;</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">y</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>    <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">h3</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">Is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">\$x</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">\$y</SPAN><SPAN CLASS="syntax13">?</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">The</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">result</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">result</SPAN><SPAN CLASS="syntax13">,</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">true</SPAN><SPAN CLASS="syntax13">.</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">result</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">x</SPAN> <SPAN CLASS="syntax18">&lt;</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">y</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>    <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">Is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">\$x</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">\$y</SPAN><SPAN CLASS="syntax13">?</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">The</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">result</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">,</SPAN> (int) <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">result</SPAN><SPAN CLASS="syntax18">,</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">,</SPAN>
<SPAN CLASS="gutter">  11:</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">false</SPAN><SPAN CLASS="syntax13">.</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  12:</SPAN>  <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutter">  13:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  14:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
In the first comparison, if the value of $x is greater than the value of $y,
a boolean value of 1 is returned and assigned to the variable $result.
The boolean result of the comparison is displayed by the browser.
</p><p>
In the second comparison, if $x is less than $y, 1 is assigned to the variable,
result; otherwise it is assigned the null string. It is cast to an integer so
that you can see the value 0, representing false.
</p>
<li><p>
Comparing Strings
</p><p>
Because PHP doesn't have different operators for comparing strings and numbers
(e.g., like Perl), you must be sure that the values you are comparing are
expressed as either numbers or strings.
</p>
<blockquote><code><small>
"php" &gt; 100 // "php" will be converted to number 0<br>
2 &gt; "100" // "100" will be converted to number 100<br>
"3" &gt; "100 dogs" // The operands are compared as strings<br>
</small></code></blockquote>
<p>
If you want to compare strings, rather than using comparison operators,
it is better to use you the string comparison functions discussed in Unit 4.
</p><p>
They ensure that all arguments are cast to strings before comparing them and
allow you to control the method in which the comparison occurs.
</p><p>
The difference between comparing strings and numbers is that numbers are
compared numerically and strings are compared alphabetically, based on the
ASCII character set.
</p><p>
The strings are compared letter by letter, from left to right, and if they are
exactly the same all the way to end, they are equal.
</p><p>
Once a letter in one string differs from the corresponding letter in the second
string, the comparison stops and each of the differing letters is evaluated.
</p><p>
For example, if the string "Dan" is compared to "dan", the comparison stops at
the first letter "D" and "d". "Dan" is smaller than "dan", because the letter
"D" has a lower ASCII value than the letter "d". "D" has an ASCII decimal value
of 68, and "d" has an ASCII value of 100.
</p>
<blockquote><code><small>
"string1" &gt; "string2" // "string1" is greater than "string2"<br>
"string1" &gt;= "string2" // "string1" is greater than or equal to "string2"<br>
"string1" &lt; "string2" // "string1" is less than "string2"<br>
"string1" &lt;= "string2" // "string1" is less than or equal to "string2"<br>
</small></code></blockquote>
<h4>
Filename: strcompare.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Comparing Strings<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">#</SPAN><SPAN CLASS="syntax13">00ff99</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">face</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">verdana</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">size</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">+</SPAN><SPAN CLASS="syntax13">1</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN>  <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">fruit1</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">pear</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">fruit2</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">peaR</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>    <SPAN CLASS="syntax8">if</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">fruit1</SPAN> <SPAN CLASS="syntax18">&gt;</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">fruit2</SPAN>) <SPAN CLASS="syntax18">{</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>      print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">True</SPAN><SPAN CLASS="syntax13">:</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">pear</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">greater</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">than</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">peaR</SPAN><SPAN CLASS="syntax13">.</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>    <SPAN CLASS="syntax18">}</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>  <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutter">  12:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  13:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
</li>
<li><p>
Logical Operators
</p><p>
Logical operators let you test combinations of expressions resulting in boolean
value, true and false.
</p><p>
Table: Testing Expressions with Logical Operators
</p>
<table>
<tr>
<td><code><u><b>
Example</b></u>&nbsp;&nbsp;&nbsp;</code></td>
<td><code><u><b>
Name</b></u>&nbsp;</code></td>
<td><code><u><b>
Result</b></u></code></td>
</tr><tr>
<td><code>
$a &amp;&amp; $b</code></td>
<td><code>
And</code></td>
<td><code>
TRUE if both $a and $b are TRUE.</code></td>
</tr><tr>
<td><code>
$a || $b</code></td>
<td><code>
Or</code></td>
<td><code>
TRUE if either $a or $b is TRUE.</code></td>
</tr><tr>
<td><code>
$a and $b</code></td>
<td><code>
And</code></td>
<td><code>
TRUE if both $a and $b are TRUE.</code></td>
</tr><tr>
<td><code>
$a or $b</code></td>
<td><code>
Or</code></td>
<td><code>
TRUE if either $a or $b is TRUE.</code></td>
</tr><tr>
<td><code>
$a xor $b</code></td>
<td><code>
Xor</code></td>
<td><code>
TRUE if either $a or $b is TRUE, but not both.</code></td>
</tr><tr>
<td><code>
! $a</code></td>
<td><code>
Not</code></td>
<td><code>
TRUE if $a is not TRUE.</code></td>
</tr>
</table>
<p>
They allow you combine the relational operators into more powerful expressions
for testing conditions and are most often used in conditional if statements.
</p><p>
They evaluate their operands, from left to right, testing the boolean value of
each operand in turn; that is, does the operand evaluate to true or false?
</p><p>
In the expression:
</p>
<blockquote><code><small>
if ( $x &gt; 5 &amp;&amp; $x &lt; 10 )<br>
</small></code></blockquote>
<p>
the &amp;&amp; is a logical operator. The expression simplified means,
"if $x is greater than 5 and x is also less than 10, then do something."
</p><p>
In the case of the logical AND (&amp;&amp;), if the first expression returns
true and the second expression also returns true, then the whole expression is true.
</p><p>
A numeric operand is true if it evaluates to any number that is not zero.
5, -2, and 74 are all true. 0 is false.
</p><p>
For example, when using the &amp;&amp; (AND) operator, both operands must be
true for the whole expression to be true.
</p><p>
The value returned from an expression such as 5 &amp;&amp; 6 is 1,
the last value evaluated by the operator. 5 is not zero (true) and 6 is not zero
(true), therefore, the expression is true.
</p><p>
5 &amp;&amp; 0, 0 &amp;&amp; 0, and 0 &amp;&amp; 5 all yield 0, which is false.
</p><p>
Table: Logical AND Examples
</p>
<blockquote>
<table>
<tr>
<td><code><u><b>
Expression</b></u></code></td>
<td><code><u><b>
What It Evaluates To</b></u></code></td>
</tr><tr>
<td><code>
true &amp;&amp; false</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
true &amp;&amp; true</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
"honest" &amp;&amp; true</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
true &amp;&amp; ""</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
true &amp;&amp; "honest"</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
5 &amp;&amp; 0</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
5 &amp;&amp; -6</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
5 &amp;&amp; false</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
null &amp;&amp; 0</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
null &amp;&amp; ""</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
null &amp;&amp; false</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
"hello" &amp;&amp; true &amp;&amp; 50&nbsp;</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
"this" &amp;&amp; "that"</code></td>
<td><code>
True</code></td>
</tr>
</table>
</blockquote>
<p>
The three logical operators are the logical <b>AND</b>, logical <b>OR</b>,
and logical <b>NOT</b>. The symbol for AND is &amp;&amp;, the symbol for OR is ||.
</p><p>
The English version for &amp;&amp; is <b>and</b>, and for || is <b>or</b>.
The only difference is that of precedence, the English version being of lower precedence.
</p>
</li>
<li><p>
The &amp;&amp; (and) Operator, the Logical AND
</p><p>
We all know the meaning of the English statement, "If you have the money and I
have the time . . ." Whatever is supposed to happen is based on two conditions,
and both conditions must be met. You must have the money and I must have the time.
</p><p>
PHP uses the symbol &amp;&amp; to represent the word AND. This operator is called
the logical AND operator.
</p><p>
If the expression on the left side of the &amp;&amp; evaluates to zero, null,
or the empty string "", the expression is false. If the expression on the left
side of the operator evaluates to true (nonzero), then the right side is
evaluated, and if that expression is also true, then the whole expression is true.
</p><p>
If the left side evaluates to true, and the right side is false, the expression
is false. If evaluated as booleans, the same rules apply, except the returned
value will be either boolean true or false.
</p><p>
The HTML form and PHP script below illustrate use of the Logical AND operator.
</p>
<h4>
Filename: dude.html (The HTML Form)
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Logical Operators<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">yellow</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">face</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">arial</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">size</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">+1</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">form</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">action</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">andlogic.php</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">p</SPAN><SPAN CLASS="syntax17">&gt;</SPAN> Dude, what is your name:
<SPAN CLASS="gutter">   9:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">input</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">type</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">text</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">size</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax17">25</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">name</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">name</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">p</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>   Like how old are you?
<SPAN CLASS="gutter">  12:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">input</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">type</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">text</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">size</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax17">5</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">name</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">age</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  13:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">p</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  14:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">input</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">type</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax17">submit</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">value</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">Submit</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">  15:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">form</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  16:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  17:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<h4>
Filename: andlogic.php (The PHP Script)
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Logical Operators<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">330033</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">text</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">white</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">face</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">arial</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">size</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">+</SPAN><SPAN CLASS="syntax13">1</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">p</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>  <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>    <SPAN CLASS="syntax9">extract</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">_REQUEST</SPAN>)<SPAN CLASS="syntax18">;</SPAN>  <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">Get</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">the</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">form</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">input</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>    <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">if(</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">$age</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">&gt;</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">12</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">and</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">$age</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">&lt;</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">20</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">and</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">$age</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">!=</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">&quot;&quot;</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">)</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>    <SPAN CLASS="syntax8">if</SPAN>( <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">age</SPAN> <SPAN CLASS="syntax18">&gt;</SPAN> <SPAN CLASS="syntax5">12</SPAN> <SPAN CLASS="syntax18">&amp;</SPAN><SPAN CLASS="syntax18">&amp;</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">age</SPAN> <SPAN CLASS="syntax18">&lt;</SPAN> <SPAN CLASS="syntax5">20</SPAN> <SPAN CLASS="syntax18">&amp;</SPAN><SPAN CLASS="syntax18">&amp;</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">age</SPAN> <SPAN CLASS="syntax18">!</SPAN><SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN>  ) <SPAN CLASS="syntax18">{</SPAN>
<SPAN CLASS="gutter">  12:</SPAN>      print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">Hey</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">name</SPAN><SPAN CLASS="syntax13">,</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">teenagers</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">rock</SPAN><SPAN CLASS="syntax13">,</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">dude</SPAN><SPAN CLASS="syntax13">!</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  13:</SPAN>    <SPAN CLASS="syntax18">}</SPAN> <SPAN CLASS="syntax8">else</SPAN> <SPAN CLASS="syntax18">{</SPAN>
<SPAN CLASS="gutter">  14:</SPAN>      <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">Sorry</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">name</SPAN><SPAN CLASS="syntax13">,</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">you</SPAN><SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">re</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">no</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">teenager</SPAN><SPAN CLASS="syntax13">!</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutterH">  15:</SPAN>    <SPAN CLASS="syntax18">}</SPAN>
<SPAN CLASS="gutter">  16:</SPAN>  <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutter">  17:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">p</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">p</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  18:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">img</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">src</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">teenager</SPAN><SPAN CLASS="syntax13">.</SPAN><SPAN CLASS="syntax13">jpg</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">border</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">1</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  19:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">p</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">  20:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  21:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
When the user presses the submit button, the browser will collect the form input,
encode it, and send it to the server where PHP resides.
</p><p>
In this example, all of the expressions must be true for the first print statement
to be executed.
</p></li>
<li><p>
The || (or) Operator
</p><p>
In the English statement, "If you have some cash or I have a credit card . . ." the word or is used in the condition. With the or, only one of the conditions must be met (hopefully you have the cash!). PHP uses the || symbol or the word or to represent the logical inclusive OR. If the expression on the left side of the || operator is evaluated as true (nonzero), the value of the expression is true, and no further checking is done. If the value on the left side of the || operator is false, the value of the expression on the right side of the operator is evaluated, and if true, the expression is true; that is, only one expression must be true.
</p><p>
Table: Logical OR Examples
</p>
<blockquote>
<table>
<tr>
<td><code><u><b>
Expression</b></u></code></td>
<td><code><u><b>
What It Evaluates To</b></u></code></td>
</tr><tr>
<td><code>
true || false</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
true || true</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
"honest" || true</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
true || ""</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
5 || 0
<td><code>
True</code></td>
</tr><tr>
<td><code>
5 || -6</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
5 || false</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
null || 0</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
null || ""</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
null || false</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
"hello" || true || 50&nbsp;</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
"this" || "that"</code></td>
<td><code>
True</code></td>
</tr>
</table>
</blockquote>
<p>
Below is an example of using "or" logic in a PHP script that handles an HTML
form with a checkbox.
</p>
<h4>
Filename: checkbox.html (The HTML File)
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Logical OR Operators<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">yellow</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">face</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">arial</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">size</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">+1</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">form</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">action</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">checkbox.php</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">method</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax17">GET</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">p</SPAN><SPAN CLASS="syntax17">&gt;</SPAN> Where should we eat:
<SPAN CLASS="gutter">   9:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">br</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">input</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">type</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">checkbox</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">name</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">place1</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">value</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">Wendy</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Wendy's
<SPAN CLASS="gutter">  11:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">br</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  12:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">input</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">type</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">checkbox</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">name</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">place2</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">value</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">Taco</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Taco Bell
<SPAN CLASS="gutter">  13:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">br</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  14:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">input</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">type</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">checkbox</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">name</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">place3</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">value</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">CliffHouse</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">&gt;</SPAN> Cliff House
<SPAN CLASS="gutterH">  15:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">br</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  16:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">input</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">type</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">checkbox</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">name</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">place4</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">value</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">OliveGarden</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">&gt;</SPAN> Olive Garden
<SPAN CLASS="gutter">  17:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">br</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  18:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">input</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">type</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">checkbox</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">name</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">place5</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">value</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">McDonald</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">&gt;</SPAN> McDonald's
<SPAN CLASS="gutter">  19:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">p</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">  20:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">input</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">type</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax17">submit</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">value</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">submit</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">now!</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  21:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">p</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  22:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">form</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  23:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  24:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<h4>
Filename: checkbox.php (The PHP Script)
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Logical OR Operator<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax17">CCFF66</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">face</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">arial</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">size</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">+</SPAN><SPAN CLASS="syntax13">1</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>  <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>    <SPAN CLASS="syntax9">extract</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">_REQUEST</SPAN>)<SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>    <SPAN CLASS="syntax8">if</SPAN> (<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">place1</SPAN> <SPAN CLASS="syntax18">|</SPAN><SPAN CLASS="syntax18">|</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">place2</SPAN> <SPAN CLASS="syntax18">|</SPAN><SPAN CLASS="syntax18">|</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">place5</SPAN>)
<SPAN CLASS="gutter">   9:</SPAN>    <SPAN CLASS="syntax18">{</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>      print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">No</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">fast</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">food</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">joints</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">today</SPAN><SPAN CLASS="syntax13">,</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">thanks</SPAN><SPAN CLASS="syntax13">!</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>    <SPAN CLASS="syntax18">}</SPAN> <SPAN CLASS="syntax8">elseif</SPAN> (<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">place3</SPAN> <SPAN CLASS="syntax18">|</SPAN><SPAN CLASS="syntax18">|</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">place4</SPAN>) <SPAN CLASS="syntax18">{</SPAN>
<SPAN CLASS="gutter">  12:</SPAN>      <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">OK</SPAN><SPAN CLASS="syntax13">,</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">what</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">time</SPAN><SPAN CLASS="syntax13">?</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  13:</SPAN>    <SPAN CLASS="syntax18">}</SPAN>
<SPAN CLASS="gutter">  14:</SPAN>  <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutterH">  15:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  16:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
If any one of the variables <b>$place1</b> or <b>$place2</b> or <b>$place5</b>
evaluates to true, the first logical expression is true, and the
first print statement is executed.
</p><p>
With the logical OR, only one of the expressions must be true for the expression
to be evaluated as true, but any others can be true as well.
</p></li>
<li><p>
The Difference Between &amp;&amp;/|| and the Words and/or
</p><p>
You can use the words "and" and "or" to replace <b>&amp;&amp;</b> and <b>||</b>
, respectively, but they are not exactly the same because they have a different
precedence.
</p><p>
The "and" and "or" operators are lower on the precedence table than the
corresponding &amp;&amp; and || .
</p><p>
In fact, they're lower than even the equal sign! Normally this won't make a
difference, but consider the following example.
</p>
<h4>
Filename: andlogic2.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Logical Word Operators<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">330066</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">text</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">white</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">face</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">arial</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">size</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">+</SPAN><SPAN CLASS="syntax13">1</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">h3</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Dealing with Precedence<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">h3</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">hr</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>  <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">x</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax5">5</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">y</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax5">6</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  12:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">z</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax5">0</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  13:</SPAN>    
<SPAN CLASS="gutter">  14:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">result</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">x</SPAN> <SPAN CLASS="syntax18">&amp;</SPAN><SPAN CLASS="syntax18">&amp;</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">y</SPAN> <SPAN CLASS="syntax18">&amp;</SPAN><SPAN CLASS="syntax18">&amp;</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">z</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutterH">  15:</SPAN>    <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">x</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&amp;</SPAN><SPAN CLASS="syntax13">&amp;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">y</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&amp;</SPAN><SPAN CLASS="syntax13">&amp;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">z</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">em</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">yields</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">em</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN>
<SPAN CLASS="gutter">  16:</SPAN>         (int)<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">result</SPAN> <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">.</SPAN><SPAN CLASS="syntax13">\n</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  17:</SPAN>
<SPAN CLASS="gutter">  18:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">result</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">x</SPAN> <SPAN CLASS="syntax18">and</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">y</SPAN> <SPAN CLASS="syntax18">and</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">z</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  19:</SPAN>    <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">x</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">and</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">y</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">and</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">z</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">em</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">yields</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">em</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN> <SPAN CLASS="syntax18">.</SPAN>
<SPAN CLASS="gutterH">  20:</SPAN>         (int)<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">result</SPAN> <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">.</SPAN><SPAN CLASS="syntax13">\n</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  21:</SPAN>
<SPAN CLASS="gutter">  22:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">result</SPAN> <SPAN CLASS="syntax18">=</SPAN> (<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">x</SPAN> <SPAN CLASS="syntax18">and</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">y</SPAN> <SPAN CLASS="syntax18">and</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">z</SPAN>)<SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  23:</SPAN>    <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">(</SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">x</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">and</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">y</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">and</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">z</SPAN><SPAN CLASS="syntax13">)</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">em</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">yields</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">em</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN> <SPAN CLASS="syntax18">.</SPAN>
<SPAN CLASS="gutter">  24:</SPAN>         (int)<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">result</SPAN> <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">.</SPAN><SPAN CLASS="syntax13">\n</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutterH">  25:</SPAN>  <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutter">  26:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">hr</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  27:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  28:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  29:</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
The <b>&amp;&amp;</b> is higher in precedence than the equal sign,
so its operands are evaluated left to right. The value of <b>$x</b> is logically "anded"
to <b>$y</b> and both values yield true, but when "anded" to <b>$z</b>, because
$z is 0 (false), the whole expression will be false. Finally, the value of the
expression is assigned to <b>$result</b> , and, when cast to an integer will print 0,
what we would expect.
</p><p>
By using the word "and" instead of <b>&amp;&amp;</b> , the situation changes.
The equal sign is now higher in precedence and will force the value on its
immediate right to be assigned to <b>$result</b> . The rest of the expression
will be discarded. 5 is assigned to $result.
</p><p>
By placing the whole expression in parentheses, now the expression takes
precedence over the equal sign and the behavior is again as we would expect.
</p></li>
<li><p>
The Logical XOR Operator
</p>
The result of the logical XOR operator, known as the exclusive OR operator,
is true if either operand, but not both, are true. Otherwise, the result is false.
</p><p>
In contrast, an inclusive OR operator returns a
value of true if either or both of its operands are true.
</p><p>
Table: Logical XOR Examples
</p>
<blockquote>
<table>
<tr>
<td><code><b><u>
Expression</u></b></code></td>
<td><code><b><u>
What It Evaluates To</u></b></code></td>
</tr><tr>
<td><code>
true xor false</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
true xor true</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
false xor false</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
true xor ""</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
5 xor 0</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
5 xor -6</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
5 xor false</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
null xor 0</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
null xor ""</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
null xor false</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
"this" xor "that"</code></td>
<td><code>
False</code></td>
</tr>
</table>
</blockquote>
<!--
Example 5.13.

   <html>
   <head><title>Logical XOR/title></head>
   <body bgcolor="CC99CC"><font face="arial" size="+1">
   <h3>Logical XOR</h3>
   <?php
1      $married = true;
       $single = true;
2      if($married xor $single){ print "Status O.K.<br />"; }
3      else{
           echo "Sorry, you can't have the best of both worlds. <br />
           You are either married or single. <br />
           Only one can be true. <br />";
       }
   ?>
   </body>
   </html>


Explanation

1	Two variables are assigned boolean true value.
2	The exclusive xor operator evaluates both its operands. Only one, not both, of the operands can result in true for the expression to be true. Because both the $married and $single evaluate to true, the expression is false.
3	The else condition block is executed because the xor evaluated to false. See Figure 5.16 for output of this example.

Figure 5.16. The Logical xor operator. Output from Example 5.13.
-->
</li><p>
The ! Operator
</p><p>
In the English statement, "Not true!" the word not is used for negation;
that is, not true is false, and not false is true.
</p><p>
PHP provides the NOT (!) operator for negation. The <b>!</b> operator is called
a unary operator because it has only one operand, for example: <code>! true</code>
or <code>! 5</code>
</p><p>
It returns true if the expression evaluates to false, and returns false if th
e expression evaluates to true.
</p><p>
Table: NOT Operator Examples
</p>
<blockquote>
<table>
<tr>
<td><code><b><u>
Expression</u></b></code></td>
<td><code><b><u>
What It Evaluates To</u></b></code></td>
</tr><tr>
<td><code>
! "this"</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
! 0</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
! 2</code></td>
<td><code>
False</code></td>
</tr><tr>
<td><code>
! false</code></td>
<td><code>
True</code></td>
</tr><tr>
<td><code>
! null</code></td>
<td><code>
True</code></td>
</tr>
</table>
</blockquote>
<!--
Example 5.14.

   <html><head><title>Logical Not Operator</title>
   </head>
   <body bgcolor="CC99CC"><font face="arial" size="+1">

   <?php
1       $answer = true;
2       print "\$answer is $answer, true. Now ! \$answer is "
           . ! $answer;
    ?>

   </body>
   </html>


Explanation

1	The boolean value, true, is assigned to the variable, $answer.
2	The ! operator caused true to become false.
-->
<p>
In summary, the following illustrates the logical operators and the values they
return.
</p>
<h4>
Filename: sumops.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Logical Operators<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">330066</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">text</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">white</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">face</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">arial</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">size</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">+</SPAN><SPAN CLASS="syntax13">1</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">hr</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>  <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num1</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax5">50</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num2</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax5">100</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num3</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax5">0</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  12:</SPAN>
<SPAN CLASS="gutter">  13:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">50</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&amp;</SPAN><SPAN CLASS="syntax13">&amp;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">100</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN> (int)(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num1</SPAN> <SPAN CLASS="syntax18">&amp;</SPAN><SPAN CLASS="syntax18">&amp;</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num2</SPAN>) <SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  14:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">0</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&amp;</SPAN><SPAN CLASS="syntax13">&amp;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">100</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN> (int)(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num3</SPAN> <SPAN CLASS="syntax18">&amp;</SPAN><SPAN CLASS="syntax18">&amp;</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num2</SPAN>) <SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutterH">  15:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">50</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">|</SPAN><SPAN CLASS="syntax13">|</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">100</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN> (int)(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num1</SPAN> <SPAN CLASS="syntax18">|</SPAN><SPAN CLASS="syntax18">|</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num2</SPAN>) <SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  16:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">0</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">|</SPAN><SPAN CLASS="syntax13">|</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">100</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN> (int)(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num3</SPAN> <SPAN CLASS="syntax18">|</SPAN><SPAN CLASS="syntax18">|</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num2</SPAN>) <SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  17:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">100</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">|</SPAN><SPAN CLASS="syntax13">|</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">0</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN> (int)(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num2</SPAN> <SPAN CLASS="syntax18">|</SPAN><SPAN CLASS="syntax18">|</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num3</SPAN>) <SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  18:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">50</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">xor</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">100</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN> (int)(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num1</SPAN> xor <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num2</SPAN>)<SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  19:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">!</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">100</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN> (int)(<SPAN CLASS="syntax18">!</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num2</SPAN>)<SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutterH">  20:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">!</SPAN><SPAN CLASS="syntax13">(</SPAN><SPAN CLASS="syntax13">100</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&amp;</SPAN><SPAN CLASS="syntax13">&amp;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">0</SPAN><SPAN CLASS="syntax13">)</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN> (int)(<SPAN CLASS="syntax18">!</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num2</SPAN> <SPAN CLASS="syntax18">&amp;</SPAN><SPAN CLASS="syntax18">&amp;</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num3</SPAN>))<SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  21:</SPAN>  <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutter">  22:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">hr</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  23:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  24:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
</li>
<li><p>
The Conditional Operator
</p><p>
The conditional operator is called a ternary operator because it requires
three operands. It is often used as a shorthand method for if/else conditional
statements.
</p><p>
Format: <code><small>conditional expression ? expression : expression</small></code>
</p><p>
Examples:
</p>
<blockquote><code>
$x ? $y : $z<br>
</code></blockquote>
<p>
If $x evaluates to true, the value of the expression becomes $y,
else the value of the expression becomes $z.
</p>
<blockquote><code>
$big = ($x > $y) ? $x : $y<br>
</code></blockquote>
<p>
If x is greater than $y, $x is assigned to variable $big,
else $y is assigned to variable $big.
</p>
<!--
Example 5.16.

Code View: Scroll / Show All

   (The HTML Form)
   <html><head><title>HTML Form</title></head>
   <body bgcolor="lightblue"><font size="+1">
1  <form action="conditional.php" method="get">
       <p> Please enter your name: <br />
2      <input type="text" size=50 name="name" />
       <p>
       Please enter your age: <br />
3      <input type="text" size=50 name="age">
       <p>
4      <input type=submit value="Submit" />
   </form>
   </body>
   </html>
-------------------------------------------------------------------
   (The PHP Script)
   <html><head><title>Conditional Statement</title></head>
   <body bgcolor="lightgreen"><font size="+1">
   <?php
       extract($_REQUEST);
5      $price = ($age > 55)? 3.00: 8.50;
6      print "$name, age $age pays \$$price for the Happy Meal
           Special! <br />";
   ?>
   </body>
   </html>
   </body>
   </html>

					  


Explanation

1	The HTML form starts here.
2	The input type is a text field. The user will type his or her name here. It will be assigned to the "name" attribute of the text field.
3	The input type is a text field. The user will type his or her age here. It will be assigned to the "age" attribute of the text field.
4	When the user presses the submit button, the PHP script named in the action attribute will be executed.
5	If the value of $age is greater than 55, the value to the right of the ? is assigned to the variable $price; if not, the value after the : is assigned to the variable $price.
6	The browser displays the value of the variable price.

In Figures 5.18 and 5.19 see what happens when the user enters 60. This value is assigned to variable $age in the program. Because the value of $age is greater than 55, $price is assigned 3.00. Otherwise, $price is assigned 8.50.

Figure 5.18. The HTML form output from Example 5.16.

[View full size image]

Figure 5.19. The PHP script output from Example 5.16.

[View full size image]
-->
</li>
<li><p>
Bitwise Operators
</p><p>
People represent numbers in decimal or base 10, a numbering system based on 10
values starting from 0 to 9; for example, $100,000 or 1955.
</p><p>
The HTML color codes are represented in hexadecimal, base 16, values ranging
from 0 to 15; for example, #00FFFF is cyan and #FF00FF is fuschia.
</p><p>
Computers store everything in binary or base 2. A binary numbering system
represents numbers in two values, 0 or 1. Each of the the individual ones and
zeros are called bits.
</p><p>
All the data you use is stored in your computer using bits. A <b>byte</b>
is made up of eight bits, a word is two bytes, or 16 bits, and finally,
two words together are called a double word, which is a 32-bit value.
</p><p>
A computer only uses zeros and ones for everything because a binary digit is
represented by the presence of an electric current. If the level of electricity
reaches a certain level, the digit is 1. Otherwise, the digit is a 0.
</p><p>
Using just two numbers makes building hardware less difficult and cheaper than
if electrical levels were represented by a bigger combination of bits,
like base 10 (decimal) or base 16 (hexadecimal).
Hence, computers store everything in binary.
</p></li>
Using Bitwise Operators
</p><p>
Most processors today are built to operate on 32-bit numbers.
For example, the term <b>Win32</b> is derived from the fact that an integer on
a Win32 compiler defaults to 32 bits.
</p><p>
Bitwise operators allow you to turn specific bits within an integer on or off.
For example, if you are setting a readonly flag on a file, you only need two
values, on or off, represented as 1 or 0.
</p><p>
And if both the left and right parameters are strings, the bitwise operator
will operate on the characters within the string.
</p><p>
Bitwise operators treat their operands as a set of 32 bits (zeros and ones),
rather than as decimal, hexadecimal, or octal numbers.
</p><p>
For example, the decimal number nine has a binary representation of 1001
(only the significant bits are represented here).
</p><p>
Although bitwise operators perform their operations on bits rather than expressions,
they return standard PHP numerical values.
</p><p>
If you are working with graphics, games, encryption, registers, setting switches,
or any operation that requires "twiddling bits," then the bitwise operators
might become useful.
</p><p>
Table: Bitwise Operators
</p>
<blockquote>
<table>
<tr>
<td><code><b><u>
Operator</u></b></code></td>
<td><code><b><u>
Function</u></b></code></td>
<td><code><b><u>
Example</u></b></code></td>
<td><code><b><u>
What It Means</u></b></code></td>
</tr><tr>
<td><code>
&amp;</code></td>
<td><code>
Bitwise AND&nbsp;</code></td>
<td><code>
x &amp; y</code></td>
<td><code>
Returns a 1 in each bit position if both<br>
corresponding bits are 1.</code></td>
</tr><tr>
<td><code>
|</code></td>
<td><code>
Bitwise OR</code></td>
<td><code>
x | y</code></td>
<td><code>
Returns a 1 in each bit position if one<br>
or both corresponding bits are 1.</code></td>
</tr><tr>
<td><code>
^</code></td>
<td><code>
Bitwise XOR</code></td>
<td><code>
x ^ y</code></td>
<td><code>
Returns a 1 in each bit position if one,<br>
but not both, of the corresponding bits are 1.</code></td>
</tr><tr>
<td><code>
~</code></td>
<td><code>
Bitwise NOT</code></td>
<td><code>
~x</code></td>
<td><code>
Inverts the bits of its operands.<br>
1 becomes 0; 0 becomes 1.</code></td>
</tr><tr>
<td><code>
&lt;&lt;</code></td>
<td><code>
Left shift</code></td>
<td><code>
x &lt;&lt; y</code></td>
<td><code>
Shifts x in binary representation y bits<br>
to left, shifting in zeros from the right.</code></td>
</tr><tr>
<td><code>
&gt;&gt;</code></td>
<td><code>
Right shift</code></td>
<td><code>
x &gt;&gt; y</code></td>
<td><code>
Shifts x in binary representation y bits<br>
to right, discarding bits shifted off.</code></td>
</tr><tr>
<td><code>
&gt;&gt;&gt;</code></td>
<td><code>
Zero-fill<br>
right shift</code></td>
<td><code>
x &gt;&gt;&gt; b&nbsp;</code></td>
<td><code>
Shifts x in binary representation y bits<br>
to the right, discarding bits shifted off,<br>
and shifting in zeros from the left.
</code></td>
</tr>
</table>
</blockquote>
<p>
When performing bitwise operations with <b>&amp;</b> , <b>|</b> , <b>^</b> ,
and <b>~</b> , each bit in the first operand is paired with the corresponding
bit in the second operand: first bit to first bit, second bit to second bit,
and so on. For example, the binary representation for <b>5 &amp; 4</b> is:
<b>101 &amp; 100</b>
<blockquote>
<pre>
  101    101    101
&amp; 100  | 100  ^ 100
-----  -----  -----
  100    101    001
</pre>
</blockquote>
</li>
<li><p>
Bitwise Shift Operators
</p><p>
The bitwise shift operators take two operands: The first is a quantity to be
shifted, and the second specifies the number of bit positions by which the
first operand is to be shifted. The direction of the shift operation is
controlled by the operator used.
</p><p>
The <b>&lt;&lt;</b> (left shift) operator shifts the first operand the specified
number of bits to the left. Excess bits shifted off to the left are discarded.
Zero bits are shifted in from the right.
</p><p>
The <b>&gt;&gt;</b> (sign-propagating right shift) operator shifts the first operand
the specified number of bits to the right. Excess bits shifted off to the right
are discarded. Copies of the leftmost bit are shifted in from the left.
</p><p>
Consider the following example:
</p>
<blockquote><code><small>
$y = $x &gt;&gt; 4;<br>
// Before shift: $x == 0110 1111 1001 0001<br>
// After shift: $y == 0000 0110 1111 1001<br>
</small></code></blockquote>
<p>
The <b>&gt;&gt;&gt;</b> (zero-fill right shift) operator shifts the first
operand the specified number of bits to the right. Excess bits shifted off to
the right are discarded. Zero bits are shifted in from the left.
</p><p>
For example, <code>19 &gt;&gt;&gt; 2</code> yields 4, because 10011 shifted two
bits to the right becomes 100, which is 4. For nonnegative numbers,
zero-fill right shift and sign-propagating right shift yield the same result.
</p><p>
Shift operators convert their operands to 32-bit integers and return a result
of the same type as the left shift operator.
</p>
<!--
Example 5.17.

Code View: Scroll / Show All

   <html>
   <head>
   <title>Bitwise Operators</title>
   </head>
   <body bgcolor="lightblue">
   <font size="+1" face="arial">
   <h3> Testing Bitwise Operators</h3>
   <?php
1      $result = 15 & 9;
       echo "15 & 9  yields: " .  $result;
2      $result = 15 | 9;
       echo "<br /> 15 | 9  yields: " . $result;
3      $result = 15 ^ 9;
       echo "<br /> 15 ^ 9  yields: " .  $result;
4      $result = 9 << 2;
       echo "<br /> 9 << 2 yields: " . $result;
5      $result = 9 >> 2;
       echo "<br /> 9 >> 2 yields: " . $result;
6      $result = -9 >> 2;
       echo "<br /> -9 >> 2 yields: " .  $result;
7      $result = 15 >>> 2;
       echo "<br /> 15 >>> 2 yields: " . $result;
   ?>
   </body>
   </html>

					  


Explanation

1	The binary representation of 9 is 1001, and the binary representation of 15 is 1111. When the bitwise & (AND) operator is applied to 1111 & 1001, the result is binary 1001 or decimal 9.
2	When the bitwise | (OR) operator is applied to 1111 | 1001, the result is binary 1111 or decimal 15.
3	When the bitwise ^ (Exclusive OR) is applied to 1111 ^ 1001, the result is binary 0110 or decimal 6.
4	9 << 2 yields 36, because 1001 shifted two bits to the left becomes 100100, which is 36.
5	9 >> 2 yields 2, because 1001 shifted two bits to the right becomes 10, which is 2.
6	-9 >> 2 yields -3, because the sign is preserved.
7	15 >>> 2 yields 3, because 1111 shifted two bits to the right becomes 0011, which is 3. For nonnegative numbers, zero-fill right shift and sign-propagating right shift yield the same result.
See the output in Figure 5.20.

Figure 5.20. Output from Example 5.17.
-->
</li>
<li><p>
Execution Operators
</p><p>
PHP supports one execution operator: backquotes or backticks (<b>``</b>).
</p><p>
Note that these are not single quotes!
</p><p>
PHP will attempt to execute the contents of the backticks as an operating system
command; the output will be returned and can be assigned to a variable.
</p><p>
The built-in function <b>shell_exec()</b> does the same thing as backticks.
</p><p>
Keep in mind that what you place between the backquotes is operating-system
dependent. In the following example, we use the <b>ls</b> command for UNIX or Linux.
For Windows, the equivalent command would be: <b>dir</b>
</p>
<blockquote><code><small>
&lt;?php<br>
&nbsp;&nbsp;$output = `ls -al`;<br>
&nbsp;&nbsp;echo "&lt;pre&gt;$output&lt;/pre&gt;";<br>
?&gt;<br>
</small></code></blockquote>
</li>
<li><p>
Error Control Operator
</p><p>
PHP supports one error control operator: the at sign (<b>@</b>).
</p><p>
When prepended to an expression, any error messages that would normally be
generated by PHP will be silenced.
</p><p>
The operator suppresses errors that happen when your script is executing,
not errors that are caused when the program is first parsed,
such as syntax errors.
</p><p>
The <b>@</b> operator works only on expressions that represent a value such
as variables, functions and <b>include()</b> calls, constants, and so forth,
but not constructs like if, switch, foreach, or function definitions.
</p><p>
Generally speaking it's a bad idea to use this operator unless you have created
an error-handling function of your own to take care of a potential error in
your program.
</p><p>
If the <b>track_errors</b> feature is enabled, any error message generated by
the expression will be saved in the variable <b>$php_errormsg</b> . This
variable will be overwritten each time a new error occurs.
</p>
<h4>
Filename: aterror.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>The Error Operator<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">lightblue</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">face</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">arial</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>  <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num1</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax5">0</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num2</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax5">2</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>    <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">h4</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">Error</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">coming</SPAN><SPAN CLASS="syntax13">.</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">Watch</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">out</SPAN><SPAN CLASS="syntax13">!</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">h4</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>    <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">Illegal</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">division</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">by</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">zero</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">will</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">generate</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">an</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">error</SPAN>
<SPAN CLASS="gutter">  12:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">div</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num2</SPAN> <SPAN CLASS="syntax18">/</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">num1</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  13:</SPAN>  <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutter">  14:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">  15:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
It is illegal to divide a number by zero, and doing so will cause an error to
be displayed.
</p><p>
If we prepend the <b>@</b> error operator to the statement in line 12,
the error message will be suppressed. Your instructor will show you the output
after adding the @ operator to this line.
</p><p>
See also the <b>error_reporting()</b> function and the PHP manual section for
error handling and logging functions.
</p></li>
<li><p>
Type Operators
</p><p>
PHP 5 has a single type operator: <b>instanceof()</b>
instanceof() is used to determine whether a given object is of a specified object
class. We will discuss it in the unit on object-oriented PHP.
</p>
</li>
</ul>
</div>
</body>
</html>

