<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<title>Cookies</title>
<link href="../../../css/basic.css" rel="stylesheet" type="text/css">
<script type="text/javascript" language="JavaScript">
<!--
function putSemester() {
    var today=new Date();
    var thisMonth=today.getMonth()+1;
    var thisYear=today.getFullYear();
    if(thisMonth <=6) {
        return "Spring, " + thisYear;
    }
    else {
       return "Fall, " + thisYear;
    }
}//-->
</script>
<style type="text/css">
<!--
    .bgStripes {
        background-image:url(../../../images/Xstripes.gif);
        background-attachment: fixed;
    }
    body {
        background-color:white;
    }
    strong {
        font-family: Arial, Helvetica, sans-serif;
    }
-->
</style>
</head>
<body style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">
<table class="bgStripes" border="0" width="100%">
<tbody>
<tr name="firstRow">
<td valign="top" width="80"><span style="font-size: x-small; font-weight: bold;">
<script type="text/javascript">
<!--
    document.write(putSemester());
-->
</script>
</span> <br>
</td>
<td style="text-align: center;"><span style="font-weight: bold; font-size: medium; color: darkblue;">
PHP Web Development with MySQL
</span> </td>
<td align="right" valign="top" width="80"><span style="font-size: x-small; font-weight: bold;">
3 Credits</span> </td>
</tr>
<tr>
<td colspan="3" style="text-align: center;"><span style="font-size: xx-small; font-weight: bold;">
152-166</span> </td>
</tr>
</tbody>
</table>
<!--The heading for the slides --> <br>
<table class="headTable1" border="0">
<tbody>
<tr>
<td width="100"><a href="index.html"><img alt="" src="../../../images/btn_lArrow.gif" border="0"></a><a href="index.html"><img alt="" src="../../../images/btn_upArrow.gif" border="0"></a><a href="sessions1.html"><img alt="" src="../../../images/btn_rArrow.gif" border="0"></a></td>
<td>Managing Cookies in PHP</td>
</tr>
</tbody>
</table>
<br>
<div class="disp1">
<ul class="slidesUl1">
<li><p>
What Is Stateless?
</p><p>
The HTTP Web protocol was designed to be stateless to keep transactions between
a browser and server brief and cut down on the overhead of keeping connections open.
</p><p>
Stateless means that after a transaction takes place between the browser and
server, the connection is lost and neither the browser nor server has any
recollection of what transpired between one session and the next.
</p><p>
Each request to the server is considered a brand new request. This works well
for static documents, but not so well when we need to keep track of a Web site user.
</p><p>
Imagine, for example, an online banking Web site. If each request were brand new,
you would have to retype your username and password every time you clicked any
link on that Web site.
</p><p>
You would log in to see your balance, log in again to see a specific transaction,
then log in again to make a transfer, and so on.
</p><p>
The shopping cart is used as the most obvious reason for saving state. As the
Internet grew, people started filling up their virtual carts with groceries,
music, books, prescription drugs, and even cars and homes.
</p><p>
It became necessary for merchants to remember what their customers purchased,
their preferences, registration numbers, IDs, and so on.
</p><p>
Cookies and sessions are used to let programs like PHP remember past requests.
</p><p>
Cookies are used to store small amounts of information on the user's browser,
whereas sessions can manage much larger amounts of data and store information
on the server side.
</p><p>
Because cookies and sessions often work together in saving state, this unit
discusses both methods and the advantages and disadvantages of each.
</p></li>
<li><p>
What Are Cookies?
</p><p>
Before we delve into using cookies with PHP, let's discuss what they are.
In 1994 Netscape came up with the concept of a cookie.
</p><p>
A cookie is a small packet of information stored on the browser, and it is
persistent, meaning it is maintained between browser sessions and might persist
even when the user shuts down his or her computer.
</p><p>
The cookie idea became very popular and is now supported by all major browsers.
</p><p>
The term cookie comes from an old programming trick for debugging and testing
routines in a program. A text file called a "magic cookie" was created. It
contained text that was shared by two routines so that they could communicate
with each other.
</p><p>
The cookie feature started by Netscape is also just a little piece of textual
data that is stored in a file (often called the cookie jar) on the hard drive
of the client (browser).
</p><p>
It contains information about the viewer that can be retrieved and used at a
later time. The HTTP server sends the cookie in a header to the browser when
the browser connects for the first time and from then on, the browser returns
a copy of the cookie to the server each time it connects.
</p><p>
The information is passed back and forth between the server and browser via
HTTP headers. See
<a href="http://wp.netscape.com/newsref/std/cookie_spec.html">http://wp.netscape.com/newsref/std/cookie_spec.html</a>
for the cookie specification.
</p><p>
Cookies can make a Web page personal and friendly, and store important
information about the user's language, reading, or music preferences;
how many times he or she has visited your site; track items in a shopping cart,
and so on.
</p><p>
They can also be annoying, and some question the security of putting unknown
data on the user's hard drive.
</p><p>
Users do have a say about whether or not to use them.
Cookies can be turned off and removed from the hard drive.
</p><p>
If you are using Internet Explorer you can delete cookies by going to the Tools
menu and then to Internet Options. For Firefox, you can control cookies by
selecting Options from the Tools menu.
</p><p>
Unlike Grandma's old-fashioned cookie jar packed full of sugar cookies,
Web browser cookies are limited (although today those limits seem to be higher).
</p><p>
Browsers usually cannot store more than 300 cookies and servers usually not more
than 20. Storage is usually limited in length to only 4 kilobytes
(4,000 characters) per cookie, so you cannot store a lot of information.
</p><p>
The actual filename that holds the cookie data varies on different platforms.
Internet Explorer stores cookies in the \Window\Cookies directory; and on the Mac,
they are found in a file called MagicCookie.
</p><p>
<b>Note:</b> When you are setting cookies, they are stored in the browser's memory and
not written to the hard drive until you exit the browser.
</p></li>
<li><p>
Cookie Ingredients
</p><p>
Cookies consist of a string of text stored on the user's hard drive as a small
text file. They are sent from a server-side program to the browser through the
HTTP request and response headers.
</p><p>
The cookie's default lifetime is the length of the current session (when the
user exits his or her browser), after which it is destroyed.
</p><p>
The expiration time for the end of a cookie's life can be set as an attribute
of the Cookie header (see the "Expiration Date" section that follows) making
it possible to extend the life of the cookie forever.
</p><p>
Cookies are comprised of text in the form of key–value pairs, often nicknamed
"crumbs," and up to 20 pairs can be stored in a single cookie string.
The browser stores only one cookie per page.
</p><p>
When making cookies, the crumbs consist of "name = value" pairs, called attributes,
terminated with a semicolon. Within the string, semicolons, commas, or whitespace
characters are not allowed. The HTTP Set-Cookie header has the following format.
</p><p>
Format:
</p>
<blockquote><code><small><pre>
Set-Cookie: name=value; [expires=date};[ path=path];
            [domain=domainname]; [secure];
</pre></small></code></blockquote>
<p>
Example:
</p>
<code><small><pre>
Set-Cookie: id="Bob";expires=Monday, 21-Oct-05 12:00:00 GMT;
            domain="bbb.com"; path="/"; secure;
</pre></small></code>
</li>
<li><p>
The Attributes of a Cookie
</p><p>
When setting the cookie, it is important to understand its components.
A cookie has a name, a value, and another set of optional attributes to
determine the expiration date, the domain, path, and whether the cookie must
be sent over a secure communications channel (HTTPS).
All of these attributes are assigned as strings.
</p></li>
<li><p>
Name
</p><p>
The actual cookie text consists of the name of the cookie and the value stored
there. It can be a session ID, a username, or whatever you like.
</p><p>
Format:
</p>
<blockquote><code><small>
nameofcookie=value;<br>
</small></code></blockquote>
<p>
Examples:
</p>
<blockquote><code><small>
id=456;<br>
email=joe@abc.com;<br>
name=Bob;<br>
</small></code></blockquote>
<p>
The name of the cookie is on the left side of the "=" sign and the cookie text
that gets stored is on the right side. The value assigned is a string.
</p><p>
To add multiple values to the string, unique characters are used to separate
the values, such as: <code>Bill*Sanders*345</code>
</p></li>
<li><p>
Expiration Date
</p><p>
The cookie normally expires when the current browser session ends, which gives
it little value, but you can specify an expiration date that will let it persist,
by using the following format.
</p><p>
Format:
</p>
<code><small>
;expires=Weekday, DD-MON-YY HH:MM::SS GMT<br>
</small></code>
<p>
Example:
</p>
<code><small>
;expires=Friday, 15-Mar-07 12:00:00 GMT<br>
</small></code>
<p>
The day of the week is specified by Weekday, the day of the month by DD,
the first three letters of the month by MON, and the last two numbers of the
year by YY.
</p><p>
The hour, minutes, and seconds are specified in HH:MM:SS and the GMT time
zone is always used. Some cookies last for days, but it is possible for them
to even last for years.
</p><p>
It is up to the designer to decide how long a cookie should live. Setting the
expiration date also limits the amount of possible damage that could be done
if the cookie is intercepted by some hacker.
Once the cookie has expired it is called stale and is automatically destroyed.
</p></li>
<li><p>
Domain Name
</p><p>
The domain name, not commonly used, specifies a general domain name to which
the cookie should apply.
</p><p>
It allows the cookie to be shared among multiple servers instead of just the
one you are on. If you do not use the full "http://domain" syntax, then a leading
dot must precede the domain name.
</p><p>
Format
</p>
<blockquote><code><small>
; domain=.domain_name<br>
; domain=http://somedomain.com<br>
</small></code></blockquote>
<p>
Example:
</p>
<blockquote><code><small>
; domain=.kajinsky.com<br>
; domain=http://kajinksy.com<br>
</small></code></blockquote>
</li>
<li><p>
Path
</p><p>
The path is used to specify where the cookie is valid for a particular server.
Setting a path for the cookie allows other pages from the same domain to share
a cookie.
</p><p>
Format:
</p>
<blockquote><code><small>
; path=pathname<br>
</small></code></blockquote>
<p>
Example:
</p>
<blockquote><code><small>
; path=/home<br>
</small></code></blockquote>
</li>
<li><p>
Security
</p><p>
If a cookie is secure, it must be sent over a secure communication channel
(HTTPS server).
</p><p>
Format:
</p>
<blockquote><code><small>
; secure
</small></code></blockquote>
</li>
<li><p>
PHP and Cookies
</p><p>
Now that we have discussed HTTP cookies and their ingredients, it is time to use
them with PHP. You will use the same ingredients to make, send, and delete cookies,
but all of the underlying details shown in the previous section will be handled
by PHP functions.
</p></li>
<li><p>
Creating Cookies with the setcookie() Function
</p><p>
Before creating a cookie, remember that the cookie is part of an HTTP header.
Headers must be sent before anything else on the page. One echo statement,
even a blank line or space preceding the header will cause an error.
</p><p>
A cookie is created with the PHP built-in <b>setcookie()</b> function, which
takes at least one argument, the name of the cookie.
</p><p>
If only the <b>name</b> argument is present, the cookie by that name will be
deleted from the remote client.
</p><p>
The second argument is the <b>value</b> that will be stored in the cookie such as a
username, date, e-mail, and so on. It is not a good idea to put any kind of
sensitive personal information in cookie files because cookie files are readable
text files.
</p><p>
Other optional arguments include the expiration date of the cookie, and the
path where the cookie is valid, and lastly, whether or not to make the cookie
secure.
</p><p>
If you do not set the expiration date, the cookie will be removed when the
browser session ends. To skip an argument you can use the empty string (""),
but you must use zero (0) to skip the expire and secure arguments because their
values must be integers.
</p><p>
The expire argument is an integer representing the time in seconds as returned
by the PHP <b>time()</b> or <b>mktime()</b> functions.
</p><p>
The secure argument indicates that the cookie should only be transmitted over
a secure HTTPS SSL connection. You can check to see if the page is being sent
over an SSL connection by checking the <b>$_SERVER['HTTPS']</b> superglobal
array, as follows:
</p>
<blockquote><code><small>
if ($_SERVER['HTTPS'] == 'on')<br>
{<br>
&nbsp;&nbsp;statements;<br>
}<br>
</small></code></blockquote>
<p>
If necessary, you can send more than one cookie by using more setcookie()
function calls, but remember that the protocol has a limit of 20 cookies from
one site to a single user.
</p><p>
For storing more than one value in a cookie, you can use an array.
</p><p>
Format:
</p>
<code><small><pre>
boolean setcookie ( string name [, string value [, int expire [,
       string path [, string domain [, int secure]]]]] )
</pre></small></code>
<p>
Example:
</p>
<code><small>
setcookie('cookie_name','value');<br>
setcookie('uid', $uid, time() + 60 * 60 * 24 * 60,'/mydir', 1);<br>
</small></code>
<p>
When you name the cookie, follow the same conventions as you would when creating
any PHP variable; that is, no spaces or odd characters.
</p><p>
For example, you cannot use whitespace, semicolons, pipe symbols, or commas
in the name of the cookie.
</p><p>
The cookies are stored in the PHP super global <b>$_COOKIE</b> array. The server
variable, <b>$_SERVER['REQUEST_TIME']</b> , gives the time when a request started.
</p></li>
<li><p>
The $_COOKIE Global Array
</p><p>
Once the server has set a cookie, the browser sends it back to the server every
time the page loads. When you start your browser, if there are cookies, they
pertain to the current page.
</p><p>
When a cookie is set, PHP assigns it to the super global $_COOKIE associative
array, consisting of "key=value" pairs where the keys are the names of all the
cookies and the values are what is stored in the cookie, such as a session ID
number, a user ID, e-mail, and so on.
</p><p>
You can only get those cookies that were written for the server you are on and
belong to you. You cannot read and write cookies that belong to someone else or
reside on a different server.
</p><p>
To see all the cookies on a page, extract the contents of the $_COOKIE array.
When you reload the page, the $_COOKIE array will contain all the cookie values
saved for that page.
</p><p>
When retrieving cookies, you can check to see if the cookie was set with the
built-in isset() or empty() functions, as shown in the example below.
</p>
<h4>
Filename: setcookie.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax9">setcookie</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">usr</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">Ellie</span><span class="syntax13"> </span><span class="syntax13">Quigley</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax9">setcookie</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">color</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">blue</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   4:</span><span class="syntax17">?&gt;</span>
<span class="gutterH">   5:</span><span class="syntax17">&lt;html</span><span class="syntax17">&gt;</span>
<span class="gutter">   6:</span> <span class="syntax17">&lt;head</span><span class="syntax17">&gt;</span><span class="syntax17">&lt;title</span><span class="syntax17">&gt;</span>The Cookie Array<span class="syntax17">&lt;/title</span><span class="syntax17">&gt;</span><span class="syntax17">&lt;/head</span><span class="syntax17">&gt;</span>
<span class="gutter">   7:</span> <span class="syntax17">&lt;body</span><span class="syntax17"> </span><span class="syntax17">bgcolor</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">lavender</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">   8:</span>  <span class="syntax17">&lt;font</span><span class="syntax17"> </span><span class="syntax17">face</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">verdana</span><span class="syntax14">&quot;</span><span class="syntax17"> </span><span class="syntax17">size</span><span class="syntax18">=</span><span class="syntax13">'</span><span class="syntax13">+</span><span class="syntax13">1</span><span class="syntax13">'</span><span class="syntax17">&gt;</span>
<span class="gutter">   9:</span>  <span class="syntax17">&lt;h2</span><span class="syntax17">&gt;</span>$_COOKIE[]<span class="syntax17">&lt;/h2</span><span class="syntax17">&gt;</span>
<span class="gutterH">  10:</span>  <span class="syntax17">&lt;?php</span>
<span class="gutter">  11:</span>    <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span> <span class="syntax8">empty</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">_COOKIE</span><span class="syntax18">[</span><span class="syntax13">'</span><span class="syntax13">color</span><span class="syntax13">'</span><span class="syntax18">]</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">  12:</span>      <span class="syntax8">echo</span> <span class="syntax13">'</span><span class="syntax13">&lt;pre&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  13:</span>      <span class="syntax9">print_r</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">_COOKIE</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  14:</span>      <span class="syntax8">echo</span> <span class="syntax13">'</span><span class="syntax13">&lt;/pre&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutterH">  15:</span>    <span class="syntax18">}</span>
<span class="gutter">  16:</span>  <span class="syntax17">?&gt;</span>
<span class="gutter">  17:</span>  <span class="syntax17">&lt;/font</span><span class="syntax17">&gt;</span>
<span class="gutter">  18:</span> <span class="syntax17">&lt;/body</span><span class="syntax17">&gt;</span>
<span class="gutter">  19:</span><span class="syntax17">&lt;/html</span><span class="syntax17">&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
The first cookie key–value pair is set on line 2. The name of the cookie is "usr"
and the corresponding value is "Ellie Quigley".
</p><p>
The second cookie key–value pair is set on line 3. The name of the cookie is
"color" and the corresponding value is "blue".
Normally, the user would provide the value from a form.
</p><p>
Because cookies will not become visible until the next loading of the page where 
the cookie should be visible, you can test if a cookie was successfully set before
extracting its contents.
</p><p>
The first time the page is viewed the $_COOKIE array is empty.
When the page is refreshed, the $_COOKIE array has cookie values.
</p><p>
The print_r function displays the contents of the cookie. If the cookie had not
been set or had expired there would be no output.
</p><p>
All the other attributes set for the cookie, like expiration date, path,
security, and so on, are not visible.
</p></li>
<li><p>
Storing Multiple Values in One Cookie—Serialization
</p><p>
The setcookie() function accepts one string as its value. In the previous example,
the setcookie() function was called twice to register two cookie values.
</p><p>
Because the number of cookies is limited to 20 per domain, you might want to
assign multiple values to one cookie, for example, data coming in from a form.
</p><p>
In the following example, one cookie will store three values. This example
demonstrates how to serialize data. Serializing the data allows you to convert
an array into a string that will be accepted by the cookie.
</p><p>
After retrieving the cookie contents, you will have to unserialize it to convert
the string back to an array.
</p><p>
The PHP <b>serialize()</b> function returns a string containing a byte-stream
representation of the value, making the value acceptable for storage anywhere —
in this example, a cookie, though serialization is also used for storing variables
and objects in a file or database.
</p><p>
If you go to your browser and look at the actual data stored in the cookie,
it has been URL-encoded.
</p><p>
Use <b>unserialize()</b> to return the string to its orginal form.
</p>
<h4>
Filename: serialize.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">info</span> <span class="syntax18">=</span> <span class="syntax8">array</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">ellie</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">yellow</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax5">22</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax9">setcookie</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">usr</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax9">serialize</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">info</span><span class="syntax18">)</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   4:</span><span class="syntax17">?&gt;</span>
<span class="gutterH">   5:</span><span class="syntax17">&lt;html</span><span class="syntax17">&gt;</span>
<span class="gutter">   6:</span> <span class="syntax17">&lt;head</span><span class="syntax17">&gt;</span><span class="syntax17">&lt;title</span><span class="syntax17">&gt;</span>Multiple Cookie Values<span class="syntax17">&lt;/title</span><span class="syntax17">&gt;</span><span class="syntax17">&lt;/head</span><span class="syntax17">&gt;</span>
<span class="gutter">   7:</span> <span class="syntax17">&lt;body</span><span class="syntax17"> </span><span class="syntax17">bgcolor</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">lavender</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">   8:</span>  <span class="syntax17">&lt;font</span><span class="syntax17"> </span><span class="syntax17">face</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">verdana</span><span class="syntax14">&quot;</span><span class="syntax17"> </span><span class="syntax17">size</span><span class="syntax18">=</span><span class="syntax13">'</span><span class="syntax13">+</span><span class="syntax13">1</span><span class="syntax13">'</span><span class="syntax17">&gt;</span>
<span class="gutter">   9:</span>  <span class="syntax17">&lt;h2</span><span class="syntax17">&gt;</span>Serialize Cookie Values<span class="syntax17">&lt;/h2</span><span class="syntax17">&gt;</span>
<span class="gutterH">  10:</span>  <span class="syntax17">&lt;?php</span>
<span class="gutter">  11:</span>    <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span> <span class="syntax8">empty</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">_COOKIE</span><span class="syntax18">[</span><span class="syntax13">'</span><span class="syntax13">usr</span><span class="syntax13">'</span><span class="syntax18">]</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">  12:</span>      <span class="syntax10">$</span><span class="syntax10">cookie_data</span> <span class="syntax18">=</span> <span class="syntax10">$</span><span class="syntax10">_COOKIE</span><span class="syntax18">[</span><span class="syntax13">'</span><span class="syntax13">usr</span><span class="syntax13">'</span><span class="syntax18">]</span><span class="syntax18">;</span>
<span class="gutter">  13:</span>      <span class="syntax10">$</span><span class="syntax10">cookie_data</span> <span class="syntax18">=</span> <span class="syntax9">stripslashes</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">cookie_data</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  14:</span>      <span class="syntax10">$</span><span class="syntax10">cookie_data</span> <span class="syntax18">=</span> <span class="syntax9">unserialize</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">cookie_data</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">  15:</span>      <span class="syntax8">echo</span> <span class="syntax13">'</span><span class="syntax13">What\'s</span><span class="syntax13"> </span><span class="syntax13">in</span><span class="syntax13"> </span><span class="syntax13">the</span><span class="syntax13"> </span><span class="syntax13">cookie</span><span class="syntax13"> </span><span class="syntax13">array?&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;&lt;pre&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  16:</span>      <span class="syntax9">print_r</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">_COOKIE</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  17:</span>      <span class="syntax8">echo</span> <span class="syntax13">'</span><span class="syntax13">&lt;/pre&gt;Unserialized</span><span class="syntax13"> </span><span class="syntax13">\'usr\'</span><span class="syntax13"> </span><span class="syntax13">data:&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;&lt;pre&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  18:</span>      <span class="syntax9">print_r</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">cookie_data</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  19:</span>      <span class="syntax8">echo</span> <span class="syntax13">'</span><span class="syntax13">&lt;/pre&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutterH">  20:</span>    <span class="syntax18">}</span>
<span class="gutter">  21:</span>  <span class="syntax17">?&gt;</span>
<span class="gutter">  22:</span>  <span class="syntax17">&lt;/font</span><span class="syntax17">&gt;</span>
<span class="gutter">  23:</span> <span class="syntax17">&lt;/body</span><span class="syntax17">&gt;</span>
<span class="gutter">  24:</span><span class="syntax17">&lt;/html</span><span class="syntax17">&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
The array $info is assigned a list of values on line 2.
The <b>setcookie()</b> function is given the name of the cookie followed by
the value on line 3.
</p><p>
The value is an array that is serialized into one string. The new string will be
in a format that is acceptable for any type of storage. It represents the data
type and number of characters in the original array.
</p><p>
By serializing the array into one string, we only need to call setcookie() once.
</p><p>
Line 11 checks to see if the cookie has any value, that is, if it was set.
</p><p>
The cookie data is retrieved for the cookie named 'usr' and assigned to $cookie_data.
It is a serialized string.
</p><p>
The slashes are stripped from the string. If the <b>magic_quotes_gpc</b> directive
is on and you do not remove the backslashes, the <b>unserialize()</b> function
on the next line would fail.
</p><p>
The unserialize() function on line 14 returns the original array.
</p><p>
You can see the serialized array in the value of the cookie printed with print_r()
on line 16.
The unserialized array is printed on line 18. We now have the original values back.
</p></li>
<li><p>
Tracking Visitors with Cookies
</p><p>
The following examples demonstrate the use of cookies for tracking vistitor
activities, such as when the visitor last viewed the page and how many times
he or she has been there, but they can also be used to check user preferences,
user IDs, and so on.
</p><p>
Cookies are useful for retaining small amounts of information, but not all
browsers support cookies and if they are supported, a user can turn them off.
</p><p>
To overcome these problems, a better solution is to use PHP sessions (discussed
later in this unit).
</p></li>
<li><p>
Visitor Count Example
</p><p>
The following example uses a cookie to count the number of times the user has
visited this page.
</p><p>
Once the cookie is set, its value will be increased by 1 each time the visitor
comes back to the page.
</p>
<h4>
Filename: counter.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">Accessing</span><span class="syntax2"> </span><span class="syntax2">the</span><span class="syntax2"> </span><span class="syntax2">cookie</span><span class="syntax2"> </span><span class="syntax2">value</span>
<span class="gutter">   3:</span>  <span class="syntax10">$</span><span class="syntax10">count</span> <span class="syntax18">=</span> <span class="syntax10">$</span><span class="syntax10">_COOKIE</span><span class="syntax18">[</span><span class="syntax13">'</span><span class="syntax13">visits</span><span class="syntax13">'</span><span class="syntax18">]</span><span class="syntax18">;</span> 
<span class="gutter">   4:</span>  <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax10">$</span><span class="syntax10">count</span> <span class="syntax18">=</span><span class="syntax18">=</span> <span class="syntax13">'</span><span class="syntax13">'</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutterH">   5:</span>    <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">Initialize</span><span class="syntax2"> </span><span class="syntax2">the</span><span class="syntax2"> </span><span class="syntax2">counter</span>
<span class="gutter">   6:</span>    <span class="syntax10">$</span><span class="syntax10">count</span> <span class="syntax18">=</span> <span class="syntax5">1</span><span class="syntax18">;</span> 
<span class="gutter">   7:</span>  <span class="syntax18">}</span>
<span class="gutter">   8:</span>  <span class="syntax8">else</span> <span class="syntax18">{</span>
<span class="gutter">   9:</span>    <span class="syntax10">$</span><span class="syntax10">count</span><span class="syntax18">+</span><span class="syntax18">+</span><span class="syntax18">;</span>
<span class="gutterH">  10:</span>  <span class="syntax18">}</span>
<span class="gutter">  11:</span>  <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">&quot;visits&quot;</span><span class="syntax2"> </span><span class="syntax2">is</span><span class="syntax2"> </span><span class="syntax2">the</span><span class="syntax2"> </span><span class="syntax2">cookie</span><span class="syntax2"> </span><span class="syntax2">name</span>
<span class="gutter">  12:</span>  <span class="syntax9">setcookie</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">visits</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">count</span><span class="syntax18">)</span><span class="syntax18">;</span> 
<span class="gutter">  13:</span><span class="syntax17">?&gt;</span>
<span class="gutter">  14:</span><span class="syntax17">&lt;html</span><span class="syntax17">&gt;</span>
<span class="gutterH">  15:</span> <span class="syntax17">&lt;head</span><span class="syntax17">&gt;</span>
<span class="gutter">  16:</span>  <span class="syntax17">&lt;title</span><span class="syntax17">&gt;</span>Setting a Counter in a Cookie<span class="syntax17">&lt;/title</span><span class="syntax17">&gt;</span>
<span class="gutter">  17:</span> <span class="syntax17">&lt;/head</span><span class="syntax17">&gt;</span>
<span class="gutter">  18:</span> <span class="syntax17">&lt;body</span><span class="syntax17"> </span><span class="syntax17">bgcolor</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">lavender</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">  19:</span>  <span class="syntax17">&lt;font</span><span class="syntax17"> </span><span class="syntax17">size</span><span class="syntax18">=</span><span class="syntax17">+</span><span class="syntax17">1</span><span class="syntax17"> </span><span class="syntax17">face</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">arial</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutterH">  20:</span>  <span class="syntax17">&lt;h2</span><span class="syntax17">&gt;</span>Visitor Count with Cookies<span class="syntax17">&lt;/h2</span><span class="syntax17">&gt;</span>
<span class="gutter">  21:</span>  You are visitor number <span class="syntax17">&lt;?php</span> <span class="syntax8">echo</span> <span class="syntax10">$</span><span class="syntax10">count</span><span class="syntax18">;</span> <span class="syntax17">?&gt;</span>.<span class="syntax17">&lt;br</span><span class="syntax17"> </span><span class="syntax17">/</span><span class="syntax17">&gt;</span>
<span class="gutter">  22:</span>  <span class="syntax17">&lt;/font</span><span class="syntax17">&gt;</span>
<span class="gutter">  23:</span> <span class="syntax17">&lt;/body</span><span class="syntax17">&gt;</span>
<span class="gutter">  24:</span><span class="syntax17">&lt;/html</span><span class="syntax17">&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
The value stored in the $_COOKIE array is extracted and assigned to $count.
The value is just an integer that continues to be incremented by 1 each time
the user reloads the page.
</p><p>
If this is the first time the page has been loaded, the $_COOKIE array will be
empty. So $count will be empty, and it will be set to 1 on line 6.
</p><p>
For each subsequent visit to this page, the value of the counter will be
increased by 1.
</p><p>
The setcookie() function sets the cookie when the page is first loaded.
The name of the cookie is "visits" and the value stored there will be
incremented by 1 each time the page is revisited.
</p><p>
The cookie is stored in the user's browser and will be deleted when the browser
is exited. What is important to note here is that the cookie is sent in a header,
and headers must be sent before any other output from this page.
The HTML output is placed after this line or PHP will send warnings to the screen.
</p></li>
<li><p>
Tracking the Visitor's Last Visit
</p><p>
The following example keeps track of when a visitor last viewed the page.
The cookie will store the current date, which will be retrieved the next time
the page is refreshed.
</p>
<h4>
Filename: tracking.html - The HTML page
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;</span><span class="syntax17">html</span><span class="syntax17">&gt;</span>
<span class="gutter">   2:</span> <span class="syntax17">&lt;</span><span class="syntax17">head</span><span class="syntax17">&gt;</span><span class="syntax17">&lt;</span><span class="syntax17">title</span><span class="syntax17">&gt;</span>Tracking Cookies<span class="syntax17">&lt;</span><span class="syntax17">/</span><span class="syntax17">title</span><span class="syntax17">&gt;</span><span class="syntax17">&lt;</span><span class="syntax17">/</span><span class="syntax17">head</span><span class="syntax17">&gt;</span>
<span class="gutter">   3:</span> <span class="syntax17">&lt;</span><span class="syntax17">body</span><span class="syntax17"> </span><span class="syntax17">bgcolor</span><span class="syntax18">=</span><span class="syntax13">&quot;</span><span class="syntax13">lavender</span><span class="syntax13">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">   4:</span>  <span class="syntax17">&lt;</span><span class="syntax17">font</span><span class="syntax17"> </span><span class="syntax17">size</span><span class="syntax18">=</span><span class="syntax17">+</span><span class="syntax17">1</span><span class="syntax17"> </span><span class="syntax17">face</span><span class="syntax18">=</span><span class="syntax13">&quot;</span><span class="syntax13">arial</span><span class="syntax13">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutterH">   5:</span>  <span class="syntax17">&lt;</span><span class="syntax17">h2</span><span class="syntax17">&gt;</span>Tracking Visitors with Cookies<span class="syntax17">&lt;</span><span class="syntax17">/</span><span class="syntax17">h2</span><span class="syntax17">&gt;</span>
<span class="gutter">   6:</span>  <span class="syntax17">&lt;</span><span class="syntax17">H1</span><span class="syntax17">&gt;</span>Welcome to our Site!<span class="syntax17">&lt;</span><span class="syntax17">/</span><span class="syntax17">H1</span><span class="syntax17">&gt;</span>
<span class="gutter">   7:</span>  <span class="syntax17">&lt;</span><span class="syntax17">p</span><span class="syntax17">&gt;</span>
<span class="gutter">   8:</span>  Check out our product line
<span class="gutter">   9:</span>  <span class="syntax17">&lt;</span><span class="syntax17">a</span><span class="syntax17"> </span><span class="syntax17">href</span><span class="syntax18">=</span><span class="syntax13">&quot;</span><span class="syntax13">tracking.php</span><span class="syntax13">&quot;</span><span class="syntax17">&gt;</span>Click here<span class="syntax17">&lt;</span><span class="syntax17">/</span><span class="syntax17">a</span><span class="syntax17">&gt;</span>
<span class="gutterH">  10:</span>  <span class="syntax17">&lt;</span><span class="syntax17">/</span><span class="syntax17">font</span><span class="syntax17">&gt;</span>
<span class="gutter">  11:</span> <span class="syntax17">&lt;</span><span class="syntax17">/</span><span class="syntax17">body</span><span class="syntax17">&gt;</span>
<span class="gutter">  12:</span><span class="syntax17">&lt;</span><span class="syntax17">/</span><span class="syntax17">html</span><span class="syntax17">&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<h4>
Filename: tracking.php - The PHP Script
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">Filename:</span><span class="syntax2"> </span><span class="syntax2">&quot;tracking.php&quot;</span>
<span class="gutter">   3:</span>  <span class="syntax10">$</span><span class="syntax10">date_str</span> <span class="syntax18">=</span> <span class="syntax13">'</span><span class="syntax13">l</span><span class="syntax13"> </span><span class="syntax13">dS</span><span class="syntax13"> </span><span class="syntax13">\of</span><span class="syntax13"> </span><span class="syntax13">F</span><span class="syntax13"> </span><span class="syntax13">Y</span><span class="syntax13"> </span><span class="syntax13">h:i:s</span><span class="syntax13"> </span><span class="syntax13">A</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">   4:</span>  <span class="syntax10">$</span><span class="syntax10">last_visit</span> <span class="syntax18">=</span> <span class="syntax13">'</span><span class="syntax13">Your</span><span class="syntax13"> </span><span class="syntax13">last</span><span class="syntax13"> </span><span class="syntax13">visit</span><span class="syntax13"> </span><span class="syntax13">was</span><span class="syntax13"> </span><span class="syntax13">on</span><span class="syntax13"> </span><span class="syntax13">'</span><span class="syntax18">.</span> <span class="syntax9">date</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">date_str</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">   5:</span>  <span class="syntax9">setcookie</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">message</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">last_visit</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span><span class="syntax17">?&gt;</span>
<span class="gutter">   7:</span><span class="syntax17">&lt;html</span><span class="syntax17">&gt;</span>
<span class="gutter">   8:</span> <span class="syntax17">&lt;head</span><span class="syntax17">&gt;</span><span class="syntax17">&lt;title</span><span class="syntax17">&gt;</span>Products<span class="syntax17">&lt;/title</span><span class="syntax17">&gt;</span><span class="syntax17">&lt;/head</span><span class="syntax17">&gt;</span>
<span class="gutter">   9:</span> <span class="syntax17">&lt;body</span><span class="syntax17"> </span><span class="syntax17">bgcolor</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">lavender</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutterH">  10:</span>  <span class="syntax17">&lt;font</span><span class="syntax17"> </span><span class="syntax17">face</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">verdana</span><span class="syntax14">&quot;</span><span class="syntax17"> </span><span class="syntax17">size</span><span class="syntax18">=</span><span class="syntax13">'</span><span class="syntax13">+</span><span class="syntax13">1</span><span class="syntax13">'</span><span class="syntax17">&gt;</span>
<span class="gutter">  11:</span>  <span class="syntax17">&lt;h2</span><span class="syntax17">&gt;</span>Products Page<span class="syntax17">&lt;/h2</span><span class="syntax17">&gt;</span>
<span class="gutter">  12:</span>  <span class="syntax1">&lt;!--</span><span class="syntax1"> </span><span class="syntax1">Rest</span><span class="syntax1"> </span><span class="syntax1">of</span><span class="syntax1"> </span><span class="syntax1">page</span><span class="syntax1"> </span><span class="syntax1">goes</span><span class="syntax1"> </span><span class="syntax1">here</span><span class="syntax1"> </span><span class="syntax1">--&gt;</span>
<span class="gutter">  13:</span>  <span class="syntax17">&lt;?php</span>
<span class="gutter">  14:</span>    <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">Has</span><span class="syntax2"> </span><span class="syntax2">the</span><span class="syntax2"> </span><span class="syntax2">cookie</span><span class="syntax2"> </span><span class="syntax2">been</span><span class="syntax2"> </span><span class="syntax2">set?</span>
<span class="gutterH">  15:</span>    <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span> <span class="syntax8">empty</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">_COOKIE</span><span class="syntax18">[</span><span class="syntax13">'</span><span class="syntax13">message</span><span class="syntax13">'</span><span class="syntax18">]</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span> 
<span class="gutter">  16:</span>      <span class="syntax10">$</span><span class="syntax10">when</span> <span class="syntax18">=</span> <span class="syntax10">$</span><span class="syntax10">_COOKIE</span><span class="syntax18">[</span><span class="syntax13">'</span><span class="syntax13">message</span><span class="syntax13">'</span><span class="syntax18">]</span><span class="syntax18">;</span>
<span class="gutter">  17:</span>      <span class="syntax8">echo</span> <span class="syntax10">$</span><span class="syntax10">when</span> <span class="syntax18">.</span><span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  18:</span>    <span class="syntax18">}</span>
<span class="gutter">  19:</span>  <span class="syntax17">?&gt;</span>
<span class="gutterH">  20:</span>  <span class="syntax17">&lt;/font</span><span class="syntax17">&gt;</span>
<span class="gutter">  21:</span> <span class="syntax17">&lt;/body</span><span class="syntax17">&gt;</span>
<span class="gutter">  22:</span><span class="syntax17">&lt;/html</span><span class="syntax17">&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
When the user clicks on the link in this HTML form, he or she will be directed
to the page that contains the code for setting a cookie.
</p><p>
After clicking the link on the HTML page, the user is directed to the PHP page,
or "Products Page".
</p><p>
The variable $date_str is assigned a string of arguments that will be sent to the
PHP date() function on the next line, to return the current date and time on the
server. (Keep in mind that the date on the browser and server might not be in sync.)
</p><p>
The cookie is set with the setcookie() function. The first argument "message"
is the name of the cookie and the second argument $last_visit is the value that
will be stored in the cookie.
</p><p>
The first time this page is accessed the cookie is set. Its value will not be
available until the next time the page is viewed.
</p><p>
If the cookie has a value (i.e., is not empty), the message will contain the date
string that was assigned to the cookie by the setcookie() function in the previous
viewing of the page.
</p><p>
The value of the cookie is extracted into the variable $when on line 16. It is
the date string that was assigned to the cookie the last time the visitor viewed
this page.
</p><p>
Every time the visitor refreshes this page, the value of the cookie will be the
cookie value that was set on his or her last visit, that is, the date and time
of the last visit.
</p></li>
<li><p>
Extending the Life of a Cookie
</p><p>
How long will a cookie stay in the cookie jar? Normally a cookie expires when
the browser exits. However, the cookie's life span can be controlled by setting
the expiration date in the cookie's expire attribute, the third argument in
PHP's setcookie() function.
</p><p>
The time the cookie expires is represented as a UNIX timestamp; that is, the
number of seconds since January 1, 1970, 00:00:00 GMT, known as the epoch.
</p><p>
The time() function will give you the current time in seconds, and by adding
additional seconds, you can set the expiration date of a cookie to some time
in the future.
</p><p>
By subtracting from this value, the time will be past time, which will cause
the cookie to be deleted. The time returned is expressed in GMT time,
the required format for the expire attribute.
</p><p>
To get the time, two PHP functions are provided: <b>time()</b> and <b>mktime()</b> .
</p></li>
<li><p>
The time() Function
</p><p>
The <b>time()</b> function returns the current time in UNIX time format (UNIX timestamp).
</p><p>
By adding the number of seconds to the output of the time() function, you can
set the amount of time from now until some future time when the cookie is to expire.
</p><p>
Table: Units of Time in Seconds
</p>
<blockquote>
<table>
<tr>
<td><code><b><u>
Unit of Time</u></b>&nbsp;</code></td>
<td><code><b><u>
Seconds</u></b></code></td>
</tr><tr>
<td><code>
Minute</code></td>
<td><code>
60</code></td>
</tr><tr>
<td><code>
Hour</code></td>
<td><code>
60 * 60</code></td>
</tr><tr>
<td><code>
Day</code></td>
<td><code>
60 * 60 * 24</code></td>
</tr><tr>
<td><code>
Week</code></td>
<td><code>
60 * 60 * 24 * 7</code></td>
</tr><tr>
<td><code>
Month</code></td>
<td><code>
60 * 60 * 24 * 30</code></td>
</tr>
</table>
</blockquote>
<p>
Format:
</p>
<blockquote><code><small>
int time ( void )<br>
</small></code></blockquote>
<p>
Example:
</p>
<blockquote><code><small><pre>
$nextWeek = time() + (60 * 60 * 24 * 7);
            (60  seconds * 60 minutes * 24 hours * 7 days)
</pre></small></code></blockquote>
<h4>
Filename: settime.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">date_str</span> <span class="syntax18">=</span> <span class="syntax13">'</span><span class="syntax13">l</span><span class="syntax13"> </span><span class="syntax13">dS</span><span class="syntax13"> </span><span class="syntax13">\of</span><span class="syntax13"> </span><span class="syntax13">F</span><span class="syntax13"> </span><span class="syntax13">Y</span><span class="syntax13"> </span><span class="syntax13">h:i:s</span><span class="syntax13"> </span><span class="syntax13">A</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax10">$</span><span class="syntax10">last_visit</span> <span class="syntax18">=</span> <span class="syntax13">'</span><span class="syntax13">Your</span><span class="syntax13"> </span><span class="syntax13">last</span><span class="syntax13"> </span><span class="syntax13">visit</span><span class="syntax13"> </span><span class="syntax13">was</span><span class="syntax13"> </span><span class="syntax13">on</span><span class="syntax13"> </span><span class="syntax13">'</span><span class="syntax18">.</span> <span class="syntax9">date</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">date_str</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   4:</span>  <span class="syntax10">$</span><span class="syntax10">expire</span> <span class="syntax18">=</span> <span class="syntax5">60</span><span class="syntax18">*</span><span class="syntax5">60</span><span class="syntax18">*</span><span class="syntax5">24</span><span class="syntax18">*</span><span class="syntax5">30</span> <span class="syntax18">+</span> <span class="syntax9">time</span><span class="syntax18">(</span><span class="syntax18">)</span><span class="syntax18">;</span> <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">Add</span><span class="syntax2"> </span><span class="syntax2">one</span><span class="syntax2"> </span><span class="syntax2">month</span>
<span class="gutterH">   5:</span>  <span class="syntax9">setcookie</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">message</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">last_visit</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">expire</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span>  <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">Now</span><span class="syntax2"> </span><span class="syntax2">check</span><span class="syntax2"> </span><span class="syntax2">cookie</span><span class="syntax2"> </span><span class="syntax2">set</span><span class="syntax2"> </span><span class="syntax2">at</span><span class="syntax2"> </span><span class="syntax2">last</span><span class="syntax2"> </span><span class="syntax2">visit</span>
<span class="gutter">   7:</span>  <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span> <span class="syntax8">empty</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">_COOKIE</span><span class="syntax18">[</span><span class="syntax13">'</span><span class="syntax13">message</span><span class="syntax13">'</span><span class="syntax18">]</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span> 
<span class="gutter">   8:</span>    <span class="syntax10">$</span><span class="syntax10">when</span> <span class="syntax18">=</span> <span class="syntax10">$</span><span class="syntax10">_COOKIE</span><span class="syntax18">[</span><span class="syntax13">'</span><span class="syntax13">message</span><span class="syntax13">'</span><span class="syntax18">]</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>    <span class="syntax8">echo</span> <span class="syntax10">$</span><span class="syntax10">when</span> <span class="syntax18">.</span><span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutterH">  10:</span>  <span class="syntax18">}</span>
<span class="gutter">  11:</span><span class="syntax17">?&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
The variable $expire is assigned the value of one month, 30 days, from now in
milliseconds.
</p><p>
The setcookie() function creates a cookie named "message", it contains the date
of the last visit, and it will expire in one month.
</p><p>
The expire value is calculated by adding the number of seconds in a month to
the current time returned by time().
After one month, if the visitor returns, the cookie will be reset.
</p></li>
<li><p>
The mktime() Function
</p><p>
The <b>mktime()</b> function will also get the UNIX time. It has a different
format. Arguments can be set to 0 (zero) from left to right if you want to use
the default values.
</p><p>
However, you can leave out arguments on the right side to get the defaults.
(The year is either two or four digits.)
</p><p>
Format:
</p>
<code><small><pre>
int mktime ( [int hour [, int minute [, int second [, int month [,
             int day [, int year [, int is_dst]]]]]]] )
</pre></small></code>
<p>
Example:
</p>
<code><small>
// Last day of May<br>
$lastday = mktime(0, 0, 0, 6, 0, 2008);<br>
// "Jan-01-2009"<br>
echo date("M-d-Y", mktime(0, 0, 0, 1, 1, 2009));<br>
</small></code>
</li>
<li><p>
Buffering and HTTP Headers
</p><p>
Because cookies are sent in an HTTP header, you cannot execute any other output
before sending the header or you will get a PHP warning.
</p><p>
In the following example, the fact that there is a blank line at the top of the
file caused the warning. The cookie headers must be set first unless you turn
on buffering.
</p>
<h4>
Filename: warning.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span>                         &lt;--this blank line causes a warning !!!
<span class="gutter">   2:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   3:</span>  <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">Headers</span><span class="syntax2"> </span><span class="syntax2">must</span><span class="syntax2"> </span><span class="syntax2">be</span><span class="syntax2"> </span><span class="syntax2">sent</span><span class="syntax2"> </span><span class="syntax2">first</span>
<span class="gutter">   4:</span>  <span class="syntax9">setcookie</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">usr</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">Ellie</span><span class="syntax13"> </span><span class="syntax13">Quigley</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span> 
<span class="gutterH">   5:</span>  <span class="syntax9">setcookie</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">color</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">blue</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span><span class="syntax17">?&gt;</span>
<span class="gutter">   7:</span><span class="syntax17">&lt;html</span><span class="syntax17">&gt;</span>
<span class="gutter">   8:</span> <span class="syntax17">&lt;head</span><span class="syntax17">&gt;</span>
<span class="gutter">   9:</span>  <span class="syntax17">&lt;title</span><span class="syntax17">&gt;</span>Headers already sent?<span class="syntax17">&lt;/title</span><span class="syntax17">&gt;</span>
<span class="gutterH">  10:</span> <span class="syntax17">&lt;/head</span><span class="syntax17">&gt;</span>
<span class="gutter">  11:</span> <span class="syntax17">&lt;body</span><span class="syntax17"> </span><span class="syntax17">bgcolor</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">lavender</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">  12:</span> &lt; Code continues here &gt;
<span class="gutter">  13:</span> <span class="syntax17">&lt;/body</span><span class="syntax17">&gt;</span>
<span class="gutter">  14:</span><span class="syntax17">&lt;/html</span><span class="syntax17">&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
The header information must be sent first, or a warning is issued. Even a blank
line will cause a warning.
</p><p>
If you need to precede any HTTP headers (not just cookie headers) with other
output, PHP provides a set of buffering functions that allow you to save all
the script's output in a buffer until the script ends (starting with PHP 4.0).
</p><p>
When the script ends, first the HTTP headers, and then the contents of the output
buffer, are sent to the browser.
</p><p>
The functions that help you control output buffering are shown in the table that
follows.
</p><p>
Table: Buffering Functions
</p>
<table>
<tr>
<td><code><b><u>
Function</u></b></code></td>
<td><code><b><u>
What It Does</u></b></code></td>
</tr><tr>
<td><code>
ob_start()</code></td>
<td><code>
Enables output buffering. No output is sent from the script (other than headers).
It is saved in an internal buffer.</code></td>
</tr><tr>
<td><code>
ob_end_flush()</code></td>
<td><code>
Flushes the output buffer, and disables output buffering.</code></td>
</tr><tr>
<td><code>
ob_end_clean()</code></td>
<td><code>
Cleans the output buffer without sending it, and disables output buffering.</code></td>
</tr><tr>
<td><code>
ob_get_clean()</code></td>
<td><code>
Returns the contents of the output buffer and ends output buffering</code></td>
</tr><tr>
<td><code>
ob_get_length()</code></td>
<td><code>
Returns the length of the output buffer.</code></td>
</tr><tr>
<td><code>
ob_get_contents()&nbsp;</code></td>
<td><code>
Returns the current output buffer as a string. This allows you to process
whatever output the script emitted.</code></td>
</tr><tr>
<td><code>
ob_gzhandler()</code></td>
<td><code>
A callback function for ob_start(). Useful for sending compressed data.</code></td>
</tr>
</table>
</li>
<li><p>
The ob_start() and ob_end_flush() Functions
</p><p>
The <b>ob_start()</b> function enables output buffering and the <b>ob_end_flush()</b>
function flushes out the buffers and then turns buffering off.
</p><p>
When your script ends, PHP will automatically flush the buffers, so you can
omit ob_end_flush(). It is possible to call ob_start() multiple times; and if so,
you would have to call ob_end_flush() for each level.
</p><p>
Format:
</p>
<code><small><pre>
bool ob_start ( [callback output_callback [, int chunk_size [,
                bool erase]]] )
bool ob_end_flush ( void )
</pre></small></code>
<p>
Example:
</p>
<blockquote><code><small>
ob_start();<br>
ob_end_flush();<br>
</small></code></blockquote>
<h4>
Filename: buffering.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">Turn</span><span class="syntax2"> </span><span class="syntax2">on</span><span class="syntax2"> </span><span class="syntax2">output</span><span class="syntax2"> </span><span class="syntax2">buffering</span>
<span class="gutter">   3:</span>  <span class="syntax9">ob_start</span><span class="syntax18">(</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   4:</span><span class="syntax17">?&gt;</span>
<span class="gutterH">   5:</span><span class="syntax17">&lt;html</span><span class="syntax17">&gt;</span>
<span class="gutter">   6:</span> <span class="syntax17">&lt;head</span><span class="syntax17">&gt;</span>
<span class="gutter">   7:</span>  <span class="syntax17">&lt;title</span><span class="syntax17">&gt;</span>Buffering Output Before Headers<span class="syntax17">&lt;/title</span><span class="syntax17">&gt;</span>
<span class="gutter">   8:</span> <span class="syntax17">&lt;/head</span><span class="syntax17">&gt;</span>
<span class="gutter">   9:</span> <span class="syntax17">&lt;body</span><span class="syntax17"> </span><span class="syntax17">bgcolor</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">lavender</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutterH">  10:</span>  <span class="syntax17">&lt;font</span><span class="syntax17"> </span><span class="syntax17">face</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">verdana</span><span class="syntax14">&quot;</span><span class="syntax17"> </span><span class="syntax17">size</span><span class="syntax18">=</span><span class="syntax13">'</span><span class="syntax13">+</span><span class="syntax13">1</span><span class="syntax13">'</span><span class="syntax17">&gt;</span>
<span class="gutter">  11:</span>  <span class="syntax17">&lt;h2</span><span class="syntax17">&gt;</span>Buffering Output Before Headers<span class="syntax17">&lt;/h2</span><span class="syntax17">&gt;</span>
<span class="gutter">  12:</span>  <span class="syntax17">&lt;?php</span>
<span class="gutter">  13:</span>    <span class="syntax9">setcookie</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">usr</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">Ellie</span><span class="syntax13"> </span><span class="syntax13">Quigley</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  14:</span>    <span class="syntax9">setcookie</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">color</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">blue</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">  15:</span>
<span class="gutter">  16:</span>    <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span> <span class="syntax8">empty</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">_COOKIE</span><span class="syntax18">[</span><span class="syntax13">'</span><span class="syntax13">color</span><span class="syntax13">'</span><span class="syntax18">]</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">  17:</span>      <span class="syntax8">echo</span> <span class="syntax13">'</span><span class="syntax13">&lt;pre&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  18:</span>      <span class="syntax9">print_r</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">_COOKIE</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  19:</span>      <span class="syntax8">echo</span> <span class="syntax13">'</span><span class="syntax13">&lt;/pre&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutterH">  20:</span>    <span class="syntax18">}</span>
<span class="gutter">  21:</span>  <span class="syntax17">?&gt;</span>
<span class="gutter">  22:</span>  <span class="syntax17">&lt;/font</span><span class="syntax17">&gt;</span>
<span class="gutter">  23:</span> <span class="syntax17">&lt;/body</span><span class="syntax17">&gt;</span>
<span class="gutter">  24:</span><span class="syntax17">&lt;/html</span><span class="syntax17">&gt;</span>
<span class="gutterH">  25:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">  26:</span>  <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">Flush</span><span class="syntax2"> </span><span class="syntax2">the</span><span class="syntax2"> </span><span class="syntax2">buffer</span><span class="syntax2"> </span><span class="syntax2">and</span><span class="syntax2"> </span><span class="syntax2">end</span><span class="syntax2"> </span><span class="syntax2">output</span><span class="syntax2"> </span><span class="syntax2">buffering</span>
<span class="gutter">  27:</span>  <span class="syntax9">ob_end_flush</span><span class="syntax18">(</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  28:</span><span class="syntax17">?&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
The <b>ob_start()</b> function turns on output buffering. Now only HTTP headers
will be sent and the rest of the program's output will be saved until the program
ends, at which time it will be sent.
</p><p>
The setcookie() function can be placed below the other ouput without causing
warnings. This output will be sent first due to the buffering set up on line 3.
</p><p>
The <b>ob_end_flush()</b> function is not necessary, but is used here to flush
out the buffers and end the output buffering for this session.
</p></li>
<li><p>
Output Buffering and php.ini
</p><p>
If you want buffering set for all your PHP scripts, you can enable the php.ini
directive <b>output_buffering</b> . If you do, every PHP script will behave as
if it begins with a call to ob_start().
</p><p>
From the php.ini file:
</p>
<code><small>
; Output buffering allows you to send header lines (including cookies) even<br>
; after you send body content, at the price of slowing PHP's output layer a<br>
; bit. You can enable output buffering during runtime by calling the output<br>
; buffering functions. You can also enable output buffering for all files by<br>
; setting this directive to On. If you wish to limit the size of the buffer<br>
; to a certain size -you can use a maximum number of bytes instead of 'On', as<br>
; a value for this directive (e.g., output_buffering=4096).<br>
output_buffering = Off<br>
</small></code>
<p>
Output buffering is turned off by default. If you want to turn it on for all
scripts, go to the php.ini initialization file and change the output_buffering
directive to "On".
</p></li>
<li><p>
Deleting a Cookie
</p><p>
When cookies are created, they are, by default, deleted when the user closes
his or her browser.
</p><p>
You have seen how to expand the life of a cookie, but what if you want to delete
the cookie right now, even before the user closes his or her browser?
</p><p>
Instead of adding to the current time, you simply subtract from the current time
to some earlier date. This will cause the cookie to be deleted right away.
</p><p>
Remember, deleting a cookie is the responsibility of the browser and the time
settings there might be different from the time settings on the server.
</p><p>
Even though technically setting the expiration time to –1 would be an earlier
time, it might be better to set it to a bigger negative number to assure that
it will be removed. Setting the expiration time to 0 has no effect.
</p>
<p>
Example:
</p>
<code><small>
&lt;?php<br>
&nbsp;&nbsp;// Set expire time to one hour ago<br>
&nbsp;&nbsp;setcookie('cookie_name','', time() - 3600);<br>
?&gt;<br>
</small></code>
<p>
Because we are destroying the cookie, there is no point in giving it a value,
thus the second argument is intentionally left empty.
</p></li>
<li><p>
Using the Browser to Remove Cookies
</p><p>
Another way to delete cookies is to remove them in your browser.
In Internet Explorer, go to the Tools menu and Internet Options. Then you can
remove all or some cookies from the hard drive.
The Firefox browser manages cookies by going to Tools, Options, Privacy.
</p><p>
Your instructor will demonstrate how to delete cookies in the browser.
</p>
</li>
</ul>
</div>
</body>
</html>
