h2. Exception Handling

bq. In this section, we discuss the concept of exception handling and the way it is implemented in PHP 5. Exceptions are a new and important feature in PHP 5. They provide a unified mechanism for handling errors in an extensible, maintainable, and object-oriented way.

h3.  Exception Handling Concepts

* The basic idea of exception handling is that code is executed inside what is called a try block. That is a section of code that looks like this:
<br /><pre>
try
{
  // code goes here
}
</pre>
* If something goes wrong inside the try block, you can do what is called "throwing an exception". Some languages, such as Java, throw exceptions automatically for you in certain cases. In PHP, exceptions must be thrown manually. You throw an exception as follows:
<br /><pre>
throw new Exception('message', code);
</pre>
* The keyword throw triggers the exception handling mechanism. It is a language construct rather than a function, but you need to pass it a value. It expects to receive an object. In the simplest case, you can instantiate the built-in Exception class, as is done in the example above.
* The constructor for this class takes two parameters: a message and a code. They are intended to represent an error message and an error code number. Both of these parameters are optional.
* Finally, underneath your try block, you need at least one catch block. A catch block looks like this:
<br /><pre>
catch (typehint exception )
{
  // handle exception
}
</pre>
* You can have more than one catch block associated with a single try block. Using more than one would make sense if each catch block is waiting to catch a different type of exception. For example, if you want to catch exceptions of the Exception class, your catch block might look like this:
<br /><pre>
catch (Exception $e)
{
  // handle exception
}
</pre>
* The object passed into (and caught by) the catch block is the one passed to (and thrown by) the throw statement that raised the exception. The exception can be of any type, but it is good form to use either instances of the Exception class or instances of your own user-defined exceptions that inherit from the Exception class.
* When an exception is raised, PHP looks for a matching catch block. If you have more than one catch block, the objects passed in to each should be of different types so that PHP can work out which catch block to fall through to.
* One other point to note is that you can raise further exceptions within a catch block.
* To make this discussion a bit clearer, we will look at an example. A simple exception handling example is shown below.
* Filename: *exception.php*
<br /><PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">Throwing</span><span class="syntax2"> </span><span class="syntax2">and</span><span class="syntax2"> </span><span class="syntax2">Catching</span><span class="syntax2"> </span><span class="syntax2">an</span><span class="syntax2"> </span><span class="syntax2">Exception</span>
<span class="gutter">   3:</span>  <span class="syntax8">try</span>
<span class="gutter">   4:</span>  <span class="syntax18">{</span>
<span class="gutterH">   5:</span>    <span class="syntax8">throw</span> <span class="syntax8">new</span> <span class="syntax8">Exception</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">A</span><span class="syntax13"> </span><span class="syntax13">terrible</span><span class="syntax13"> </span><span class="syntax13">error</span><span class="syntax13"> </span><span class="syntax13">has</span><span class="syntax13"> </span><span class="syntax13">occurred</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax5">42</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span>  <span class="syntax18">}</span>
<span class="gutter">   7:</span>  <span class="syntax8">catch</span><span class="syntax18"> (</span><span class="syntax8">Exception</span> <span class="syntax10">$</span><span class="syntax10">e</span><span class="syntax18">)</span>
<span class="gutter">   8:</span>  <span class="syntax18">{</span>
<span class="gutter">   9:</span>    <span class="syntax8">echo</span> <span class="syntax13">'</span><span class="syntax13">Exception</span><span class="syntax13"> </span><span class="syntax13">'</span><span class="syntax18">.</span> <span class="syntax11">$e</span><span class="syntax6">&#45;&gt;getCode</span><span class="syntax18">(</span><span class="syntax18">)</span><span class="syntax18">.</span> <span class="syntax13">'</span><span class="syntax13">:</span><span class="syntax13"> </span><span class="syntax13">'</span><span class="syntax18">.</span> <span class="syntax11">$e</span><span class="syntax6">&#45;&gt;getMessage</span><span class="syntax18">(</span><span class="syntax18">)</span>
<span class="gutterH">  10:</span>        <span class="syntax18">.</span><span class="syntax13">'</span><span class="syntax13"> </span><span class="syntax13">in</span><span class="syntax13"> </span><span class="syntax13">'</span><span class="syntax18">.</span> <span class="syntax11">$e</span><span class="syntax6">&#45;&gt;getFile</span><span class="syntax18">(</span><span class="syntax18">)</span> <span class="syntax18">.</span><span class="syntax13">'</span><span class="syntax13"> </span><span class="syntax13">on</span><span class="syntax13"> </span><span class="syntax13">line</span><span class="syntax13"> </span><span class="syntax13">'</span><span class="syntax18">.</span> <span class="syntax11">$e</span><span class="syntax6">&#45;&gt;getLine</span><span class="syntax18">(</span><span class="syntax18">)</span> <span class="syntax18">.</span><span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  11:</span>  <span class="syntax18">}</span>
<span class="gutter">  12:</span><span class="syntax17">?&gt;</span>
</span>
</PRE>
* In the listing above, we used a number of methods of the Exception class, which we discuss shortly. The result of running this code is that the catch block reports the exception error message and notes where it occurred.
* In the sample code, you can see that we raise an exception of class Exception. This built-in class has methods you can use in the catch block to report a useful error message.

h3. The Exception Class

* PHP 5 comes with a built-in class called Exception . The constructor takes two parameters, as we discussed previously: an error message and an error code.
* In addition to the constructor, this class comes with the following built-in methods:
** *@getCode()@* - Returns the code as passed to the constructor
** *@getMessage()@* - Returns the message as passed to the constructor
** *@getFile()@* - Returns the full path to the code file where the exception was raised
** *@getLine()@* - Returns the line number in the code file where the exception was raised
** *@getTrace()@* - Returns an array containing a backtrace where the exception was raised
** *@getTraceAsString()@* - Returns the same information as getTrace , formatted as a string
** *@__toString()@* - Allows you to simply echo an Exception object, giving all the information from the above methods
* We used the first four of these methods in the basic exception.php example above. You could obtain the same information (plus the backtrace) by executing:
<br /><pre>
echo $e;
</pre>
* A "backtrace" shows which functions were executing at the time the exception was raised.

h3. User-Defined Exceptions

* Instead of instantiating and passing an instance of the base Exception class, you can pass any other object you like. In most cases, you will extend the Exception class to create your own exception classes.
* You can pass any other object with your throw clause. You may occasionally want to do this if you are having problems with one particular object and want to pass it through for debugging purposes.
* Most of the time, however, you will extend the base Exception class. The PHP manual provides code that shows the skeleton of the Exception class. This code, taken from http://www.php.net/zend-engine-2.php , is reproduced in the listing exception.inc. Note that this is not the actual code but represents what you can expect to inherit.
* The main reason we are looking at this class definition is to note that most of the public methods are final: That means you cannot override them. You can create your own subclass of Exceptions , but you cannot change the behavior of the basic methods. Note that you can override the *@__toString()@* function, so you can change the way the exception is displayed. You can also add your own methods.
* An example of a user-defined Exception class is shown below.
* Filename: *userDefExcept.php*
<br /><PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">An</span><span class="syntax2"> </span><span class="syntax2">Example</span><span class="syntax2"> </span><span class="syntax2">of</span><span class="syntax2"> </span><span class="syntax2">a</span><span class="syntax2"> </span><span class="syntax2">User-Defined</span><span class="syntax2"> </span><span class="syntax2">Exception</span><span class="syntax2"> </span><span class="syntax2">Class</span>
<span class="gutter">   3:</span>  <span class="syntax8">class</span><span class="syntax8"> </span><span class="syntax11">myException</span><span class="syntax11"> </span><span class="syntax8">extends</span><span class="syntax11"> </span><span class="syntax11">Exception</span>
<span class="gutter">   4:</span><span class="syntax11"> </span><span class="syntax11"> </span><span class="syntax18">{</span>
<span class="gutterH">   5:</span>    <span class="syntax8">function</span> <span class="syntax9">&#95;&#95;toString</span><span class="syntax18">(</span><span class="syntax18">)</span>
<span class="gutter">   6:</span>    <span class="syntax18">{</span>
<span class="gutter">   7:</span>      <span class="syntax8">return</span> <span class="syntax13">'</span><span class="syntax13">&lt;table</span><span class="syntax13"> </span><span class="syntax13">border&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Exception</span><span class="syntax13"> </span><span class="syntax13">'</span>
<span class="gutter">   8:</span>            <span class="syntax18">.</span> <span class="syntax11">$this</span><span class="syntax6">&#45;&gt;getCode</span><span class="syntax18">(</span><span class="syntax18">)</span> <span class="syntax18">.</span><span class="syntax13">'</span><span class="syntax13">&lt;/strong&gt;:</span><span class="syntax13"> </span><span class="syntax13">'</span>
<span class="gutter">   9:</span>            <span class="syntax18">.</span> <span class="syntax11">$this</span><span class="syntax6">&#45;&gt;getMessage</span><span class="syntax18">(</span><span class="syntax18">)</span><span class="syntax18">.</span> <span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">.</span><span class="syntax13">'</span><span class="syntax13"> </span><span class="syntax13">in</span><span class="syntax13"> </span><span class="syntax13">'</span>
<span class="gutterH">  10:</span>            <span class="syntax18">.</span> <span class="syntax11">$this</span><span class="syntax6">&#45;&gt;getFile</span><span class="syntax18">(</span><span class="syntax18">)</span><span class="syntax18">.</span> <span class="syntax13">'</span><span class="syntax13"> </span><span class="syntax13">on</span><span class="syntax13"> </span><span class="syntax13">line</span><span class="syntax13"> </span><span class="syntax13">'</span><span class="syntax18">.</span> <span class="syntax11">$this</span><span class="syntax6">&#45;&gt;getLine</span><span class="syntax18">(</span><span class="syntax18">)</span>
<span class="gutter">  11:</span>            <span class="syntax18">.</span> <span class="syntax13">'</span><span class="syntax13">&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  12:</span>    <span class="syntax18">}</span>
<span class="gutter">  13:</span>  <span class="syntax18">}</span>
<span class="gutter">  14:</span>
<span class="gutterH">  15:</span>  <span class="syntax8">try</span>
<span class="gutter">  16:</span>  <span class="syntax18">{</span>
<span class="gutter">  17:</span>    <span class="syntax8">throw</span> <span class="syntax8">new</span> <span class="syntax6">myException</span><span class="syntax18">(</span> <span class="syntax13">'</span><span class="syntax13">A</span><span class="syntax13"> </span><span class="syntax13">terrible</span><span class="syntax13"> </span><span class="syntax13">error</span><span class="syntax13"> </span><span class="syntax13">has</span><span class="syntax13"> </span><span class="syntax13">occurred</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax5">42</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  18:</span>  <span class="syntax18">}</span>
<span class="gutter">  19:</span>  
<span class="gutterH">  20:</span>  <span class="syntax8">catch</span><span class="syntax18"> (</span>myException <span class="syntax10">$</span><span class="syntax10">m</span><span class="syntax18">)</span>
<span class="gutter">  21:</span>  <span class="syntax18">{</span>
<span class="gutter">  22:</span>    <span class="syntax8">echo</span> <span class="syntax10">$</span><span class="syntax10">m</span><span class="syntax18">;</span>
<span class="gutter">  23:</span>  <span class="syntax18">}</span>
<span class="gutter">  24:</span><span class="syntax17">?&gt;</span></span>
</PRE>
* In this code, you declare a new exception class, called myException , that extends the basic Exception class. The difference between this class and the Exception class is that you override the *@__toString()@* method to provide a "pretty" way of printing the exception.
* This example is fairly simple. In the next section, we look at ways to create different exceptions to deal with different categories of error.

h3. Exceptions in Bob's Auto Parts

* Suppose we store order data for Bob's Auto Parts in a flat file. You know that file I/O (in fact, any kind of I/O) is one area in programs where errors often occur. This makes it a good place to apply exception handling.
* Thinking about our experience reading and writing files, we can see that three things are likely to go wrong with writing to the file:
## the file cannot be opened,
## a lock cannot be obtained on the file, or
## the file cannot be written to.

h3.  We created an exception class for each of these possibilities. The code for these exceptions is shown below.

* Filename: *fileExcept.php*
<br /><PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">File</span><span class="syntax2"> </span><span class="syntax2">I/O-Related</span><span class="syntax2"> </span><span class="syntax2">Exceptions</span>
<span class="gutter">   3:</span>  <span class="syntax8">class</span><span class="syntax8"> </span><span class="syntax11">fileOpenException</span><span class="syntax11"> </span><span class="syntax8">extends</span><span class="syntax11"> </span><span class="syntax11">Exception</span>
<span class="gutter">   4:</span><span class="syntax11"> </span><span class="syntax11"> </span><span class="syntax18">{</span>
<span class="gutterH">   5:</span>    <span class="syntax8">function</span> <span class="syntax9">&#95;&#95;toString</span><span class="syntax18">(</span><span class="syntax18">)</span>
<span class="gutter">   6:</span>    <span class="syntax18">{</span>
<span class="gutter">   7:</span>      <span class="syntax8">return</span> <span class="syntax13">'</span><span class="syntax13">fileOpenException</span><span class="syntax13"> </span><span class="syntax13">'</span><span class="syntax18">.</span> <span class="syntax11">$this</span><span class="syntax6">&#45;&gt;getCode</span><span class="syntax18">(</span><span class="syntax18">)</span>
<span class="gutter">   8:</span>            <span class="syntax18">.</span> <span class="syntax13">'</span><span class="syntax13">:</span><span class="syntax13"> </span><span class="syntax13">'</span><span class="syntax18">.</span> <span class="syntax11">$this</span><span class="syntax6">&#45;&gt;getMessage</span><span class="syntax18">(</span><span class="syntax18">)</span><span class="syntax18">.</span> <span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">.</span> <span class="syntax13">'</span><span class="syntax13"> </span><span class="syntax13">in</span><span class="syntax13"> </span><span class="syntax13">'</span>
<span class="gutter">   9:</span>            <span class="syntax18">.</span> <span class="syntax11">$this</span><span class="syntax6">&#45;&gt;getFile</span><span class="syntax18">(</span><span class="syntax18">)</span><span class="syntax18">.</span> <span class="syntax13">'</span><span class="syntax13"> </span><span class="syntax13">on</span><span class="syntax13"> </span><span class="syntax13">line</span><span class="syntax13"> </span><span class="syntax13">'</span><span class="syntax18">.</span> <span class="syntax11">$this</span><span class="syntax6">&#45;&gt;getLine</span><span class="syntax18">(</span><span class="syntax18">)</span>
<span class="gutterH">  10:</span>            <span class="syntax18">.</span> <span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  11:</span>    <span class="syntax18">}</span>
<span class="gutter">  12:</span>  <span class="syntax18">}</span>
<span class="gutter">  13:</span>  <span class="syntax8">class</span><span class="syntax8"> </span><span class="syntax11">fileWriteException</span><span class="syntax11"> </span><span class="syntax8">extends</span><span class="syntax11"> </span><span class="syntax11">Exception</span>
<span class="gutter">  14:</span><span class="syntax11"> </span><span class="syntax11"> </span><span class="syntax18">{</span>
<span class="gutterH">  15:</span>    <span class="syntax8">function</span> <span class="syntax9">&#95;&#95;toString</span><span class="syntax18">(</span><span class="syntax18">)</span>
<span class="gutter">  16:</span>    <span class="syntax18">{</span>
<span class="gutter">  17:</span>      <span class="syntax8">return</span> <span class="syntax13">'</span><span class="syntax13">fileWriteException</span><span class="syntax13"> </span><span class="syntax13">'</span><span class="syntax18">.</span> <span class="syntax11">$this</span><span class="syntax6">&#45;&gt;getCode</span><span class="syntax18">(</span><span class="syntax18">)</span>
<span class="gutter">  18:</span>            <span class="syntax18">.</span> <span class="syntax13">'</span><span class="syntax13">:</span><span class="syntax13"> </span><span class="syntax13">'</span><span class="syntax18">.</span> <span class="syntax11">$this</span><span class="syntax6">&#45;&gt;getMessage</span><span class="syntax18">(</span><span class="syntax18">)</span><span class="syntax18">.</span> <span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">.</span> <span class="syntax13">'</span><span class="syntax13"> </span><span class="syntax13">in</span><span class="syntax13"> </span><span class="syntax13">'</span>
<span class="gutter">  19:</span>            <span class="syntax18">.</span> <span class="syntax11">$this</span><span class="syntax6">&#45;&gt;getFile</span><span class="syntax18">(</span><span class="syntax18">)</span><span class="syntax18">.</span> <span class="syntax13">'</span><span class="syntax13"> </span><span class="syntax13">on</span><span class="syntax13"> </span><span class="syntax13">line</span><span class="syntax13"> </span><span class="syntax13">'</span><span class="syntax18">.</span> <span class="syntax11">$this</span><span class="syntax6">&#45;&gt;getLine</span><span class="syntax18">(</span><span class="syntax18">)</span>
<span class="gutterH">  20:</span>            <span class="syntax18">.</span> <span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  21:</span>    <span class="syntax18">}</span>
<span class="gutter">  22:</span>  <span class="syntax18">}</span>
<span class="gutter">  23:</span>  <span class="syntax8">class</span><span class="syntax8"> </span><span class="syntax11">fileLockException</span><span class="syntax11"> </span><span class="syntax8">extends</span><span class="syntax11"> </span><span class="syntax11">Exception</span>
<span class="gutter">  24:</span><span class="syntax11"> </span><span class="syntax11"> </span><span class="syntax18">{</span>
<span class="gutterH">  25:</span>    <span class="syntax8">function</span> <span class="syntax9">&#95;&#95;toString</span><span class="syntax18">(</span><span class="syntax18">)</span>
<span class="gutter">  26:</span>    <span class="syntax18">{</span>
<span class="gutter">  27:</span>      <span class="syntax8">return</span> <span class="syntax13">'</span><span class="syntax13">fileLockException</span><span class="syntax13"> </span><span class="syntax13">'</span><span class="syntax18">.</span> <span class="syntax11">$this</span><span class="syntax6">&#45;&gt;getCode</span><span class="syntax18">(</span><span class="syntax18">)</span>
<span class="gutter">  28:</span>            <span class="syntax18">.</span> <span class="syntax13">'</span><span class="syntax13">:</span><span class="syntax13"> </span><span class="syntax13">'</span><span class="syntax18">.</span> <span class="syntax11">$this</span><span class="syntax6">&#45;&gt;getMessage</span><span class="syntax18">(</span><span class="syntax18">)</span><span class="syntax18">.</span> <span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">.</span> <span class="syntax13">'</span><span class="syntax13"> </span><span class="syntax13">in</span><span class="syntax13"> </span><span class="syntax13">'</span>
<span class="gutter">  29:</span>            <span class="syntax18">.</span> <span class="syntax11">$this</span><span class="syntax6">&#45;&gt;getFile</span><span class="syntax18">(</span><span class="syntax18">)</span><span class="syntax18">.</span> <span class="syntax13">'</span><span class="syntax13"> </span><span class="syntax13">on</span><span class="syntax13"> </span><span class="syntax13">line</span><span class="syntax13"> </span><span class="syntax13">'</span><span class="syntax18">.</span> <span class="syntax11">$this</span><span class="syntax6">&#45;&gt;getLine</span><span class="syntax18">(</span><span class="syntax18">)</span>
<span class="gutterH">  30:</span>            <span class="syntax18">.</span> <span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  31:</span>    <span class="syntax18">}</span>
<span class="gutter">  32:</span>  <span class="syntax18">}</span>
<span class="gutter">  33:</span><span class="syntax17">?&gt;</span></span>
</PRE>
* These Exception subclasses do not do anything particularly interesting. In fact, for the purpose of this application, you could leave them as empty subclasses or use the provided Exception class. We have, however, provided a *@__toString()@* method for each of the subclasses that explains what type of exception has occurred.
* We wrote a PHP script to process Bob's orders named bobsOrder.php to incorporate the use of exceptions. This file is shown in listing: "bobsOrder.php":.
* You can see that the file I/O section of the script is wrapped in a try block. It is generally considered good coding practice to have small try blocks and catch the relevant exceptions at the end of each. This makes your exception handling code easier to write and maintain because you can see what you are dealing with.
* If you cannot open the file, you throw a fileOpenException ; if you cannot lock the file, you throw a fileLockException ; and if you cannot write to the file, you throw a fileWriteException .
* Look at the catch blocks. To illustrate a point, we have included only two: one to handle the fileOpenException class and one to handle the Exception class. Because the other exceptions inherit from Exception , they will be caught by the second catch block. Catch blocks are matched on the same basis as the instanceof operator. This is a good reason for extending your own exception classes from a single class.
* One important warning: If you raise an exception for which you have not written a matching catch block, PHP will report a fatal error.

h3. Exceptions and PHP's Other Error Handling Mechanisms

* In addition to the exception handling mechanism discussed in this unit, PHP has complex error handling support, which is beyond the scope of this course.
* Note that the process of raising and handling exceptions does not interfere or prevent other error handling mechanisms from operating.
* In the listing above, notice how the call to *@fopen()@* is prefaced with the "@" error suppression operator.
* If the *@fopen()@* call fails, PHP would normally issue a warning that may or may not be displayed or logged depending on the error reporting settings in your php.ini.

h3. Further Reading

Because exception handling is new to PHP, not much has been written on the subject. However, basic information about exception handling is plentiful. Sun has a good tutorial about what exceptions are and why you might want to use them (written from a Java perspective, of course) at:
http://java.sun.com/docs/books/tutorial/essential/exceptions/definition.html

<br />

---

[[Unit Seven => 152-166 Unit Seven Index]]
