
   PHP Web Development with MySQL  3 Credits
152-166



 Using the MySQL Function Library



* Some Useful MySQL Functions
  PHP comes with a number of built-in MySQL functions. In this section we look at some commonly used ones.
  The table below lists some of the MySQL functions you might find useful when integrating PHP and MySQL.
  Table: Some Useful MySQL Functions

  Database_Function                 What_It_Does
  mysql_connect()                   Opens a connection to a MySQL server.
  mysql_pconnect()                  Opens a persistent connection.
  mysql_selectdb()                  Selects the default database.
  mysql_change_user()               Changes the identity of the user logged on.
  mysql_list_dbs                    Lists databases for this MySQL server.
  mysql_list_tables                 Lists tables in the database.
  Query Functions Affecting Rows
  mysql_fetch_assoc()               Returns one result row, as an associative array.
  mysql_fetch_row()                 Returns one result row, as an array.
  mysql_affected_rows()             Returns number of rows affected by query.
  mysql_num_rows()                  Returns number of rows selected.
  mysql_fetch_object()              Returns a result row, as an object.
  Query Functions Affecting Columns
  mysql_fetch_field()               Gets column information from a result and returns as an object.
  mysql_field_name()                Gets the name of the specified field in a result.
  mysql_list_fields()               Sets result pointer to a specified field offset.
  mysql_num_fields()                Gets number of fields in a result.
  mysql_field_seek()                Sets result pointer to a specified field offset.
  mysql_field_type()                Gets the type of the specified field in a result.
  mysql_field_len()                 Returns the length of the specified field.
  mysql_field_table()               Gets name of the table the specified field is in.
  mysql_tablename()                 Gets table name of field.
  Functions for Error Handling
  mysql_errno()                     Returns the numerical value of the error message from previous MySQL operation.
  mysql_error()                     Returns the text of the error message from previous MySQL operation.

* The mysql_error() Function
  The execution of a database function might fail for a variety of reasons. Perhaps the database server is down, or the network connection is unavailable, or simply the username and password used to connect are not authorized to access the database.
  The mysql_error() function returns the text of the error message generated by the MySQL server.
  If there were error messages generated by multiple MySQL calls, this function returns the most common error message.
  Format:

       $error_message mysql_error()

  In the preceding format, $error_message is the text of the error message returned from the database server.

  Filename: dberror.php



            1:<?php
            2:  print 'Opening the connection to the database server<br />';
            3:  @ $db = mysql_connect('localhost','djefferson','dino1234');
            4:  if (!$db) {
            5:    $error_message = mysql_error();
            6:    print 'There was a problem connecting to the MySQL server:<br />';
            7:    exit($error_message);
            8:  }
            9:  print "Connection to MySQL successful<br />";
           10:
           11:  $database = 'Northwind';
           12:  print 'Selecting database '. $database .'<br />';
           13:  $selected = mysql_select_db($database, $db);
           14:  if (!$selected) {
           15:    $error_message = mysql_error($db);
           16:    print 'There was a problem selecting database '
           17:         . $database .':<br />';
           18:    exit($error_message);
           19:  }
           20:  print "Database $database selected successfully<br />";
           21:?>



The user djefferson attempts to connect to the database server. The "@" character is used to suppress printing of a PHP error message immediately upon failure of the mysql_connect() function.
The resource variable $db will be empty if the connection failed, and an error message will be printed, including the output of the mysql_error() function.
The database Northwind is selected. We assume that this database is available and that we have access to it.
We check the value of the $selected variable. It will be empty if connection to the database server failed.
If database selection fails, the mysql_error() function is called. It will return a text message from the database server explaining the problem.
The mysql_num_rows() Function
The mysql_num_rows() function returns the number of rows in the result set.
Format:

     int mysql_num_rows( resource result )

Example:

     $number_of_rows = mysql_num_rows($result_set)

In the preceding example $result_set is what you got back from executing the SELECT query, and $number_of_rows is the number of rows that were retrieved.

Filename: numRows.php



          1:<?php
          2:  @ $db = mysql_connect('localhost','djefferson','dino1234');
          3:  if (!$db) {
          4:    exit('Connection to server failed: '. mysql_error());
          5:  }
          6:  if (! mysql_select_db('Northwind', $db)) {
          7:    exit('Database select error: '. mysql_error($db));
          8:  }
          9:
         10:  print 'Executing SQL...<br /><br />';
         11:  $result = mysql_query('SELECT ShipName FROM Orders', $db);
         12:  if (!$result) {
         13:    exit('Database query error: '. mysql_error($db));
         14:  }
         15:  $num_rows = mysql_num_rows($result);
         16:  print "<b>There are a total of $num_rows ship names "
         17:       .'in the "Orders" table.';
         18:?>


After connecting to the database server and selecting the database, the SELECT statement is executed using the mysql_query() function.
The variable, $result, will contain all the rows selected from the "Orders" table.
The mysql_num_rows() function will return the number of rows in the record set.
The mysql_num_fields() Function
The mysql_num_fields() function returns the number of fields in a table and the mysql_field_name() function returns the name of a field.
Format:

     int mysql_num_fields( resource result )

Example:

     $number_of_fields = mysql_num_fields($result_set)

In the preceding example, the $result_set variable contains the records retrieved with the SELECT query and $number_of_fields contains the total number of columns in that result set.
The mysql_field_name() Function
The mysql_field_name() function returns the name of a specific field.
Format:

     string mysql_field_name( resource result, int field_offset )

Example:

     $field_name = mysql_field_name( $result_set, $index )

In the preceding example, the variable $result_set is the result of executing a SELECT statement, and the variable $index is the index of a specific field in the current result set.

Filename: columnInfo.php



          1:<?php
          2:  @ $db = mysql_connect('localhost','djefferson','dino1234');
          3:  if (!$db) {
          4:    exit('Connection to server failed: '. mysql_error());
          5:  }
          6:  if (! mysql_select_db('Northwind', $db)) {
          7:    exit('Database select error: '. mysql_error($db));
          8:  }
          9:  print 'Executing SQL...<br /><br />';
         10:  $result = mysql_query('SELECT * FROM Customers', $db);
         11:  if (!$result) {
         12:    exit('Database query error: '. mysql_error($db));
         13:  }
         14:
         15:  print "<table>";
         16:  // Print the headers
         17:  for ($c=0; $c < mysql_num_fields($result); $c++) {
         18:    print '<th><u>'. mysql_field_name($result, $c) .'</u></th>';
         19:  }
         20:  // Print all the rows
         21:  while ($record = mysql_fetch_row($result)) {
         22:    print '<tr>';
         23:    for ($c=0; $c < mysql_num_fields($result); $c++) {
         24:      print '<td>'. $record[$c] .'</td>';
         25:    }
         26:    print '</tr>';
         27:  }
         28:  print '</table>';
         29:?>


The "Northwind" database is selected as the default database.
All the records from the "Customers" table are selected. The "*" is a wildcard character for all of the columns, meaning all the fields will be returned.
Because we expect the query to return a lot of data, we use an HTML table to display the output rather than simply printing it to the screen. The HTML <table> tag starts the table.
In the for loop, lines 17-19, we print out the headings for the table using <th> tags. The mysql_num_fields() function returns the number of fields or columns there are in the "customers" table.
The mysql_field_name() function is used to get the name of a particular column in a table. The first argument is the result set. The second one is the index of a particular column or field.
Because we are getting all of the columns with the "SELECT *" clause, the order will correspond to the column order of the table in the database.
The while loop, lines 21-27, processes all the available rows in the result-set. All the column values for each row, will be placed within HTML <tr> tags.
The for loop on lines 23-25 is a nested for loop to process each of the columns for the current row. The HTML <td> tags are used to place each column value in a separate table cell.
Once the inner for loop has finished going through each of the fields in the current row, the loop exits, the HTML </tr> tag ends each table row, and control goes back to the while loop where another row from the database is fetched and then processed.
Finally, the HTML table is ended on line 28. All the data has been retrieved and displayed.
The Guest Book Example
The following section guides you through an example of building a database-driven Web site. We will design a guest book application, where visitors to the Web site can add comments and those comments are visible to others.
Although this is a very simple example, the concepts illustrated here are found in almost all dynamic Web sites.
You will create a Web form asking the user for some data, insert that data into the database, and then create another page to display all the data from the database.
Step 1: Designing the Database
As with most database-driven applications, we start by desiging the database schema. The design process can be a very complex process, but for this example, we design just one simple table to store messages entered by Web site visitors.
The following example provides the SQL CREATE TABLE command to create the "messages" table.


       mysql> create TABLE messages(
           -> id INT NOT NULL AUTO_INCREMENT,
           -> subject VARCHAR(150),
           -> body TEXT,
           -> PRIMARY KEY(id))
           -> ;


The CREATE TABLE statement above creates a database table named "messages".
The first column is named "id". It will be unique identifier for each record in this table.
It is an integer, meaning a whole number, and NOT NULL indicates that this field cannot be null, that is, it must have a value.
To ensure that this number is unique, the AUTO_INCREMENT attribute tells MySQL to increment the "id" field by 1 for each new entry added to the database.
The "subject" column will be variable-length text with a maximum value of 150 characters that is allowed to be NULL and has no default value.
The "body" column will be TEXT of unlimited size. Data type VARCHAR is limited to 255 characters while a TEXT column may contain up to 65,535 characters.
The "id" field is defined as the PRIMARY KEY of the messages table.
The table has been defined and created. The SQL DESCRIBE command will show you if the table has been created successfully.
If the table is not as you intended, you can drop the table with the statement:

     DROP TABLE messages;

and define it again. Note: The DROP TABLE command will delete the entire table and all its data!

  mysql> describe messages;
  +---------+--------------+------+-----+---------+----------------+
  | Field   | Type         | Null | Key | Default | Extra          |
  +---------+--------------+------+-----+---------+----------------+
  | id      | int(11)      | NO   | PRI | NULL    | auto_increment |
  | subject | varchar(150) | YES  |     | NULL    |                |
  | body    | text         | YES  |     | NULL    |                |
  +---------+--------------+------+-----+---------+----------------+
  3 rows in set (0.14 sec)

The SQL DESCRIBE command shows information about the table: the names of the columns, the data type for each column, whether it should have data, keys, and so on. You can also use the SHOW command to see the same results.
Step 2: Posting a Message Page
Now that the table has been designed and created, the next step is to create the Web page containing the HTML form, and the PHP code that will process the form and enter the posted data into a MySQL database.

Filename: messages.php



          1:<?php
          2:  if (!empty($_POST)) {
          3:    $subject = $_POST['subject'];
          4:    $body = $_POST['body'];
          5:  }
          6:  if (!empty($subject) && !empty($body)) {
          7:    @ $db = mysql_connect('localhost','djefferson','dino1234');
          8:    if (!$db) {
          9:      exit('Connection to server failed: '. mysql_error());
         10:    }
         11:    if (! mysql_select_db('guestbook', $db)) {
         12:      exit('Database select error: '. mysql_error($db));
         13:    }
         14:    $result = mysql_query("INSERT INTO messages (subject, body)"
         15:                         ." VALUES ('$subject','$body')", $db);
         16:    if (!$result) {
         17:        exit('Database query error: '. mysql_error($db));
         18:    }
         19:    $status = "Message <i>$subject</i> has been posted<br /><br />";
         20:  }
         21:?>
         22:<html>
         23: <head>
         24:  <title>Guestbook</title>
         25: </head>
         26: <body>
         27:  <h1>Post a Message to the Guestbook</h1>
         28:  <strong><?= $status ?></strong>
         29:  <form action="<?= $_SERVER['PHP_SELF'] ?>" method="POST">
         30:    Subject <input type="text" name="subject" size="35">
         31:    <br /><br />
         32:    <textarea name="body" cols="40" rows="15"></textarea>
         33:    <br /><br />
         34:    <input type="submit" value="Post">
         35:  </form>
         36: </body>
         37:</html>


If the $_POST array has been populated, the form data is assigned to variables with the same names as the HTML Form input fields.
The first time the user visits this page, no data has been submitted, and the empty form is displayed.
This is a self-processing form. When the user presses the submit button (labeled "Post") this page will be displayed again. Remember, $_SERVER['PHP_SELF'] always points to the current page.
The form is using PHP short_tags. If short_tags are not allowed by the setting in your php.ini file, line 27 would need to be modified to read:

     <?php echo $_SERVER['PHP_SELF']; ?>

After connecting to the database server and selecting the correct database, an SQL statement is executed to INSERT the new record into the messages table.
Setting the $status variable is a nice way to communicate to the user that the database statement has been successfully executed.
Step 3: Listing All Messages
Once data has been sent to the database, a page is created to list all the postings in the Guest Book.
The MySQL database is opened and all the fields from the table messages are selected and printed.

Filename: guestbook.php



          1:<?php
          2:  @ $db = mysql_connect('localhost','djefferson','dino1234');
          3:  if (!$db) {
          4:    exit('Connection to server failed: '. mysql_error());
          5:  }
          6:  if (! mysql_select_db('guestbook', $db)) {
          7:    exit('Database select error: '. mysql_error($db));
          8:  }
          9:  $result = mysql_query("SELECT * FROM messages", $db);
         10:  if (!$result) {
         11:    exit('Database query error: '. mysql_error($db));
         12:  }
         13:  $num_messages = mysql_num_rows($result);
         14:?>
         15:<html>
         16: <head>
         17:  <title>Guestbook</title>
         18: </head>
         19: <body>
         20:  <h1>View the Guest Book</h1>
         21:  <i>There are a total of <?= $num_messages ?> posts to this website.</i>
         22:  <br /><br /><hr>
         23:  <?php
         24:    // Loop over all the posts and print them out
         25:    while ($row = mysql_fetch_assoc($result)) {
         26:      $subject = $row['subject'];
         27:      $body = $row['body'];
         28:      print "<strong>$subject</strong><br />";
         29:      print "<pre>$body</pre><br /><br />";
         30:    }
         31:  ?>
         32: </body>
         33:</html>


The SQL statement in the mysql_query() function selects all columns and rows from the messages table.
The mysql_num_rows() function returns the total number of rows in the result set.
The while loop iterates through all the records of the result set. The mysql_fetch_assoc() function returns an associative array representing the current row of data.
On lines 26-27 the "subject" and "body" columns of the current row are assigned to the local variables $subject and $body.
Example Summary
The "Guest Book" example illustrates the main steps needed to create most Web applications. Let's reexamine the steps involved:


       1. We start by defining the database and its tables. In this case there is one table named "messages" consisting of three columns: the unique ID, a subject, and the body of the message.
       2. Once the database and its tables are defined, all the web pages are designed that will interact with with it.
       3. The PHP script creates the HTML form where the user can post his or her message in a text area. After it is submitted, the PHP script calls itself, and the process of inserting the form data into the database is handled by MySQL functions.
       4. In the final step, the database is opened and all of the fields from the "messages" table are displayed. A while loop iterates over all the records of the result set returned by the SELECT query.


