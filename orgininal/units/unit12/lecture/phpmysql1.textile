h2. PHP and MySQL Integration

<hr />

h3. Overview

* The user has filled out a form and submitted it. It contains a list of items he or she wants to purchase. The information for that user is stored in a database table named "customers".
* You want to retrieve all the orders and product information for that customer from the database and display selected data on the Web page directly from your PHP script. Now you will learn how to integrate PHP and MySQL.
* PHP provides built-in functions that allow all the necessary operations for opening and selecting the database, and for sending it SQL queries to create tables, update and delete them, retrieve records, and display the results.
<br />*Note*: Actually PHP has multiple function libraries for database connectivity to MySQL and most other popular database management systems (DBMSs). In this class we use the MySQL Function Library, which provides connectivity to MySQL only, and is characterized by the fact that all of its member functions use the prefix "mysql_".
* Other commonly used libraries for database connectivity are:
** *MySQL-Improved Function Library* - A function library intended to replace the MySQL Function Library. It provides both Object-Oriented methods and traditional functions for MySQL connectivity. The functions all use the prefix "mysqli_" and most of their names are otherwise the same as the corresponding (older) MySQL Library functions.
** *DB Object-Oriented Library* - Available as a package in the PHP Extension and Application Repository (PEAR), DB provides connectivity for all major DBMSs. DB was the most common way to connect to DBMSs other than MySQL, prior to the introduction of PDO for PHP5.
** *PHP5 Data Object Abstraction Layer (PDO)* - PDO is the new data abstraction layer for PHP version 5. It provides connectivity to all major DBMSs, and is currently the recommended database connectivity solution for new PHP applications. (We will use PDO extensively in the advanced PHP courses.)
* You can create your HTML form, process it, and connect to the MySQL database all in one PHP program!
* At the beginning of this book, we described PHP and MySQL as a perfect marriage. In this unit, we see how that marriage works.

h3. Connecting to the Database Server

* To establish a connection to the MySQL database server from your PHP script, you can use the PHP *@mysql_connect()@* function.
* Format:
<br /><pre>
resource mysql_connect ( [string server [, string username [,
                         string password [, bool new_link [,
                         int client_flags]]]]] )
</pre>
* Example:
<br /><pre>
$link = mysql_connect('localhost','user','password');
</pre>
* The first argument is the host server where the MySQL server will be running. It can also include an IP address, port number, a path to a local socket, and so on.
* The second argument is the username, the name associated with the MySQL user account having access to the database or schema we want to use.
* The third argument is the password associated with the MySQL user account.
* If a second call is made to *@mysql_connect()@* with the same arguments, a new link will not be established, but instead, the link identifier of the already opened link will be returned.
* If you specify the "new_link" parameter, *@mysql_connect()@* will always open a new link.
* If the connection is successful, *@mysql_connect()@* returns the connection link and if not, the function returns FALSE.
* The resource returned points to the database server and is used by all the other mysql functions in the script.
* When a Web page or PHP script ends, the database is automatically closed and the resource that links to it is released, so that if you start another page you will have to reconnect to the database.
* If you want to close the database before the program ends, PHP provides the *@mysql_close()@* function. The *@mysql_close()@* function closes the connection to the MySQL server referenced by the link.
* Format:
<br /><pre>
bool mysql_close ( [resource link_identifier]
</pre>
* Example:
<br /><pre>
mysql_close($link);
</pre>
* Filename: *dbconnect.php*
<br /><pre>
1:<?php
2:  print 'Opening a connection to the MySQL database server<br />';
3:  $link = mysql_connect('localhost','djefferson','dino1234');
4:  if (!$link)
5:    exit('Connection to MySQL server failed!');
6:  print "Connection to MySQL worked. The link is: $link <br />";
7:  print 'Closing the connection<br />';
8:  mysql_close($link);
9:?>
</pre>
* The PHP *@mysql_connect()@* function connects to a MySQL database server running on "localhost" using a valid username and password.
* If the connection succeeeds, the message on line 6 is printed, including the value of the resource variable *@$link@*.
* If the connection fails, *@$link@* contains the Boolean value FALSE, and the script exits with a message at line 5.
* The *@mysql_close()@* function closes the connection to the database previously opened by *@mysql_connect()@*. *@mysql_close()@* is not necessary because the connection will automatically be closed when the script ends.

h3. Choosing the Database

* Once connected to the database server, the next step is to set the MySQL default database to the one that you will be using.
* The *@mysql_select_database()@* function is used to select a MySQL database. Note: This is the equivalent to the use command when using mysql client.
* The first argument is the name of the database. The second argument is the MySQL connection resource variable (the link) established when the *@mysql_connect()@* function was executed.
* Format:
<br /><pre>
bool mysql_select_db ( string database_name [,
                       resource link_identifier] )
</pre>
* Example:
<br /><pre>
$link = mysql_connect('localhost','ellie','my_password');
$db_selected = mysql_select_db('Northwind', $link);
</pre>
* Filename: *dbselect.php*
<br /><pre>
1:<?php
2:  print 'Opening a connection to the MySQL database server<br />';
3:  $link = mysql_connect('localhost','djefferson','dino1234');
4:  if (!$link)
5:    exit('Connection to MySQL server failed!');
6:
7:  print 'Selecting a database schema<br />';
8:  $selected = mysql_select_db('Northwind', $link);
9:  if (!$selected)
10:    exit('Selection of the MySQL database failed!');
11:  print 'MySQL database selected successfully<br />';
12:
13:  mysql_close($link);
14:?>
</pre>
* First, we establish a connection to the MySQL database server; in this example the connection is made to "localhost" using a valid username and password for authentication.
* Using the *@mysql_select_db()@* function, the "Northwind" database is set as the default database. From now on, all the queries executed assume this database schema as the default.
* Because, once the connection is closed, the default database is also closed, you will need to perform *@mysql_connect()@* and *@mysql_select_db()@* on every web page needing this database connectivity.
* If successful, *@mysql_select_db()@* returns the Boolean TRUE, otherwise it returns FALSE.
* Executing SQL Statements (INSERT, UPDATE, DELETE)
* Once connected to the database server, and having selected a database, it is time to start executing SQL commands.
* PHP provides the *@mysql_query()@* function to perform database queries. You must have the appropriate permissions to execute queries on a given database.
* Format:
<br /><pre>
resource mysql_query ( string query [, resource link_identifier] )
</pre>
* Example:
<br /><pre>
$result = mysql_query("SELECT CompanyName, Phone FROM Shippers");
$result = mysql_query("DESCRIBE Shippers");
</pre>
* For the SELECT, SHOW, DESCRIBE, or EXPLAIN statements, *@mysql_query()@* returns a resource on success, or FALSE on error. For other types of SQL statements (UPDATE, DELETE, DROP, etc.), *@mysql_query()@* returns TRUE on success or FALSE on error.
* PHP provides a number of functions to deal with the result, such as *@mysql_fetch_array()@*, *@mysql_num_rows()@*, *@mysql_affected_rows()@*, and so on.
* You can also use the built-in error-handling functions to find out why a query failed.
* You can test that your SQL statement is valid by executing it in another MySQL client, such as the mysql command line.
* For INSERT, UPDATE, and DELETE, this function will return TRUE if the operation was successful and FALSE otherwise.
* Filename: *dbquery.php*
<br /><pre>
 1:<html>
 2: <head><title>MySQL Queries in PHP</title></head>
 3: <body bgcolor="lightblue">
 4:  <font size='+1' face='arial'>
 5:  <?php
 6:    print "Opening the connection to the database server<br />";
 7:    $link = mysql_connect('localhost','djefferson','dino1234');
 8:    if (!$link)
 9:      exit('Connection to MySQL server failed!');
10:    $database = 'Northwind';
11:    print "Selecting the $database database<br />";
12:    $selected = mysql_select_db($database, $link);
13:    if (!$selected)
14:      exit('Selection of database '. $database .' failed!');
15:
16:    $query = "UPDATE Shippers SET phone = '(777) 430-2346'"
17:            ." WHERE CompanyName = 'Federal Shipping'";
18:    $result = mysql_query($query, $link);
19:    if (!$result)
20:      die('Query failed: '. mysql_error($link));
21:
22:    // number of rows affected by the most recently executed query
23:    $rows_affected = mysql_affected_rows($link);
24:    echo "You have updated $rows_affected row(s).<br />";
25:
26:    print 'Closing the connection<br />';
27:    mysql_close($link);
28:  ?>
29:  </font>
30: </body>
31:</html>
</pre>
* First, we connect to the database server. Then, the "Northwind" practice database is selected.
* The SQL statement is created on lines 16-17. It is assigned to the variable *@$query@*.
* Notice that the SQL string is just like any other SQL statement you would type in the MySQL Query Browser or at the mysql command line.
* It can also contain explicit values or variables evaluated by PHP before sending the query to the database.
* The *@mysql_query()@* function is executed on line 18 and will return TRUE if the query is successful and FALSE if not.
* If the query is successful, the database will be updated. If not, the PHP script will die (exit) with the message: "Query failed:" followed by the reason for the error.
* The *@mysql_error()@* function returns a message that tells us what was wrong with the query, similar to the message you would receive at the MySQL console.
* The *@mysql_affected_rows()@* function returns the number of affected rows from the previous MySQL query.

h3. Retrieving the Query Results (SELECT)

* The SQL commands INSERT, UPDATE, and DELETE do not return any data as shown in the previous examples, whereas the SELECT statement normally returns a set of data records, called the result set.
* The format for the *@mysql_query()@* function does not change, but a result set is returned if the query is successful, and FALSE is returned if the query fails.
* Format:
<br /><pre>
resource mysql_query ( string query [, resource link_identifier] )
</pre>
* Example:
<br /><pre>
$result = mysql_query("SELECT subject, body FROM messages");
</pre>
* Many rows of data might be returned to the result set as the result of the SQL execution. If this function fails to execute the SQL statement, it will return FALSE instead of the result set.
* To display the result set, PHP has provided a number of functions including *@mysql_result()@*, *@mysql_fetch_array()@*, and *@mysql_fetch_row()@*.

h3. The *@mysql_fetch_row()@* Function

* The *@mysql_fetch_row()@* function is used to extract one record of the data from the result set.
* Format:
<br /><pre>
array mysql_fetch_row ( resource result )
</pre>
* Example:
<br /><pre>
$result_set = mysql_query($query_string)
$record = mysql_fetch_row( $result_set );
</pre>
* The *@$result@* variable is assigned the value returned from *@mysql_query()@* function, a numeric array.
* Although the result set might contain many records, the value returned from the *@mysql_fetch_row()@* function is only the first row.
* Each successive call to the *@mysql_fetch_row()@* function returns the next record (by moving an internal pointer) until there are no more records.
* Filename: *dbfetch.php*
<br /><pre>
 1:<html>
 2: <head><title>MySQL Fetch a Row</title></head>
 3: <body bgcolor="lightblue">
 4:  <font size='+1' face='arial'>
 5:  <?php
 6:    print "Opening the connection to the database server<br />";
 7:    $link = mysql_connect('localhost','djefferson','dino1234');
 8:    if (!$link)
 9:      exit('Connection to MySQL server failed!');
10:    $database = 'Northwind';
11:    print "Selecting the $database database<br />";
12:    if (! mysql_select_db($database, $link))
13:      exit('Selection of database '. $database .' failed!');
14:
15:    $query = 'SELECT CompanyName, Phone from Shippers';
16:    $result = mysql_query($query, $link);
17:    if (!$result)
18:      die('Query failed: '. mysql_error($link));
19:
20:    print 'Fetch the first row of data.<br />';
21:    $record = mysql_fetch_row($result);
22:    // print_r($record);
23:    foreach ($record as $value) {
24:      print "<em>$value </em>"; // print the row
25:    }
26:    print '<br />';
27:
28:    print 'Closing the connection<br />';
29:    mysql_close($link);
30:  ?>
31:  </font>
32: </body>
33:</html>
</pre>
* A connection is made to the database server on line 7. Notice that we have to do this on every single web page that needs the database connection because the connection is implicitly closed at the end of the script.
* Next, the database is selected on line 12. Server connection and database selection are required at the beginning of all database-enabled pages. Alternatively, you could put these statements in a script that will be included on every page using the *@include()@* or *@require()@* functions.
* The *@mysql_query()@* function executes the query and the result is assigned to the *@$result variable@*.
* One record is fetched from the result set by *@mysql_fetch_row()@* on line 21.
* The function keeps an internal counter of what records have been fetched so that the next call to *@mysql_fetch_row()@* returns the next record in the set, until there are no more.
* The foreach loop is used to list the contents of the array that was returned by *@mysql_fetch_row()@*.

h3. The *@mysql_fetch_assoc()@* Function

* In the previous example we fetched a record from the record set and the record returned was a numerically indexed array.
* However, PHP also supports associative arrays, which are sometimes much easier to use. So naturally, a result set can also be processed as an associative array.
* The *@mysql_fetch_assoc()@* function is very similar to *@mysql_fetch_row()@* except that the result returned is an associative array.
* Format:
<br /><pre>
array mysql_fetch_assoc ( resource result )
</pre>
* Example:
<br /><pre>
$record = mysql_fetch_assoc($result)
</pre>
* In this example, the *@$result@* variable contains what was returned from the *@mysql_query()@* function, and *@$record@* is the current row from that record set returned as an associative array.
* Filename: *dbfetchAssoc.php*
<br /><pre>
 1:<html>
 2: <head>
 3:  <title>MySQL Fetch Associative Array</title>
 4: </head>
 5: <body bgcolor="lightblue">
 6:  <font size='+1' face='arial'>
 7:  <?php
 8:    print "Opening the connection to the database server<br />";
 9:    $link = mysql_connect('localhost','djefferson','dino1234');
10:    if (!$link)
11:      exit('Connection to MySQL server failed!');
12:    $database = 'Northwind';
13:    print "Selecting the $database database<br />";
14:    if (! mysql_select_db($database, $link))
15:      exit('Selection of database '. $database .' failed!');
16:
17:    $query = 'SELECT CompanyName, Phone from Shippers';
18:    $result = mysql_query($query, $link);
19:    if (!$result)
20:      die('Query failed: '. mysql_error($link));
21:
22:    print 'Fetch the first row of data.<br /><br />';
23:    $record = mysql_fetch_assoc($result);
24:    foreach ($record as $key => $value) {
25:      print "<em>$key: $value</em><br />"; // Print the row
26:    }
27:    print '<br />';
28:
29:    print 'Closing the connection<br />';
30:    mysql_close($link);
31:  ?>
32:  </font>
33: </body>
34:</html>
</pre>
* The MySQL server connection is made, and the "Northwind" database is selected.
* The SQL SELECT statement string is assigned to the variable, *@$query@*.
* After *@mysql_query()@* is executed the result set contains the results returned from the database query.
* Instead of using *@mysql_fetch_row()@* and getting an array indexed by numbers, the *@mysql_fetch_assoc()@* function returns an associative array with the index being the name of the column specified in the database, and its value what is found in that column for the current row.
* The foreach loop is used to iterate through the associative array, to retrieve both the keys (column names) and the value associated with each of them.

<br />

<hr />

[[Unit Twelve => 152-166 Unit Twelve Index]]
