<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<title>Getting Started</title>
<link href="../../../css/basic.css" rel="stylesheet" type="text/css">
<script type="text/javascript" language="JavaScript">
<!--
function putSemester() {
    var today=new Date();
    var thisMonth=today.getMonth()+1;
    var thisYear=today.getFullYear();
    if(thisMonth <=6) {
        return "Spring, " + thisYear;
    }
    else {
       return "Fall, " + thisYear;
    }
}//-->
</script>
<style type="text/css">
<!--
    .bgStripes {
        background-image:url(../../../images/Xstripes.gif);
        background-attachment: fixed;
    }
    body {
        background-color:white;
    }
    strong {
        font-family: Arial, Helvetica, sans-serif;
    }
-->
</style>
</head>
<body style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">
<table class="bgStripes" border="0" width="100%">
<tbody>
<tr name="firstRow">
<td valign="top" width="80"><span style="font-size: x-small; font-weight: bold;">
<script type="text/javascript">
<!--
    document.write(putSemester());
-->
</script>
</span> <br />
</td>
<td style="text-align: center;"><span style="font-weight: bold; font-size: medium; color: darkblue;">
PHP Web Development with MySQL
</span> </td>
<td align="right" valign="top" width="80"><span style="font-size: x-small; font-weight: bold;">
3 Credits</span> </td>
</tr>
<tr>
<td colspan="3" style="text-align: center;"><span style="font-size: xx-small; font-weight: bold;">
152-166</span> </td>
</tr>
</tbody>
</table>
<!--The heading for the slides --> <br />
<table class="headTable1" border="0">
<tbody>
<tr>
<td width="100"><a href="index.html"><img alt="" src="../../../images/btn_lArrow.gif" border="0"></a><a href="index.html"><img alt="" src="../../../images/btn_upArrow.gif" border="0"></a><a href="datatypes.html"><img alt="" src="../../../images/btn_rArrow.gif" border="0"></a></td>
<td>Getting Started with PHP</td>
</tr>
</tbody>
</table>
<br />
<div class="disp1">
<ul class="slidesUl1">
<li><p>
How a Dynamic Web Page is Processed
</p><p>
The applications involved in the processing of a Web page are:
</p>
<ul>
<li>
a browser such as Firefox or Internet Explorer</li>
<li>
a network (HTTP)</li>
<li>
a web server such as Apache or Windows IIS</li>
<li>
a server module (PHP, ASP, ColdFusion)</li>
<li>
external files or a database (MySQL, Oracle, Sybase)
</li>
</ul>
<p>
<img src="../../../attachment/unit02/life-cycle.png" alt="Web Page Life Cycle" />
</p><p>
The steps to process a page are:
</p>
</li>
</ul>
<blockquote>
<ol type="1">
<li class="row1">
<p>
The user makes a request for a Web site by typing the address of the Web site
in the browser's URL location box. The browser attempts to transmit the "request"
to the server indicated by the URL using the HTTP protocol.
</p>
</li>
<li class="row10">
<p>
The network can be a very large network such as the Internet,
an intranet within an organization, or a wireless network on a personal desktop
computer. The HTTP protocol is used to transfer documents to and from the server.
</li>
<li class="row1"><p>
Web servers are generic programs capable of accepting Web-based requests and
providing the response to them. With dynamic Web sites,
Web servers turn over the request for a specific file to an appropriate helper
application.</p>
</li>
<li class="row0"><p>
PHP is a module that resides within the Web server.
The server opens the file (script) and reads it line by line.
It hands over any PHP instructions to the PHP module for processing and replaces
the PHP code with the output it generated back into the page.</p>
</li>
<li class="row1"><p>
If the Web page consists of PHP with MySQL (or any other database) statements,
then PHP may make further requests to the database to retrieve, send, or update
information on the fly.</p>
</li>
<li class="row0"><p>
The Web server responds to the browser's request. If the request just involves
static HTML, this response is simply retrieving the file from server's local
file system. A dynamic web site's response includes any output returned
by modules such as the PHP module.
</p></li>
</ol>
</blockquote>
<ul class="slidesUl1">
<li>
<p>
The Anatomy of a PHP Script</p>
<p>
A PHP script is a file (ending with a .php extension) consisting of text,
HTML, and PHP instructions interspersed throughout the file.
The PHP instructions are contained within two HTML style tags:</p>
<blockquote>
<code><b><big>&lt;?php</big></b></code> is the opening tag<br />
<code><b><big>?&gt;</big></b></code> is the closing tag<br />
</blockquote>
<p>
Everything between these two tags is interpreted by the PHP module
(also called interpreter) and converted to regular text and HTML
before being sent back to the requesting browser.</p>
<p>
If, for example, one of the PHP instructions is to get today's date from the
server, PHP will get the date and replace the PHP instruction with the
current date. When the browser gets the file, it will not see the PHP tags or
any of the PHP instructions; it will get only what PHP generated as a result
of its processing.</p>
<p>
Consider the following simple PHP instruction consisting of an echo statement
containing the string "Hello, world.&lt;br /&gt;", some plain text, and an HTML break tag.
</p><p>
What the PHP interpreter gets:</p>
<blockquote><code>
&lt;?php<br />
&nbsp;&nbsp;echo "Hello, world.&lt;br /&gt;";<br />
?&gt;<br />
</code></blockquote>
<p>
What the Web browser gets:
</p>
<blockquote>
Hello, world.<br />
</blockquote>
</li>
<li><p>
The Steps of Writing a PHP Script
</p><p>
Because PHP is a scripting language designed to be integrated with other text documents,
most commonly HTML, you will write your scripts in a text editor.
</p><p>
Some popular text editors are BBEdit (Macintosh), Wordpad, Notepad (Windows),
pico, vi, emacs (Linux/UNIX), and so on.
</p><p>
Also available are third-party editors, such as jEdit,
TextPad and WinEdit, as well as integrated development environments (IDEs)
such as Dreamweaver and Eclipse.
</p></li>
<li><p>
Naming the PHP File - The <b>.php</b> Extension
</p><p>
When you name the file, be sure to add the PHP extension to its name.
Normally the extension is .php, but this depends on how your server was configured.
The following lines were taken from the Apache server's <b>httpd.conf</b> file.
This server accepts <b>.php</b>, <b>.php3</b>, and <b>.phtml</b> as valid
extensions to PHP script names.
</p><p>
From the Apache httpd.conf file:
</p>
<blockquote><code>
AddType application/x-httpd-php .php<br />
AddType application/x-httpd-php .php3<br />
AddType application/x-httpd-php .phtml<br />
</code></blockquote>
</li>
<li><p>
PHP Tags
</p><p>
The script file may contain HTML, XHTML, XML, and so on, but PHP will consider
the file as just plain text and leave it alone, unless you explicitly embed the
PHP statements between its own special tags:
</p>
<blockquote><code>
&lt;?php<br />
&nbsp;&nbsp;statement;<br />
&nbsp;&nbsp;statement;<br />
?&gt;<br />
</code></blockquote>
<p>
Each statement must be terminated with a semicolon
(unless it is the last line of the script). If you forget the semicolon
PHP will produce an error message similar to this:
</p>
<blockquote><code>
Parse error: syntax error, unexpected T_PRINT in
c:\wamp\www\exemples\first.php on line 4
</code></blockquote>
</p></li>
<li><p>
Additional PHP Tags
</p><p>
To promote flexibility, PHP supports three other types of tags,
but the full PHP tags just described are really the most reliable,
and your particular PHP configuration may not support all of those listed below.
</p></li>
<li><p>
Table: Additional PHP Tags
</p>
<blockquote><small><b><u>
Tag&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Description&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br />
</u></b>
PHP tags&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;
<code>&lt;?php php code ?&gt;</code><br />
HTML style tags&nbsp;&nbsp;&nbsp;
<code>&lt;script language="php"&gt; php code &lt;/script&gt;</code><br />
ASP-style&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;
<code>&lt;% php code %&gt;</code><br />
PHP short tags&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<code>&lt;?= php code ?&gt;</code><br />
</small></blockquote>
<p>
The special shortcut tags, <b>&lt;?=</b> and <b>?&gt;</b> are used to evaluate
PHP expressions embedded in HTML. These tags are discussed in more depth
later in this Unit. They are used as follows:
</p>
<blockquote><code><small>
&lt;html&gt;<br />
This is a line of html &lt;?= php code here ?&gt; more html<br />
&lt;/html&gt;<br />
</small></code></blockquote>
<p>
To use short tags, you may have to change a setting in the PHP initialialization file,
<b>php.ini</b> . Search for "short_open_tag" and change the setting to "On".
Excerpt from the php.ini file:
</p>
<blockquote><code><small>
; Allow the &lt;? tag. Otherwise, only &lt;?php and &lt;script&gt; tags are recognized.<br />
; NOTE: Using short tags should be avoided when developing applications or<br />
; libraries that are meant for redistribution, or deployment on PHP<br />
; servers which are not under your control, because short tags may not<br />
; be supported on the target server. For portable, redistributable code,<br />
; be sure not to use short tags.<br />
short_open_tag = On<br />
</small></code></blockquote>
</li>
<li><p>
Where to Save the Script
</p><p>
When you have completed writing the script, it will normally be saved in a file
under the server's document root, as we discussed in Unit 1.
</p></li>
<li><p>
The Script Content
</p><p>
Developers often prefer to seperate the presentation code (HTML, XML)
from business logic (program instructions) and PHP offers the best of both worlds.
</p><p>
A PHP script can be an independent file consisting of PHP tags and instructions,
or it can be embedded in an HTML document.
</p><p>
The PHP tags are often inserted between the <b>&lt;body&gt;</b> tags of an HTML document,
although they can be inserted anywhere on the page.
</p><p>
To format your output, HTML tags can be embedded in PHP statements as well,
but cannot stand alone in a PHP script.
</p><p>
You can have multiple PHP scripts within
an HTML page.
</p><p>
The following script demonstrates how blocks of PHP code may be inserted in a Web page:
</p>
<h4>
Filename: first.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Hello World<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">h1</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Hello World example<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">h1</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>   <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>     print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">It</SPAN><SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">s</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">such</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">a</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">perfect</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">day</SPAN><SPAN CLASS="syntax13">!</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>   <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  11:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</small></blockquote>
<p>
Before sending the page to the browser, the Web server will send any PHP
instructions to the PHP module for preprocessing.
</p><p>
The PHP module starts interpreting code when it finds the first <b>&lt;?php</b>
opening tag, and continues until it reaches the closing tag <b>?&gt;</b> ,
executing the code between the tags.
</p><p>
Any other text in the file is left as is. If there is output, this output
replaces the original PHP code between the tags.
</p><p>
PHP tags and code are removed. HTML tags are left alone.
</p><p>
The Web server will send the resulting page, consisting of plain HTML and text,
back to the browser that requested the page.
</p><p>
To see the source code received by the browser, go to the browser's "View" menu
option and select "Page Source" or "Source".
</p><p>
Your instructor will show you the output of the above PHP script in a browser,
and the HTML that is returned to the browser.
</p></li>
<li><p>
Quoting in Strings
</p><p>
Many statements you write in PHP will contain text strings, such as "Have a good day!".
Chapter 6 of the text is all about strings, but as you start learning PHP,
you should be aware of PHP's basic rules concerning strings.
</p>
</li>
</ul>
<blockquote>
<ol type="1">
<li class="row1">
<p>
All strings must be enclosed in a pair of either single or double quotes.
The quotes must be matched: <code>"Hello there"</code> or
<code>'Hello there'</code>
</p>
</li>
<li class="row0">
<p>
To join two strings together, use the concatenation operator, a dot:
</p>
<blockquote><code>
"Hello, " . "world"<br />
</code></blockquote>
</li>
<li class="row1">
<p>
If you need to print out a quote mark, precede it with a backslash or
enclose it in the other type of quotes:
</p>
<blockquote>
<code>"\"Ouch\""</code>&nbsp;or<br />
<code>"I don't care"</code>&nbsp;or<br />
<code>'Jane said "Run Spot, run!"'<br />
</code>
</blockquote>
</li>
</ol>
</blockquote>
<ul class="slidesUl1">
<li>
<p>
Printing Strings
</p><p>
PHP displays output using the <b>echo</b> and <b>print</b> language constructs.
</p><p>
The <b>print</b> construct let's us display a string. You may use parentheses,
but they are not required.
</p><p>
To print more than one string with <b>print</b>, you can use the dot to
concatenate the strings into a single string.
</p>
<blockquote><code><small>
&lt;?php<br />
&nbsp;&nbsp;print "Hello, " . "world!" . "&lt;br /&gt;";&nbsp;&nbsp;// Concatenation<br />
&nbsp;&nbsp;print "Hello to world again!&lt;br /&gt;";&nbsp;&nbsp;// Don't need parens<br />
&nbsp;&nbsp;print ("It's such a perfect day!&lt;br /&gt;");&nbsp;&nbsp;// Parens okay<br />
?&gt;
</small></code></blockquote>
<p>
Echo is like print but allows you to print more than one string by separating
the strings with commas.
</p>
<blockquote><code><small>
&lt;?php<br />
&nbsp;&nbsp;echo "Hello, ", "world!", "&lt;br /&gt;";&nbsp;&nbsp;// Don't use parentheses<br />
&nbsp;&nbsp;echo ("It's such a perfect day!&lt;br /&gt;");&nbsp;&nbsp;// Parens okay<br />
?&gt;
</small></code></blockquote>
<p>
These constructs are quite simple and do not do any fancy formatting.
If you need to format the output, PHP provides a number of functions,
including the <b>printf()</b>, <b>sprintf()</b>, and <b>fprintf()</b> .
</p></li>
<li><p>
Executing the Script
</p><p>
To execute a script, go to your browser and in the address bar,
type the URL of the PHP script you want to execute.
</p><p>
If running locally, for example, it might be: <code>http://localhost/file.php</code>
or <code>http:127.0.0.1/file.php</code>
</p><p>
If you are working with an ISP, you will have to upload the file to its site.
Ask your ISP for the correct method for uploading your file,
and the correct URL to execute it.
</p><p>
To run a PHP script placed in the <b>public_html</b> folder of user "astudent"
on our class server, use: <code>http://itins3.matcmadison.edu/~astudent/file.php</code>
or <code>http:198.150.221.252/~astudent/file.php</code>
</p><p>
If you are running on a UNIX or Linux system, you may have permission issues.
To turn on execute permission for the script, go to a shell prompt and type:
<code>chmod +x file.php</code>
</p></li>
<li><p>
Some Things to Consider
</p><p>
Although PHP statements consist of text, terminated by a semicolon,
there are a number of issues to consider before we really get started on
specific language constructs, such as numbers, strings, operators, variables,
loops, and so on.
</p></li>
<li><p>
PHP and HTML Are Different Languages
</p><p>
It is important to keep in mind that HTML and PHP are two very different languages
used for different purposes and executed by totally different processes.
</p><p>
HTML is called a markup language. It combines text with tags to define the
structure and describe the way a document will be displayed.
</p><p>
PHP is a programming language that consists of data and instructions and
procedures that tell the computer what operations to perform on the data.
</p><p>
A common mistake is to place HTML tags directly in a PHP block and vice versa.
Notice the placement of the HTML tags in the following example.
</p>
<h4>
Filename: badmix.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Mixing HTML and PHP<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN>  <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN>    <SPAN CLASS="syntax18">&lt;</SPAN>font size<SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">+</SPAN><SPAN CLASS="syntax13">2</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">&gt;</SPAN>   <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">Wrong!!!</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">Cannot</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">place</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">HTML</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">directly</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>                       <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">into</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">PHP</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">script</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">It</SPAN><SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">s</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">such</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">a</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">perfect</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">day</SPAN><SPAN CLASS="syntax13">!</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>  <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">Okay</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">here</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">within</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>                                             <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">the</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">statement</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>  <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  11:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  12:</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
Your instructor will show you the error message output by this script.</p>
<p>
See the correct placement of the HTML tags below. Your instructor will
demonstrate its corresponding output.
</p>
<h4>
Filename: goodmix.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Mixing HTML and PHP<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">size</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">+</SPAN><SPAN CLASS="syntax13">2</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN> <SPAN CLASS="syntax1">&lt;!--</SPAN><SPAN CLASS="syntax1">OK.</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">Moved</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">font</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">tag</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">here</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">--&gt;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN>  <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">It</SPAN><SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">s</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">such</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">a</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">perfect</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">day</SPAN><SPAN CLASS="syntax13">!</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>  <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   9:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>
</PRE>
</div>
</small></blockquote>
</li>
<li><p>
Statements, Whitespace, and Line Breaks
</p><p>
A PHP statement is somewhat like an English sentence,
but is terminated with a semicolon instead of a period.
</p><p>
PHP is called a free form language, meaning you can place statements anywhere
on a line, and statements may span multiple lines.
</p><p>
Whitespace refers to spaces, tabs, and newlines.
Whitespace is used to delimit words and does not have other significance.
</p><p>
Any number of blank spaces are allowed between symbols and words.
Both of the following PHP statements are correct:
</p>
<blockquote><code>
print "This is a PHP statement.";<br /><br />
print "This<br />
&nbsp;&nbsp;&nbsp;is<br />
&nbsp;&nbsp;&nbsp;also<br />
&nbsp;&nbsp;&nbsp;a PHP<br />
&nbsp;&nbsp;&nbsp;statement.";<br />
</code></blockquote>
<p>
The table below lists whitespace characters and how they are represented in PHP.
Note the characters preceded by a backslash and enclosed in quotes.
</p><p>
Table: Whitespace Characters
</p>
<blockquote><small><u><b>
Description
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Written As

<br /></b></u>
An ordinary space
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ASCII 32 (0x20)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
" "<br />
A tab
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;
ASCII 9 (0x09)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"\t"<br />
A newline (line feed)
&nbsp;&nbsp;
ASCII 10 (0x0A)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"\n"<br />
A carriage return
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ASCII 13 (0x0D)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"\r"<br />
The NUL-byte
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
ASCII 0 (0x00)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"\0"<br />
A vertical tab
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;
ASCII 11 (0x0B)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"\x0B"<br />
</small></blockquote>
<p>
Even though you have a lot of freedom when formatting a PHP script,
it is good practice to make the program readable to yourself and others by
providing indentation and putting each statement on its own line,
with comments describing what you are doing.
</p><p>
Certainly a clean style makes it easier to read as well as debug programs,
especially when they become more complex.
</p><p>
The script below, although correct, is obviously not in a very readable style.
</p>
<blockquote><code>
&lt;?php<br />
&nbsp;&nbsp;print "It's<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;such&nbsp;&nbsp;&nbsp;&nbsp;a perfect<br />
&nbsp;&nbsp;day! ";<br />
?&gt;<br />
</code></blockquote>
<p>
The entire script could be written more cleanly on a single line!
</p>
<blockquote><code>
&lt;?php<br />
&nbsp;&nbsp;print "It's such a perfect day!";<br />
?&gt;<br />
</code></blockquote>
</li>
<li><p>
Comments
</p><p>
You may write a very clever PHP script this afternoon,
and in two weeks have no idea what your script was supposed to do.
</p><p>
If you pass the script on to someone else, the confusion magnifies.
Hence, comments.
</p><p>
Comments are plain English text inserted into a script to explain what is going on;
they are annotations written for anyone who reads your script, including you.
</p><p>
They are extremely important when working with a team of people to help
communicate your intentions.
</p><p>
Comments are ignored by the PHP interpreter.
If the user views the source file in his or her browser,
the comments will not be there, because once the PHP code is preprocessed,
the comments are removed from the output.
</p><p>
PHP comments can be written on a single line or cover multiple lines.
The style PHP uses comes from other languages such as C, C++, and UNIX shells, and Perl.
</p><p>
The style you use depends on how much you want to say.
A single-line comment starts with either a hash mark <b>#</b>
(like Shell and Perl comments) or double slashes <b>//</b> (like C++ comments).
</p><p>
The <b>/* */</b> (C style) comment can be used as a single-line comment as well,
but it is also useful if you want your comments to cover multiple lines.
</p>
<blockquote><code>
&lt;?php<br />
&nbsp;&nbsp;// This is a single-line comment.<br />
&nbsp;&nbsp;#  This is also a single-line comment<br />
&nbsp;&nbsp;print 5 + 2;&nbsp;&nbsp;// Another single-line comment<br />
&nbsp;&nbsp;/*  This style of comment allows you to write comments to span<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;over multiple lines<br />
&nbsp;&nbsp;*/<br />
?&gt;<br />
</code></blockquote>
<p>
Note that HTML has a different syntax for the comments.
HTML comments consist of text inserted between <b>&lt;!--</b> open tag and
<b>--&gt;</b> close tag. These comments are visible when you view the source
of a web page.
</p><h4>
Filename: comments.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutter">   2:</SPAN>  <SPAN CLASS="syntax1">/*</SPAN>
<SPAN CLASS="gutter">   3:</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">Author:</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">Marko</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">Gargenta</SPAN>
<SPAN CLASS="gutter">   4:</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">Date:</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">12/11/2006</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">Description:</SPAN>
<SPAN CLASS="gutter">   6:</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">This</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">is</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">a</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">simple</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">PHP</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">script</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">that</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">output</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">Hello</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">World</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">text</SPAN>
<SPAN CLASS="gutter">   7:</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">*/</SPAN>
<SPAN CLASS="gutter">   8:</SPAN><SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutter">   9:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Hello World<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  12:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  13:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  14:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">h1</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Hello World example<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">h1</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">  15:</SPAN>  <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutter">  16:</SPAN>    <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2">This</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">is</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">a</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">comment</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">line</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">(C++</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">style)</SPAN>
<SPAN CLASS="gutter">  17:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">It</SPAN><SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">s</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">such</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">a</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">perfect</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">day</SPAN><SPAN CLASS="syntax13">!</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>  <SPAN CLASS="syntax1">#</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">Another</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">comment</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">here</SPAN>
<SPAN CLASS="gutter">  18:</SPAN>  <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutter">  19:</SPAN>  <SPAN CLASS="syntax1">&lt;!--</SPAN><SPAN CLASS="syntax1">this</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">is</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">an</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">HTML</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">comment</SPAN><SPAN CLASS="syntax1"> </SPAN><SPAN CLASS="syntax1">--&gt;</SPAN>
<SPAN CLASS="gutterH">  20:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  21:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
Your instructor will run the script above, and then view the HTML source in a
browser.
</p><p>
None of the comments are visible in the web page displayed.
When we view the source, PHP comments are not visible, but HTML comments are.
</p></li>
<li><p>
Using PHP Functions
</p><p>
A big part of any programming language is the set of functions that are built
into the language or packaged in special libraries.
</p><p>
Later in the course you will learn how create your own functions, but for now,
we concentrate on the "built-in" functions that are part of the PHP language.
</p></li>
<li><p>
So what is a function?
</p><p>
A function is an independent piece of program code that is created to make
your life easier.
</p><p>
You don't see what's going on inside the function.
You just have to know what it is supposed to do, and then when you need it,
call it by its name.
</p><p>
You can send a value (or values) to a function and the function can send back
a result. Perhaps the function just performs some operation such as getting
today's date or printing a formatted string of text.
</p><p>
If you want to round a number, you can call the built-in <b>round()</b> function.
</p><p>
For example, <b>round(4.5)</b> will return 5 and <b>round(4.2)</b> will return 4.
</p><p>
The values you send to the function are called arguments,
a comma-separated list of words enclosed in the parentheses after the function name.
</p><p>
Different functions have different numbers of arguments and some have none at all.
What the function sends back is called the return value.
</p><p>
If you wanted to save the return value, you would ordinarily print it or save it
in a variable; for example: <code>$rounded_number = round(4.5)</code>
</p><p>
PHP comes with many useful functions, all of which are well documented at
the PHP Web site: <a href=http://www.php.net/>http://www.php.net/</a>
</p><p>
For example, if you didn't know how to get get the current date from PHP,
go to <b>php.net</b> and type "date" in the top right corner search box.
Make sure you select to search in the "function list".
</p><p>
Your instructor will demonstrate searching <b>php.net</b> .
You will find the PHP Web site an invaluable reference for everything that has
to do with PHP.
</p><p>
Although it is customary to use lower case for function names,
they are not case sensitive: <b>date()</b> and <b>Date()</b> and <b>DATE()</b>
are all valid and all call the same built-in function!
</p><p>
The sample code below demonstrates how to use the <b>date()</b> function
to print out the current date.
</p>
<h4>
Filename: getdate.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Current Date and Time<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">h1</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Current Date and Time<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">h1</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN>  <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">Today</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>    print <SPAN CLASS="syntax9">date</SPAN>(<SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">D</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">M</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">j</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">G</SPAN><SPAN CLASS="syntax13">:</SPAN><SPAN CLASS="syntax13">i</SPAN><SPAN CLASS="syntax13">:</SPAN><SPAN CLASS="syntax13">s</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">T</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">Y</SPAN><SPAN CLASS="syntax13">&quot;</SPAN>)<SPAN CLASS="syntax18">;</SPAN>   <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">Function</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">names</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">are</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">NOT</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">case</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>                                     <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">sensitive</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">Current</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">time</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>    print <SPAN CLASS="syntax9">Date</SPAN>( <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">g</SPAN><SPAN CLASS="syntax13">:</SPAN><SPAN CLASS="syntax13">i</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">a</SPAN><SPAN CLASS="syntax13">&quot;</SPAN> )<SPAN CLASS="syntax18">;</SPAN>  <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">Function</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">names</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">are</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">not</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">case</SPAN>
<SPAN CLASS="gutter">  12:</SPAN>                            <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">sensitive</SPAN>
<SPAN CLASS="gutter">  13:</SPAN>  <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutter">  14:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">  15:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
Your instructor will demonstrate the web output and browser page source for
<b>getdate.php</b> . The script below is an example of using the special short
tags to return part of a date string.
</p>
<h4>
Filename: getdate2.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>short tags and functions<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">lightgreen</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">h1</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Current Date and Time<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">h1</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">size</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">+</SPAN><SPAN CLASS="syntax13">2</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>  You are looking at this page on <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">strong</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;?</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax9">date</SPAN>(<SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">l</SPAN><SPAN CLASS="syntax13">&quot;</SPAN>)<SPAN CLASS="syntax17">?&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">strong</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>  and life is good!<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">br</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   9:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
The <b>date()</b> function is embedded in PHP short tags right in the HTML document.
Its output is inserted into the text and sent to the browser. Your instructor
will run the script.
</p><p>
Appendix C of the text contains more information on the <b>date()</b> function.
</p></li>
<li><p>
PHP on the Command Line
</p><p>
UNIX and Linux users are normally more familiar with working at the command line
than Windows or Mac users.
</p><p>
Executing PHP at the command line requires that you know where PHP is installed
and that the PHP executable is included in your search path.
</p><p>
On some operating systems, such as Linux and MacOS, PHP comes preloaded,
but on Windows, after you have installed PHP, you might have to set the
PATH environment variable to execute PHP at the command line.
</p><p>
In this course we will not further discuss running PHP at the command line,
but some information on this subject is presented in Chapter 2 of the text.
</p>
<li><p>
The php.ini File
</p><p>
Many of the operations you perform will depend on how the PHP initialization
directives have been set in the <b>php.ini</b> file. For the most part,
you should go with the default configuration, because the PHP developers
selected default settings they determined to be the best for security,
performance, and so on.
</p><p>
Occasionally you might want to change a setting, especially if you are developing
PHP scripts for your own use, not part of a Web project that will be used on the
Internet. Because the php.ini file is a text file, it is easy to modify it.
You might have to restart your Web server once you have changed the php.ini file.
</p><p>
You might have several copies of the php.ini file.
If making a change doesn't seem to work, look in the following locations.
This is typically where the Web server will look for the php.ini file:
</p>
</li>
</ul>
<blockquote>
<ol type="1">
<li class="row1">
<p>The directory from which the PHP script was called.</p>
</li>
<li class="row0">
<p>The server's document root.
</p></li>
<li class="row1">
<p>The Web server's default php.ini .</p>
</li>
</ol>
</blockquote>
<ul class="slidesUl1">
<li>
<p>
You can use the phpinfo() function in a script to find the path to your php.ini
file.
</p><p>
Common settings you might want to change are:
</p>
<blockquote>
register_globals<br />
display_errors<br />
error_reporting<br />
magic_quotes_gpc<br />
</blockquote>
<p>
This is an excerpt from the php.ini file:</p>
<code><small>
;;;;;;;;;;;<br />
; WARNING ;<br />
;;;;;;;;;;;<br />
; This is the default settings file for new PHP installations.<br />
; By default, PHP installs itself with a configuration suitable for<br />
; development purposes, and *NOT* for production purposes.<br />
; For several security-oriented considerations that should be taken<br />
; before going online with your site, please consult php.ini-recommended<br />
; and http://php.net/manual/en/security.php.<br />
;;;;;;;;;;;;;;;;;;;<br />
; About this file ;<br />
;;;;;;;;;;;;;;;;;;;<br />
; This file controls many aspects of PHP's behavior. In order for PHP to<br />
; read it, it must be named 'php.ini'. PHP looks for it in the current<br />
; working directory, in the path designated by the environment variable<br />
; PHPRC, and in the path that was defined in compile time (in that order).<br />
; Under Windows, the compile-time path is the Windows directory. The<br />
; path in which the php.ini file is looked for can be overridden using<br />
; the -c argument in command line mode.<br />
;<br />
; The syntax of the file is extremely simple. Whitespace and Lines<br />
; beginning with a semicolon are silently ignored (as you probably guessed).<br />
; Section headers (e.g. [Foo]) are also silently ignored, even though<br />
; they might mean something in the future.<br />
;<br />
; Directives are specified using the following syntax:<br />
; directive = value<br />
; Directive names are *case sensitive* - foo=bar is different from FOO=bar.<br />
;<br />
</small></code>
<p>
Again, make these changes to this file with caution.
</p>
</li>
</ul>
</div>
</body>
</html>

