<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<title>Variables</title>
<link href="../../../css/basic.css" rel="stylesheet" type="text/css">
<script type="text/javascript" language="JavaScript">
<!--
function putSemester() {
    var today=new Date();
    var thisMonth=today.getMonth()+1;
    var thisYear=today.getFullYear();
    if(thisMonth <=6) {
        return "Spring, " + thisYear;
    }
    else {
       return "Fall, " + thisYear;
    }
}//-->
</script>
<style type="text/css">
<!--
    .bgStripes {
        background-image:url(../../../images/Xstripes.gif);
        background-attachment: fixed;
    }
    body {
        background-color:white;
    }
    strong {
        font-family: Arial, Helvetica, sans-serif;
    }
-->
</style>
</head>
<body style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">
<table class="bgStripes" border="0" width="100%">
<tbody>
<tr name="firstRow">
<td valign="top" width="80"><span style="font-size: x-small; font-weight: bold;">
<script type="text/javascript">
<!--
    document.write(putSemester());
-->
</script>
</span> <br>
</td>
<td style="text-align: center;"><span style="font-weight: bold; font-size: medium; color: darkblue;">
PHP Web Development with MySQL
</span> </td>
<td align="right" valign="top" width="80"><span style="font-size: x-small; font-weight: bold;">
3 Credits</span> </td>
</tr>
<tr>
<td colspan="3" style="text-align: center;"><span style="font-size: xx-small; font-weight: bold;">
152-166</span> </td>
</tr>
</tbody>
</table>
<!--The heading for the slides --> <br>
<table class="headTable1" border="0">
<tbody>
<tr>
<td width="100"><a href="index.html"><img alt="" src="../../../images/btn_lArrow.gif" border="0"></a><a href="index.html"><img alt="" src="../../../images/btn_upArrow.gif" border="0"></a><a href="index.html"><img alt="" src="../../../images/btn_rArrow.gif" border="0"></a></td>
<td>The Building Blocks: Variables, and Constants</td>
</tr>
</tbody>
</table>
<br>
<div class="disp1">
<ul class="slidesUl1">
<li><p>
Variable Definition and Assignment
</p><p>
Variables are fundamental to all programming languages.
They are data items that represent a memory storage location in the computer.
</p><p>
Variables are containers that hold data such as numbers and strings.
In PHP programs there are three types of variables:
</p>
</ul>
<blockquote>
<ol type="1">
<li class="row1">
Predefined variables
</li>
<li class="row0">
User-defined variables
</li>
<li class="row1">
Form variables related to names in an HTML form
</li>
</ol>
</blockquote>
<ul class="slidesUl1">
<li>
<p>
Variables have a name, a type, and a value.
</p>
<code><small>
$num = 5;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// name: "$num", value: 5, type: numeric<br>
$friend = "Peter";&nbsp;
// name: "$friend", value: "Peter", type: string<br>
$x = true;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// name: "$x", value: true, type: boolean<br>
</small></code>
<p>
The values assigned to variables can change throughout the run of a program
whereas constants, and literals, remain fixed.
</p><p>
PHP variables can be assigned different types of data, including:
</p>
<ul>
<li>
Numeric</li>
<li>
String</li>
<li>
Boolean</li>
<li>
Objects</li>
<li>
Arrays</li>
</li>
</ul>
<p>
Computer programming languages like C++ and Java require that you specify the
type of data you are going to store in a variable when you declare it.
For example, if you are going to assign an integer to a variable,
you would have to say something like:
</p>
<blockquote><code>
int n = 5;<br>
</code></blockquote>
<p>
and if you were assigning a floating-point number:
</p>
<blockquote><code>
float x = 44.5;<br>
</code></blockquote>
<p>
Languages that require that you specify a data type are called "strongly typed"
languages. PHP, conversely, is a dynamically, or loosely typed, language,
meaning that you do not have to specify the data type of a variable.
In fact, doing so will produce an error.
</p><p>
With PHP you would simply say:
</p>
<blockquote><code>
$n = 5;<br>
$x = 44.5;<br>
</code></blockquote>
<p>
and PHP will figure out what type of data is being stored in <b>$n</b> and <b>$x</b> .
</p></li>
<li><p>
Valid Variable Names
</p><p>
Variable names consist of any number of letters (an underscore counts as a letter)
and digits.
</p><p>
The first character must be a letter or an underscore.
Variable names are case sensitive, so <b>$Name</b>, <b>$name</b>, and <b>$NAME</b>
are all different variables.
</p><p>
Table: Valid and Invalid Variable Name Examples
</p>
<blockquote><code><small>
<u><b>
Valid Variable Names&nbsp;&nbsp;&nbsp;
Invalid Variable Names<br></b></u>
&nbsp;&nbsp;$name1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;
$10names<br>
&nbsp;&nbsp;$price_tag
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
box.front<br>
&nbsp;&nbsp;$_abc
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;
$name#last<br>
&nbsp;&nbsp;$Abc_22
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;
A-23<br>
&nbsp;&nbsp;$A23
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
$5<br>
</small></code></blockquote>
</li>
<li><p>
Declaring and Initializing Variables
</p><p>
Variables are normally declared before they are used. PHP variables can be
declared in a script, come from an HTML form, from the query string attached
to the script's URL, from cookies, from the server, or from the server's environment.
</p><p>
Variable names are explicitly preceded by a "$".
You can assign a value to the variable (or initialize a variable) when you
declare it, but that is not mandatory.
</p>
<blockquote><code><small>
$variable_name = value;&nbsp;// initialized<br>
$variable_name;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// uninitialized, value is null<br>
</small></code></blockquote>
<p>
To declare a variable called firstname, do:
</p>
<blockquote><code><small>
$first_name="Ellie";<br>
</small></code></blockquote>
<p>
You can declare multiple variables on the same line by separating each
declaration with a semicolon.
</p>
<blockquote><code><small>
$ first_name; $middle_name; $last_name;<br>
</small></code></blockquote>
</li>
<li><p>
Double, Single, and Backquotes in Assignment Statements
</p><p>
When assigning a value to a variable, if the value is a string,
then the string can be enclosed in either single or double quotes.
</p><p>
If the value is returned from a function, then the function is not enclosed
in quotes. If the value is returned from a system command
then the command is enclosed in backquotes:
</p>
<blockquote><code><small>
$name = "Marko";&nbsp;&nbsp;// Assign a string<br>
$city = 'San Francisco';&nbsp;&nbsp;// Assign a string<br>
$now = date("m/d/Y");&nbsp;&nbsp;// Assign output of a function<br>
$dirlist = `ls -l`;&nbsp;&nbsp;// Assign output of a UNIX system command<br>
$dirlist = `dir /D/L`;&nbsp;&nbsp;// Assign a Windows system command<br>
</small></code></blockquote>
<p>
Let's run a script that demonstrates variable assignment.
</p>
<h4>
Filename: assign.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Variables<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">lightblue</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">face</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">arial</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">size</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">+</SPAN><SPAN CLASS="syntax13">1</SPAN><SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN>  <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">name</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">Joe</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">Shmoe</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">age</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax5">25</SPAN><SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax5">4</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">now</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax9">date</SPAN>(<SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">m</SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">d</SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">Y</SPAN><SPAN CLASS="syntax13">&quot;</SPAN>)<SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">nothing</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>    <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">name</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">age</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">years</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">old</SPAN><SPAN CLASS="syntax13">.</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>    <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">$nothing</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">contains</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">the</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">value</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">of</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax18">,</SPAN> <SPAN CLASS="syntax9">gettype</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">nothing</SPAN>)<SPAN CLASS="syntax18">,</SPAN>
<SPAN CLASS="gutter">  12:</SPAN>         <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">.</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  13:</SPAN>    <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">Today</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">now</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  14:</SPAN>  <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutterH">  15:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  16:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  17:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
Note that the variable <b>$nothing</b> is not assigned an initial value.
It will have the value NULL (and be considered data type NULL by PHP).
</p><p>
The <b>gettype()</b> function tells us that the type of $nothing is NULL.
</p><p>
Here is another example featuring the use of back ticks with Linux or UNIX.
</p>
<h4>
Filename: ticks.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE><SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Backticks<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">lightgreen</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">b</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">pre</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>  <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">month</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">`</SPAN><SPAN CLASS="syntax13">cal</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">7</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">2005</SPAN><SPAN CLASS="syntax13">`</SPAN><SPAN CLASS="syntax18">;</SPAN> <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">UNIX</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">command</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>    <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">month</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>  <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">b</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">pre</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  12:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  13:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
The PHP code is embedded in HTML &lt;pre&gt; tags to allow the calendar,
<b>$month</b> , to be displayed in its natural format.
</p><p>
Below is a similar script you can run on Windows, since it features the DOS
<b>date</b> command.
</p>
<h4>
Filename: wintick.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE><SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Backticks for Windows Command<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">66cccc</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">b</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">pre</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>  <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">today</SPAN> <SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">`</SPAN><SPAN CLASS="syntax13">date</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">T</SPAN><SPAN CLASS="syntax13">`</SPAN><SPAN CLASS="syntax18">;</SPAN> <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">Windows</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">command</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>    <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">Today</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">today</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>  <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutter">  12:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">b</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  13:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">pre</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  14:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">  15:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
</li>
<li><p>
Displaying Variables: The print and echo Constructs
</p><p>
So far, we have seen examples using both print and echo to display data.
These language constructs can be used interchangeably.
</p><p>
The only essential difference between echo() and print() is that echo allows
multiple, comma-separated arguments, and print doesn't.
</p><p>
Neither require parentheses around their arguments because technically they are
not functions, but special built-in constructs. In fact, arguments given to
echo must not be enclosed within parentheses.
</p><p>
Consider the following. Three variables are declared:
</p>
<blockquote><code>
$name = "Tom";<br>
$state = "New York";<br>
$salary = 80000;<br>
</code></blockquote>
<p>
echo() can take a comma-separated list of string arguments:
</p>
<blockquote><code>
echo $name, $state, $salary;<br>
</code></blockquote>
<p>
print() takes one string argument:
</p>
<blockquote><code>
print $name;<br>
</code></blockquote>
<p>
However, the concatenation operator can be used to print mutliple strings
or strings containing multiple variables:
</p>
<blockquote><code><small>
print $name . $state . $salary;<br>
echo $name . $state . $salary;<br>
</small></code></blockquote>
<p>
or all of the variables can be enclosed in double quotes:
</p>
<blockquote><code><small>
print "$name $state $salary&lt;br /&gt;";<br>
echo "$name $state $salary&lt;br /&gt;";<br>
</small></code></blockquote>
<p>
If a variable is enclosed in double quotes, it will be evaluated and its value
displayed.
</p><p>
If enclosed in single quotes, variables will not be evaluated.
With single quotes, what you see is what you get.
</p><p>
Like all other characters enclosed within single quotes, the "$" is treated as a
literal character.
</p><p>
The following strings are enclosed in single quotes:
</p>
<blockquote><code><small>
echo '$name lives in  $state and earns $salary.';<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$name lives in $state and earns $salary.<br>
<br>
print '$name lives in  $state and earns $salary.';<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$name lives in  $state and earns $salary.<br>
</small></code></blockquote>
<p>
The same strings are enclosed in double quotes:
</p>
<blockquote><code><small>
echo "$name lives in  $state and earns \$salary.";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tom lives in New York and earns $80000.<br>
<br>
print "$name lives in $state and earns \$salary.";<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tom lives in New York and earns $80000.<br>
</small></code></blockquote>
</li>
<li><p>
Shortcut Tags
</p><p>
There are several shortcuts you can use to embed PHP within the HTML portion
of your file, but to use these shortcuts, you must make a change in the
<b>php.ini</b> file.
</p><p>
Use caution: The PHP developers set this directive to "off" for security reasons.
</p><p>
From the php.ini file:
</p>
<code><small>
; Allow the &lt;? tag. Otherwise, only &lt;?php and &lt;script&gt; tags are recognized.<br>
; NOTE: Using short tags should be avoided when developing applications or<br>
; libraries that are meant for redistribution, or deployment on PHP<br>
; servers which are not under your control, because short tags may not<br>
; be supported on the target server. For portable, redistributable code,<br>
; be sure not to use short tags.<br>
short_open_tag = Off&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;--Turn this "On" to make short tags work<br>
</small></code>
<p>
Instead of using the print() or echo() functions to ouput the value of variables,
they can be nested within HTML code by using <b>&lt;?=</b> and <b>?&gt;</b>
shortcut tags where they will automatically be evaluated and printed.
</p><p>
<b>Note:</b> There can be no space between the question mark and the equal sign.
</p><p>
All of the following formats are acceptable:
</p>
<blockquote><code>
&lt;?= expression ?&gt;<br>
&lt;?= $color ?&gt;<br>
<br>
&lt;? echo statement; ?&gt;<br>
&lt;? echo $color; ?&gt;<br>
</code></blockquote>
<p>
In the example below, we have chosen a <b>&lt;?= $color ?&gt;</b> paint for our canvas.
</p>
<h4>
Filename: vars.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE><SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Variables<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">lightblue</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN>  <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">name</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">Marko</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">city</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">San</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">Francisco</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>  <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">face</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">verdana</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">size</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">+</SPAN><SPAN CLASS="syntax13">1</SPAN><SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">p</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>  Today is <SPAN CLASS="syntax17">&lt;?</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax9">date</SPAN>(<SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">l</SPAN><SPAN CLASS="syntax13">&quot;</SPAN>)<SPAN CLASS="syntax17">?&gt;</SPAN>. // same as <SPAN CLASS="syntax17">&lt;?php</SPAN> <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax9">date</SPAN>(<SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">l</SPAN><SPAN CLASS="syntax13">&quot;</SPAN>)<SPAN CLASS="syntax18">;</SPAN> <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">br</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  12:</SPAN>  His name is <SPAN CLASS="syntax17">&lt;?</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">name</SPAN><SPAN CLASS="syntax17">?&gt;</SPAN> and he works in <SPAN CLASS="syntax17">&lt;?</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">city</SPAN><SPAN CLASS="syntax17">?&gt;</SPAN>.
<SPAN CLASS="gutter">  13:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  14:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">  15:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
In the example above the PHP shortcut tag is embedded in the HTML tags.
PHP will evaluate the expression contained in the shortcut tags and print their
values.
</p><p>
The resulting HTML code contains the result of the evaluation as shown when
viewing the browser's source.
</p><p>
In this example, the built-in date() function with an "l" option will return
the day of the week.
</p>
</li>
<li><p>
Variables and Mixed Data Types
</p><p>
Remember, strongly typed languages like C++ and Java require that you specify
the type of data you are going to store in a variable when you declare it,
but PHP is loosely typed.
</p><p>
It doesn't expect or allow you to specify the data type when declaring a variable.
You can assign a string to a variable and later assign a numeric value.
PHP doesn't care and at runtime, the PHP interpreter will convert the data to
the correct type.
</p><p>
In the example below, consider the following variable, initialized to the
floating-point value of 5.5. In each successive statement, PHP will convert
the type to the proper data type.
</p><p>
Table: How PHP Converts Data Types
</p>
<blockquote><code><small>
<u><b>
Assignment
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Type Conversion&nbsp;&nbsp;&nbsp;&nbsp;<br>
</b></u>
$item = 5.5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;
Assigned a float<br>
$item = 44;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;
Converted to integer<br>
$item = "Today was bummer";&nbsp;
Converted to string<br>
$item = true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Converted to boolean<br>
$item = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Converted to the null value<br>
</small></code></blockquote>
<p>
This example demonstrates data type conversion. The <b>gettype</b>
built-in function is used to display the data types after PHP has converted
the data to the correct type.
</p>
<h4>
Filename: typeconvert.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE><SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Type Conversion<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">pink</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">size</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">+</SPAN><SPAN CLASS="syntax13">1</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN>  <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">item</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax5">5</SPAN><SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax5">5</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">item</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">type</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax9">gettype</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">item</SPAN>) <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">item</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax5">44</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">item</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">type</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax9">gettype</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">item</SPAN>) <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">item</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">Today</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">was</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">a</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">bummer</SPAN><SPAN CLASS="syntax13">!</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">\</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">item</SPAN><SPAN CLASS="syntax13">\</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">type</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax9">gettype</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">item</SPAN>) <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">item</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax10">true</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  12:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">item</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">type</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax9">gettype</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">item</SPAN>) <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  13:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">item</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax10">NULL</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  14:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">item</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">type</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax9">gettype</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">item</SPAN>) <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutterH">  15:</SPAN>  <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutter">  16:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  17:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
Your instructor will show you the output of this script.
</p></li>
<li><p>
Type Casting
</p><p>
Like C and Java, PHP provides a method to force the conversion of one type
of value to another using the <b>cast</b> operator. More on this when we discuss
PHP operators later!
</p></li>
<li><p>
Concatenation and Variables
</p><p>
To concatenate variables and strings together on the same line,
the dot (.) is used. The dot is an operator because it operates on the
expression on either side of it (each called an operand).
</p><p>
In expressions involving numeric and string values with the dot operator,
PHP converts numeric values to strings. For example, consider the following
statements:
</p>
<blockquote><code><small>
// returns "The temperature is 87"<br>
$temp = "The temperature is ". 87;<br>
// returns "25 days till Christmas"<br>
$message =  25 ." days till Christmas";<br>
</small></code></blockquote>
<p>
The following script demonstrates the use of concatenation. Your instructor
will run it for you.
</p>
<h4>
Filename: concat.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE><SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Concatenation<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">ccff66</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">b</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN>  <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">n</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax5">5</SPAN> <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">cats</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">years</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax5">9</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">The</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">n</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">lived</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">years</SPAN> <SPAN CLASS="syntax18">*</SPAN> <SPAN CLASS="syntax5">5</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>         <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">years</SPAN><SPAN CLASS="syntax13">.</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>    <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">He</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">owns</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">,</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">years</SPAN> <SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">n</SPAN><SPAN CLASS="syntax18">,</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">.</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>  <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutter">  12:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">b</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  13:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  14:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
Notice that the concatenation operator joins all the expressions into one
string to be displayed. The print() function can only take one argument.
</p><p>
But the echo statement takes a list of comma-separated arguments,
which causes the values of $years and $n to be displayed just as with the
concatenation operator.
</p>
</li>
<li><p>
References
</p><p>
Another way to assign a value to a variable is to create a reference (PHP 4).
A reference is when one variable is an alias or pointer to another variable;
that is, they point to the same underlying data.
</p><p>
Changing one variable automatically changes the other.
This might be useful in speeding things up when using large arrays and objects,
but for now, we will not need to use references.
</p><p>
To assign by reference, prepend an ampersand (&amp;) to the beginning of the
old variable that will be assigned to the new variable.
</p><p>
For example: <code>$ref = &amp; $old;</code>
See the example script below and it's output.
</p>
<h4>
Filename: ref.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE><SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>References<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">yellow</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">size</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">+</SPAN><SPAN CLASS="syntax13">1</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN>  <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">husband</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">Honey</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN> <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">Assign</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">the</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">value</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">&quot;Honey&quot;</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">to</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">$husband</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">son</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax18">&amp;</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">husband</SPAN><SPAN CLASS="syntax18">;</SPAN>  <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">Assign</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">a</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">reference</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">to</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">$son.</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>                        <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">Now</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">$husband</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">is</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">a</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">reference</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">or</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">alias</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>                        <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">for</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">$husband.</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">They</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">reference</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">the</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">same</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">data.</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">His</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">wife</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">calls</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">him</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">husband</SPAN><SPAN CLASS="syntax13">,</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">and</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">his</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">Mom</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">calls</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">him</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">son</SPAN><SPAN CLASS="syntax13">.</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">son</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">Lazy</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>     <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">Assign</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">a</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">new</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">value</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">to</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">$son;</SPAN>
<SPAN CLASS="gutter">  12:</SPAN>                       <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">$husband</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">gets</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">the</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">same</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">value</SPAN>
<SPAN CLASS="gutter">  13:</SPAN>    print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">Now</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">his</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">wife</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">and</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">mother</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">call</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">him</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">son</SPAN><SPAN CLASS="syntax13">,</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">husband</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">man</SPAN><SPAN CLASS="syntax13">.</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  14:</SPAN>  <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutterH">  15:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  16:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
One important thing to note is that only named variables can be assigned by
reference, as shown below.
</p>
<code><small>
&nbsp;&nbsp;&lt;?php<br>
&nbsp;&nbsp;&nbsp;&nbsp;$age = 26;<br>
&nbsp;&nbsp;&nbsp;&nbsp;$old = &amp;$age;&nbsp;// This is a valid assignment.<br>
&nbsp;&nbsp;&nbsp;&nbsp;$old = &amp;(26 + 7);&nbsp;// Invalid; references an unnamed expression.<br>
&nbsp;&nbsp;?&gt;<br>
</small></code>
</li><li>
<p>
Variable Variables (Dynamic Variables)
</p><p>
A variable variable is also called a dynamic variable. It is a variable whose
name is stored in another variable.
</p><p>
By using two dollar signs, the variable variable can access the value of the
original variable. Consider the following example:
</p>
<code><small>
&nbsp;&nbsp;$pet ="Bozo";<br>
&nbsp;&nbsp;$clown = "pet";&nbsp;&nbsp;// A variable is assigned the name of another variable<br>
&nbsp;&nbsp;echo $clown;&nbsp;&nbsp;// prints "pet"<br>
&nbsp;&nbsp;echo ${$clown};&nbsp;&nbsp;// prints Bozo<br>
</small></code>
<p>
Dynamic variables are useful when you are dealing with variables that all contain
a similar name such as form variables.
</p><p>
Curly braces can be used to ensure that the PHP parser will evaluate the dollar
signs properly. That is, <b>$clown</b> will be evaluated first, and the first
dollar sign removed, resulting in <b>${pet}</b> , and finally <b>$pet</b>
will be evaulated to "Bozo".
</p><p>
The following example demonstrates how variable variables can be used
dynamically to change the color of a font. Output will be shown by the instructor.
</p>
<h4>Filename: varvars.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE><SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Variable Variables<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">669966</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">face</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">arial</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">size</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">+</SPAN><SPAN CLASS="syntax13">1</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN>  <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">color1</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">red</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">color2</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">blue</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">color3</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">yellow</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>    <SPAN CLASS="syntax8">for</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">count</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax5">1</SPAN><SPAN CLASS="syntax18">;</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">count</SPAN> <SPAN CLASS="syntax18">&lt;=</SPAN> <SPAN CLASS="syntax5">3</SPAN><SPAN CLASS="syntax18">;</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">count</SPAN><SPAN CLASS="syntax18">+</SPAN><SPAN CLASS="syntax18">+</SPAN>)<SPAN CLASS="syntax18">{</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>      <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">primary</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">color</SPAN><SPAN CLASS="syntax13">&quot;</SPAN> <SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">count</SPAN><SPAN CLASS="syntax18">;</SPAN>   <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">Variable</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">variable</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>      print <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">font</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">color</SPAN><SPAN CLASS="syntax13">=</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax13">{</SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">primary</SPAN><SPAN CLASS="syntax13">}</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  12:</SPAN>      <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">The</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">value</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">stored</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">in</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">primary</SPAN><SPAN CLASS="syntax13">:</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax13">{</SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">primary</SPAN><SPAN CLASS="syntax13">}</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  13:</SPAN>    <SPAN CLASS="syntax18">}</SPAN>
<SPAN CLASS="gutter">  14:</SPAN>  <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutterH">  15:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  16:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  17:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
Three variables are defined and assigned colors. Notice the variable names only
differ by the number appended to the name, 1, 2, and 3.
</p><p>
Although we haven't discussed loops yet, this is the best way to illustrate
the use of variable variables (or dynamic variables).
</p><p>
The initial value in the loop, <b>$count</b> , is set to 1.
If the value of $count is less than 3 (<code>$count &lt; 3</code>),
then control goes to line 10.
</p><p>
After the closing curly brace is reached on line 13, control will go back to the
top of the loop and the value of $count will be incremented by 1.
</p><p>
If $count is less than 3, the process repeats, and when $count reaches 3,
the loop terminates.
</p><p>
The first time through the loop, the value of $count is appended to the
string "color" resulting in <b>color1</b> . The value, "color1", is then
assigned to the variable, $primary, so that: <code>$primary = color1;</code>
</p><p>
PHP expands <b>${$primary}</b> as follows:
</p>
<blockquote><code><small>
<ul>
<li>${color1} - First evaluate $primary within the curly braces.</li>
<li>$color1 - Remove the braces and now evaluate $color1 resulting in "red".</li>
<li>The color of the font and the text will be red. Next time through the loop,
the count will go up by one ($count = 2) and the $color2 will be "blue",
and finally $color3 will be "yellow".</li>
</ul>
</small></code></blockquote>
<p>
Note that the curly braces in <b>${$primary}</b> are required.
If you omit them, the variable $$primary will be evaluated as $color1 but not "red".
</p>
</li>
<li><p>
Scope of Variables
</p><p>
Scope refers to where a variable is available within a script.
Scope is important because it prevents important variables from being
accidentally modified in some other part of the program and thus changing
the way the program behaves.
</p><p>
PHP has specific rules to control the visibility of variables.
A local variable is one that exists only within a function.
</p><p>
In PHP, a variable defined at the script level (outside of any functions) is a
global variable, and is available anywhere in the script other than from within
functions.
</p>
</li>
<li><p>
Local Variables
</p><p>
Variables created inside a function are only available inside that function and
not to the rest of the script. They are local to the function and disappear
(go out of scope) when the function exits.
</p><p>
If you have the same name for a variable inside a function as in the main program,
modifying the variable in the function will not affect the one outside the
function.
</p><p>
Likewise, the function does not have access to variables created outside of the
function.
</p><p>
Most of the variables we create will be visible in the script or function in
which they are declared.
</p>
</li>
<li><p>
Global and Environment Variables
</p><p>
Superglobal variables are accessible everywhere in a script and within functions.
They are special variables provided by PHP to help you manage HTML forms,
cookies, sessions, and files, and to get information about your environment
and server.
</p><p>
Table: Some Superglobal Variables
</p>
<code><small>
<u><b>
Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Meaning
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br></b></u>
$GLOBALS&nbsp;&nbsp;&nbsp;
An array of all global variables<br>
$_SERVER&nbsp;&nbsp;&nbsp;
Contains server variables (e.g., REMOTE_ADDR)<br>
$_GET&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Contains form variables sent through GET method<br>
$_POST&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Contains form variables sent through POST method<br>
$_COOKIE&nbsp;&nbsp;&nbsp;
Contains HTTP cookie variables<br>
$_FILES&nbsp;&nbsp;&nbsp;&nbsp;
Contains variables provided to the script via HTTP post file uploads<br>
$_ENV&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Contains the environment variables<br>
$_REQUEST&nbsp;&nbsp;
A merge of the GET variables, POST variables, and cookie variables<br>
$_SESSION&nbsp;&nbsp;
Contains HTTP variables registered by the session module<br>
</small></code>
</li>
<li><p>
Managing Variables
</p><p>
You might want to find out if a variable has been declared,
you might want to delete one that has been set, or check to see if one that
is set is not empty or is a string, number, scalar, and so on.
</p><p>
PHP provides a number of functions to help you manage variables.
</p><p>
Table: Functions for Managing Variables
</p>
<code><small>
<u><b>
Function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
What It Returns
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<br></b></u>
isset()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
True if variable has been set.<br>
empty()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
True if variable is empty: "" (an empty string)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"0" (a string) 0 (an integer)<br>
is_bool()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
True if variable is boolean; that is, contains<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
TRUE or FALSE.<br>
is_callable()&nbsp;&nbsp;
True if variable is assigned the name of a<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
function or an object.<br>
is_double(),&nbsp;&nbsp;&nbsp;
True if variable is a floating-point number.<br>
is_float(),<br>
is_real()<br>
is_int(),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
True if a variable is assigned a whole number.<br>
is_integer(),<br>
is_long()<br>
is_null()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
True if a variable was assigned the NULL value.<br>
is_numeric()&nbsp;&nbsp;&nbsp;
True if the variable was assigned a numeric<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
string value or a number.<br>
is_object()&nbsp;&nbsp;&nbsp;&nbsp;
True if the variable is an object.<br>
is_resource()&nbsp;&nbsp;
True if the variable is a resource.<br>
is_scalar()&nbsp;&nbsp;&nbsp;&nbsp;
True if the value was assigned a single value,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
such as a number.<br>
is_string()&nbsp;&nbsp;&nbsp;&nbsp;
True if a variable is a string of text.<br>
unset()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Unsets or destroys a list of values.<br>
</small></code>
</li>
<li><p>
The isset() Function
</p><p>
The <b>isset()</b> function returns true if a variable has been set and
false if it hasn't.
</p><p>
If the variable has been set to NULL or has no value, it returns false.
If you want to see if a variable has been set to NULL, use the is_null() function.
</p><p>
To ensure that a variable has an initial value, the isset() function can be used
to set a default value. See the examples below.
</p><p>
Format:
<code><small>
bool isset ( variable, variable, variable .... );
</small></code></p>
<p>
The following examples illustrate the use of isset():
</p>
<blockquote><code><small>
$set = isset( $name );&nbsp;&nbsp;// returns true or false<br>
print isset($a, $b, $c);&nbsp;&nbsp;// prints 1 or nothing<br>
</small></code></blockquote>
<h4>
Filename: isset.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE><SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Testing Variables<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">#</SPAN><SPAN CLASS="syntax13">66CC66</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN>  The <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">b</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>isset()<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">b</SPAN><SPAN CLASS="syntax17">&gt;</SPAN> function returns a boolean value. <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">br</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN>  If one or more variables exist and have a value, true is returned;
<SPAN CLASS="gutter">   6:</SPAN>  otherwise false.
<SPAN CLASS="gutter">   7:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">face</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">verdana</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">size</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">+</SPAN><SPAN CLASS="syntax13">1</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">p</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>  <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">first_name</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">John</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">middle_name</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">last_name</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">Doe</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">age</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  12:</SPAN>    <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">state</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax10">NULL</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  13:</SPAN>     print <SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">isset($first_name,$middle_name,$last_name)</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">:</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">'</SPAN>
<SPAN CLASS="gutter">  14:</SPAN>          <SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax8">isset</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">first_name</SPAN><SPAN CLASS="syntax18">,</SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">last_name</SPAN>) <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutterH">  15:</SPAN>     print <SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">isset($age)</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">:</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax8">isset</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">age</SPAN>) <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  16:</SPAN>     print <SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">isset($city</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">)</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">:</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax8">isset</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">city</SPAN>) <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  17:</SPAN>     print <SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">isset($state</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">)</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">:</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax8">isset</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">state</SPAN>) <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  18:</SPAN>  <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutter">  19:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">  20:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
The isset() function returns true if a variable has been set and given a
non-null value.
</p><p>
In this case, all three variables have a value, even the variable assigned an
empty string. If true, 1 is displayed; if false, 0 or nothing is displayed.
</p><p>
Because $age was not given any value, it is implied to be null, and isset()
returns false. $city was never even declared, and $state was assigned NULL;
isset() returns false.
</p><p>
If you want to check explicitly for the NULL value (case insensitive),
use the built-in is_null() function.
</p><p>
The example below illustrates the use of isset() to assign a default value to
a variable.
</p>
<h4>
Filename: default.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE><SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Give Variable a Default Value<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">66C68</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">face</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">verdana</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">size</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">+</SPAN><SPAN CLASS="syntax13">1</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">p</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>   <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>     <SPAN CLASS="syntax8">if</SPAN> (<SPAN CLASS="syntax18">!</SPAN> <SPAN CLASS="syntax8">isset</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">temp</SPAN>)) <SPAN CLASS="syntax18">{</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">temp</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax5">68</SPAN> <SPAN CLASS="syntax18">;</SPAN> <SPAN CLASS="syntax18">}</SPAN> <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">Sets</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">a</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">default</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">value</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>       <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">The</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">default</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">temperature</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">is</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">temp</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">degrees</SPAN><SPAN CLASS="syntax13">.</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>   <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutter">  12:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">p</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  13:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  14:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
The isset() function returns <b>true</b> if <b>$temp</b> has been set.
The "!" operator, the unary "not" operator, reverses the boolean result.
The expression reads, "if $temp is not set, define it with a value of 68."
</p>
</li>
<li><p>
The empty() Function
</p><p>
The <b>empty()</b> function returns true if a variable does not exist,
or exists and has been assigned one of the following:
an empty string " ", 0 as a number, "0" as a string, NULL, or no value at all.
</p><p>
The examples below show the format and demonstrate the use of the empty() function.
</p><p>
Format:
<code><small>
boolean empty ( variable );
</small></code></p>
<blockquote><code><small>
if (empty($result)) {<br>
&nbsp;&nbsp;print "\$result either doesn't exist or is empty";<br>
}<br>
</small></code></blockquote>
<h4>
Filename: empty.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE><SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Testing Variables<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">66C66</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN>  The <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">b</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>empty()<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">b</SPAN><SPAN CLASS="syntax17">&gt;</SPAN> function returns a boolean value. <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">br</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN>  If a variable doesn't exist or is assigned the empty string,
<SPAN CLASS="gutter">   6:</SPAN>  0, <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">br</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>or &quot;0&quot;, NULL, or hasn't been assigned any value;
<SPAN CLASS="gutter">   7:</SPAN>  returns true, otherwise false.
<SPAN CLASS="gutter">   8:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">face</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">verdana</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">size</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">+</SPAN><SPAN CLASS="syntax13">1</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">p</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>   <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>     <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">first_name</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">last_name</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  12:</SPAN>     <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">age</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax5">0</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  13:</SPAN>     <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">salary</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">0</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  14:</SPAN>     <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">state</SPAN> <SPAN CLASS="syntax18">=</SPAN> <SPAN CLASS="syntax10">NULL</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutterH">  15:</SPAN>     print <SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">empty($first_name)</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">:</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax8">empty</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">first_name</SPAN>) <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  16:</SPAN>     print <SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">empty($last_name)</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">:</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax8">empty</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">last_name</SPAN>) <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  17:</SPAN>     print <SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">empty($age)</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">:</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax8">empty</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">age</SPAN>) <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  18:</SPAN>     print <SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">empty($salary)</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">:</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax8">empty</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">salary</SPAN>) <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  19:</SPAN>     print <SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">empty($state</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">)</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">:</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax8">empty</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">state</SPAN>) <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutterH">  20:</SPAN>   <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutter">  21:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">p</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  22:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  23:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
</li>
<li><p>
The unset() Function
</p><p>
The <b>unset()</b> function (technically a language construct) unsets
or destroys a given variable.
</p><p>
It can take a varied number of arguments and behaves a little differently
within functions. As of PHP 4, it has no return value and is considered a
statement.
</p><p>
Format:
<code><small>
void unset ( mixed var [, mixed var [, mixed ...]] )
</small></code></p>
<p>
Examples of the use of unset() are below:
</p>
<blockquote><code><small>
unset($a, $b); // unsets the variables<br>
</small></code></blockquote>
<h4>
Filename: unset.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE><SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   2:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>Testing Variables<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">title</SPAN><SPAN CLASS="syntax17">&gt;</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">head</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">bgcolor</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">66C66</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN>  The <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">b</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>unset()<SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">b</SPAN><SPAN CLASS="syntax17">&gt;</SPAN> function destroys a variable. <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">br</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">font</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">face</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">verdana</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17"> </SPAN><SPAN CLASS="syntax17">size</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">+</SPAN><SPAN CLASS="syntax13">1</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>   <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">p</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>   <SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>     <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">first_name</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">John</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>     <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">last_name</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">Doe</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>     <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">age</SPAN><SPAN CLASS="syntax18">=</SPAN><SPAN CLASS="syntax5">35</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  11:</SPAN>     <SPAN CLASS="syntax9">unset</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">first_name</SPAN><SPAN CLASS="syntax18">,</SPAN> <SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">last_name</SPAN>)<SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  12:</SPAN>     print <SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">After</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">unset()</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">was</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">used,</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">isset($first_name,$last_name)</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">'</SPAN>
<SPAN CLASS="gutter">  13:</SPAN>          <SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax8">isset</SPAN>(<SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">first_name</SPAN><SPAN CLASS="syntax18">,</SPAN><SPAN CLASS="syntax10">$</SPAN><SPAN CLASS="syntax10">last_name</SPAN>) <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">returns</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">false</SPAN><SPAN CLASS="syntax13">.</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  14:</SPAN>   <SPAN CLASS="syntax17">?&gt;</SPAN>
<SPAN CLASS="gutterH">  15:</SPAN>  <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">p</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  16:</SPAN> <SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">body</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
<SPAN CLASS="gutter">  17:</SPAN><SPAN CLASS="syntax17">&lt;</SPAN><SPAN CLASS="syntax17">/</SPAN><SPAN CLASS="syntax17">html</SPAN><SPAN CLASS="syntax17">&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
The built-in unset() function will destroy the variables listed as arguments.
</p></li>
<li><p>
Predefined Variables
</p><p>
PHP provides a number of predefined variables, some that are not fully
documented because they depend on which server is running, its configuration,
and so on.
</p><p>
Some are defined in the php.ini file. These variables describe the environment,
server, browser, version number, configuration file, and so on.
</p><p>
Table: Predefined Variables
</p>
<blockquote>
<table>
<tr>
<td><u><b><code>
Variable
</b></u></code></td>
<td><u><b><code>
What It Does
</b></u></code></td>
</tr><tr>
<td><code>
AUTH_TYPE</td>
<td><code>
If running the Apache server as a module,
</code></td>
</tr><tr>
<td></td><td><code>
this is set to the authentication type.
</code></td>
</tr><tr>
<td><code>
DOCUMENT_ROOT
</code></td>
<td><code>
The full path of the Web's document root,
</code></td>
</tr><tr>
<td></td><td><code>
normally where HTML pages are stored and
</code></td>
</tr><tr>
<td></td><td><code>
defined in the server's configuration file.
</code></td>
</tr><tr>
<td><code>
HTTP_USER_AGENT
</code></td>
<td><code>
Identifies the type of Web browser to the</code></td>
</tr><tr>
<td></td><td><code>
server when it requests a file.
</code></td>
</tr><tr>
<td><code>
HTTP_REFERER
</code></td>
<td><code>
The full URL of the page that contained the
</code></td>
</tr><tr>
<td></td><td><code>
link to this page. Of course if there isn't
</code></td>
</tr><tr>
<td></td><td><code>
a referring page, this variable would not exist.
</code></td>
</tr><tr>
<td><code>
REMOTE ADDRESS
</code></td>
<td><code>
The remote IP address of the client machine
</code></td>
</tr><tr>
<td></td><td><code>
that requested the page.
</code></td>
</tr>
</table>
</blockquote>
<p>
See the full list of predefined variables at:
<a href="http://www.phpfreaks.com/PHP_Reference/Predefined-Variables/8.php">http://www.phpfreaks.com/PHP_Reference/Predefined-Variables/8.php</a>
</p><p>
There many more predefined variables; which ones are set depends on your PHP
configuration. The function <b>phpinfo()</b> can be used to retrieve built-in
variables that have been set.
</p>
<blockquote><code>
&lt;?php<br>
&nbsp;&nbsp;phpinfo(INFO_VARIABLES);<br>
?&gt;<br>
</code></blockquote>
</li>
<li><p>
Constants
</p><p>
Some real-world constants, such as <b>pi</b>, the speed of light, the number
of inches in a foot, and the value of midnight, are values that don't change.
</p><p>
PHP not only provides its own predefined constants but lets you create your own.
Using constants makes it easy to write and maintain your programs.
</p></li>
<li><p>
What Is a Constant?
</p><p>
Unlike variables, a constant is a value that, once set, cannot be changed or
unset during the execution of your script.
</p><p>
An example of a constant is the value of pi or the version of PHP you are using.
Constants are very useful because they are visible throughout a program
(global in scope) and their values don't change.
</p><p>
For example, a constant might be defined for the document root of your server,
the name of your site, or the title, author, and copyright year of this book.
</p><p>
Once defined, those values are fixed.
</p><p>
You can define constants at the top of your program or in another file that
can be included in your script.
</p><p>
Later if a constant value needs to be modified, once you change its value in
the program, then when the program is executed, the new value will be reflected
wherever the constant is used throughout the program, thus facilitating program
maintenance.
</p></li>
<li><p>
Creating Constants with the define() Function
</p><p>
PHP constants are defined as words, and by convention, capitalized.
</p><p>
Like variables, they are case sensitive and consist of uppercase and lowercase
letters, numbers, and the underscore. Like variables, they cannot start with
a number.
</p><p>
Unlike variables, constants are not preceded by a dollar sign and are not
interpolated when placed within quotes.
</p><p>
Constants are global in scope, meaning they are available for use anywhere
in a PHP script.
</p><p>
The only way that you can create a constant is with he PHP built-in <b>define()</b>
function. Only a single, scalar value can be assigned to a constant,
including strings, integers, floats, and booleans.
</p><p>
The <b>define()</b> function creates a named constant. The first argument is
the name of the constant and the second argument is the value that will be
assigned to it.
</p><p>
Constants are normally case sensitive, but you can use an optional third
argument of TRUE to turn off case sensitivity.
</p><p>
Format: <code><small>
bool define ( string name, mixed value [, bool case_insensitive] )
</small></code>
</p><p>
Here are examples:
</p>
<blockquote><code><small>
// defines document root<br>
define('DOC_ROOT','/http://artemis/~ellie/public_html');<br>
// defines the include folder<br>
define('INCLUDES', DOC_ROOT .'/../includes');<br>
</small></code></blockquote>
<h4>
Filename: define.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE><SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutter">   2:</SPAN>  <SPAN CLASS="syntax9">define</SPAN>(<SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">ISBN</SPAN><SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax18">,</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">0</SPAN><SPAN CLASS="syntax13">-</SPAN><SPAN CLASS="syntax13">13</SPAN><SPAN CLASS="syntax13">-</SPAN><SPAN CLASS="syntax13">140162</SPAN><SPAN CLASS="syntax13">-</SPAN><SPAN CLASS="syntax13">9</SPAN><SPAN CLASS="syntax13">&quot;</SPAN>)<SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   3:</SPAN>  <SPAN CLASS="syntax9">define</SPAN>(<SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">TITLE</SPAN><SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax18">,</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">JavaScript</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">by</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">Example</SPAN><SPAN CLASS="syntax13">&quot;</SPAN> )<SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN>  <SPAN CLASS="syntax8">if</SPAN> (<SPAN CLASS="syntax9">defined</SPAN>(<SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">ISBN</SPAN><SPAN CLASS="syntax13">'</SPAN>) <SPAN CLASS="syntax18">and</SPAN> <SPAN CLASS="syntax9">defined</SPAN>(<SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">TITLE</SPAN><SPAN CLASS="syntax13">'</SPAN>))<SPAN CLASS="syntax18">{</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN>    print ISBN <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>    print TITLE <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>  <SPAN CLASS="syntax18">}</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>  <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">Can't</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">change</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">TITLE,</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">and</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">can't</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">redefine</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">it.</SPAN>
<SPAN CLASS="gutter">   9:</SPAN>  <SPAN CLASS="syntax9">define</SPAN>(<SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax13">TITLE</SPAN><SPAN CLASS="syntax13">'</SPAN><SPAN CLASS="syntax18">,</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">PHP</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">by</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">Example</SPAN><SPAN CLASS="syntax13">&quot;</SPAN>)<SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutterH">  10:</SPAN>  print TITLE<SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">  11:</SPAN><SPAN CLASS="syntax17">?&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
Two constants are defined, ISBN and TITLE, the first argument to the function.
The second argument is the value being assigned to each of the constants.
</p><p>
Once set, there is no way to change it within that script.The only way to change
the value of a constant is to edit the script and modify the <b>define()</b>
function call that created it.
</p><p>
The <b>defined()</b> function checks whether a constant has been set.
It returns TRUE if the constant has been defined; otherwise, FALSE.
</p></li>
<li><p>
The constant() Function
</p><p>
The <b>constant()</b> function returns that value of a constant. This function can
be helpful if you don't know the name of the constant because its name was stored
in a variable or was returned from a function.
</p><p>
Format: <code><small>mixed constant ( string name )</small></code>
</p><p>
Below is an example:
</p>
<blockquote><code><small>
define (ISBN, "0-13-140162-9");<br>
$value=constant(ISBN);&nbsp;&nbsp;// Returns 0-13-140162-9<br>
</small></code></blockquote>
</li>
<li><p>
Predefined and "Magic" Constants
</p><p>
PHP comes with a number of predefined constants as shown in the second table below.
They provide information that doesn't change such as the name of the script file,
the version of PHP and the operating system, and so on.
</p><p>
There are five predefined constants called magic constants. These are constants
that change depending on how they are used in a program.
</p><p>
They cannot be enclosed in quotes and are not case sensitive.
The name of the contant is enclosed in two underscores on both sides.
</p><p>
Table: Magic Constants
</p>
<table>
<tr><td><u><b><code>
Name</code></b></u></td>
<td><u><b><code>
Description</code></b></u></td>
</tr>
<tr><td><code>
__LINE__</code></td>
<td><code>
The current line number of the file.</code></td></tr>
<tr><td><code>
__FILE__</code></td>
<td><code>
The full path and filename of the file. If used inside an include,
the name of the included file is returned.</code></td></tr>
<tr><td><code>
__FUNCTION__</code></td>
<td><code>
The function name (added in PHP 4.3.0). As of PHP 5 this constant returns
the function name as it was declared (case sensitive).
In PHP 4 its value is always lowercased.</code></td></tr>
<tr><td><code>
__CLASS__</code></td>
<td><code>
The class name (added in PHP 4.3.0). As of PHP 5 this constant returns the
class name as it was declared (case sensitive). In PHP 4 its value is always
lowercased.</code></td></tr>
<tr><td><code>
__METHOD__</code></td>
<td><code>
The class method name (added in PHP 5.0.0). The method name is returned as
it was declared (case sensitive).</code></td></tr>
</table>
<p>
PHP has several special built-in constants described in the table below.
</p><p>
Table: Built-In Constants
</p>
<table>
<tr><td><code><u><b>
Name</b></u></code></td>
<td><code><u><b>
Description</b></u></code></td>
</tr><tr>
<td><code>
PHP_VERSION&nbsp;&nbsp;</code></td>
<td><code>
The version of the PHP parser currently running</code></td>
</tr><tr>
<td><code>
PHP_OS</code></td>
<td><code>
The operating system of the server on which the PHP parser is running</code></td>
</tr><tr>
<td><code>
PHP_OS</code></td>
<td><code>
The name of the operating system on which the PHP parser is executing;
e.g., Linux</code></td>
</tr><tr>
<td><code>
TRUE</code></td>
<td><code>
A true value.</code></td>
</tr><tr>
<td><code>
FALSE</code></td>
<td><code>
A false value.</code></td>
</tr>
</table>
<p>
The script below shows how the predefined constants can be used to give
information to the browser. It's output will be displayed by your instructor.
</p>
<h4>
Filename: constants.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE><SPAN CLASS="gutter">   1:</SPAN><SPAN CLASS="syntax17">&lt;?php</SPAN>
<SPAN CLASS="gutter">   2:</SPAN>  <SPAN CLASS="syntax2">//</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">Using</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">PHP</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">built-in</SPAN><SPAN CLASS="syntax2"> </SPAN><SPAN CLASS="syntax2">constants</SPAN>
<SPAN CLASS="gutter">   3:</SPAN>  <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">PHP</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">version</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">=</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN> PHP_VERSION <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   4:</SPAN>  <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">Server</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">operating</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">system</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">=</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN> PHP_OS <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutterH">   5:</SPAN>  <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">Current</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">file</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">name</SPAN><SPAN CLASS="syntax13">=</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax10">__FILE__</SPAN> <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   6:</SPAN>  <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">Current</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">line</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">number</SPAN><SPAN CLASS="syntax13">=</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax10">__LINE__</SPAN> <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   7:</SPAN>  <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">TRUE</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">=</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax10">TRUE</SPAN> <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   8:</SPAN>  <SPAN CLASS="syntax8">echo</SPAN> <SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">false</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">=</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">.</SPAN> <SPAN CLASS="syntax10">FALSE</SPAN> <SPAN CLASS="syntax18">.</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax13">&lt;</SPAN><SPAN CLASS="syntax13">br</SPAN><SPAN CLASS="syntax13"> </SPAN><SPAN CLASS="syntax13">/</SPAN><SPAN CLASS="syntax13">&gt;</SPAN><SPAN CLASS="syntax13">&quot;</SPAN><SPAN CLASS="syntax18">;</SPAN>
<SPAN CLASS="gutter">   9:</SPAN><SPAN CLASS="syntax17">?&gt;</SPAN>
</PRE>
</div>
</small></blockquote>
<p>
Your instructor will show you the output of the predefined constants script.
</p>
</li>
</ul>
</div>
</body>
</html>

