<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta name="generator" content="HTML Tidy, see www.w3.org">
  <title>Using Encryption in PHP</title>
  <link href="../../../css/basic.css" rel="stylesheet" type="text/css">
  <script type="text/javascript" language="JavaScript">
<!--
function putSemester() {
var today=new Date();
var thisMonth=today.getMonth()+1;
var thisYear=today.getFullYear();
if(thisMonth <=6) {
return "Spring, " + thisYear;
}
else {
return "Fall, " + thisYear;
}
}//-->
  </script>
  <style type="text/css">
<!--
.bgStripes {
background-image:url(../../../images/Xstripes.gif);
background-attachment: fixed;
}
body {
background-color:white;
}
strong {
font-family: Arial, Helvetica, sans-serif;
}
.table1 {
font-family:Arial, Helvetica, sans-serif;
font-size: small;
}
.table2 {
font-family:Arial, Helvetica, sans-serif;
font-size: small;
text-align:center;
}
td.cen {
text-align:center;
}
.small_title {
font-family: Arial, Helvetica, sans-serif;
font-size:x-small;
font-weight:bold;
}
.med_title {
font-family: Arial, Helvetica, sans-serif;
font-size:medium;
font-weight:bold;
text-align:center;
color:darkblue;
}
-->
  </style>
</head>
<body style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">
<table class="bgStripes" border="0" width="100%">
  <tbody>
    <tr name="firstRow">
      <td valign="top" width="80">
      <p class="small_title">
      <script type="text/javascript">
<!--
document.write(putSemester());
-->
</script></p>
</td>
<td>
<p class="med_title"><span
 style="color: darkblue; font-size: medium; font-weight: bold;">
PHP Web Development with MySQL</span></p>
</td>
<td align="right" valign="top" width="80">
<p class="small_title">
3 Credits</p>
</td>
</tr>
<tr>
<td colspan="3" height="10">
<p class="small_title" align="center">152-166</p>
</td>
</tr>
</tbody>
</table>
<!--The heading for the slides --> <br>
<table class="headTable1" border="0">
  <tbody>
    <tr>
      <td width="100"><a href="authent1.html"><img alt=""
 src="../../../images/btn_lArrow.gif" border="0"></a><a
 href="index.html"><img alt="" src="../../../images/btn_upArrow.gif"
 border="0"></a><a href="htaccess.html"><img alt=""
 src="../../../images/btn_rArrow.gif" border="0"></a></td>
<td>
<p>
Using Encryption in PHP
</p>
</td>
</tr>
</tbody>
</table>
<br>
<div class="disp1">
<ul class="slidesUl1">
<li>
<p>
A simple, but useful, task you can use to demonstrate encryption is sending
encrypted email. For many years, the de facto standard for encrypted email
has been PGP, which stands for Pretty Good Privacy. Philip R. Zimmermann
wrote PGP specifically to add privacy to email.</p>
<p>
Freeware versions of PGP are available, but you should note that it is not
Free Software. The freeware version can legally be used only for noncommercial use.
If you are a U.S. citizen residing in the United States or a Canadian citizen
residing in Canada, you can obtain the freeware version from:</p>
<blockquote><code>
http://web.mit.edu/network/pgp.html<br>
</code></blockquote>
<p>
If you want to use PGP for commercial use, you can get a commercial license from PGP
Corporation. For details, see:</p>
<blockquote><code>
http://www.pgp.com<br>
</code></blockquote>
<p>
To obtain the freeware version of PGP for use outside the United States and Canada, see
the list of international download sites at the international PGP page:</p>
<blockquote><code>
http://www.pgpi.org<br>
</code></blockquote>
<p>
An open source alternative to PGP has more recently become available. Gnu Privacy
Guard, known as GPG, is a free(as in beer) and Free(as in speech) replacement for PGP.
It contains no patented algorithms and can be used commercially without restriction.</p>
<p>
The two products perform the same task in fairly similar ways. If you intend to use
the command-line tools, the differences might not matter, but each has different
interfaces such as plug-ins for email programs that automatically decrypt
email when it is received.</p>
<p>
GPG is available from:</p>
<blockquote><code>
http://www.gnupg.org<br>
</code></blockquote>
<p>
You can use the two products together, creating an encrypted message using
GPG for somebody using PGP (as long as it is a recent version) to decrypt.
Because we are interested in the creation of messages at the web server,
we provide an example here using GPG. Using PGP instead does not require many changes.</p>
<p>
As well as the usual requirements for examples in this book, you need to have
GPG available for this code to work. GPG might already be installed on your system.
If it is  not, do nott be concerned -  the installation procedure is straightforward,
but the setup can be a bit tricky.</p>
</li>
<li>
<p>
Installing GPG</p>
<p>
To add GPG to your Linux machine, you can download the appropriate archive file
from <code>www.gnupg.org</code> . Depending on whether you choose the
"<code>.tar.gz</code>" or "<code>.tar.bz2</code>" archive, you need to use
<code>gunzip</code> or <code>tar</code> to extract the files from the archive.</p>
<p>
To compile and install the program, use the same commands used to install
most Linux programs from source code:</p>
<blockquote><code>
./configure<br>
make<br>
make install<br>
</code></blockquote>
<p>
If you are not the root user, you need to run the configure script with the
<code>--prefix</code> option as follows:</p>
<blockquote><code><small>
./configure --prefix=/path/to/your/directory<br>
</small></code></blockquote>
<p>
You use this option because a nonroot user will not have access to the
default directory for GPG.</p>
<p>
If all goes well, GPG will be compiled and the executable copied to
<code>/usr/local/bin/gpg</code> or the directory that you specified.
You can change many options. See the GPG documentation for details.</p>
<p>
For a Windows server, the process is even easier. Download the zip file,
unzip it, and place <code>gpg.exe</code> somewhere in your PATH
(<code>C:\Windows\</code> or similar will be fine). Create a directory at
<code>C:\gnupg</code> . Then open a command prompt and type: <code>gpg</code></p>
<p>
You also need to install GPG or PGP and generate a key pair on the system where
you plan to check mail.</p>
<p>
On the web server, you will find very few differences between the command-line
versions of GPG and PGP, so you might as well use GPG because it is free.
On the machine where you read mail, you might prefer to buy a commercial
version of PGP to have a nicer graphical user interface plug-in to your mail reader.</p>
<p>
If you do not already have a key pair, generate one on your mail reading machine.
Recall that a key pair consists of a public key, which other people
(and your PHP script) use to encrypt mail before sending it to you,
and a private key, which you use to either decrypt received messages or
sign outgoing mail. It is important that you generate the key on your
mail-reading machine rather than on your web server because your private
key should not be stored on the web server.</p>
<p>
If you are using the command-line version of GPG to generate your keys,
enter the following command:</p>
<blockquote><code>
gpg --gen-key<br>
</code></blockquote>
<p>
You are prompted with a number of questions. Most of them have a default answer that
you can accept. On separate lines, you are asked for your real name,
your email address, and a comment, which will be used to name the key.
(The textbook primary author's key is
"<code>Luke Welling &lt;luke@tangledweb.com.au&gt;</code>".
I am sure that you can see the pattern. Had he provided a
comment, too, it would be between the name and address.)</p>
<p>
To export the public key from your new key pair, you can use the following
command:</p>
<blockquote><code>
gpg --export &gt; filename<br>
</code></blockquote>
<p>
This command gives you a binary file suitable for importing into the GPG or
PGP key ring on another machine. If you want to email this key to people
so that they can import it into their key rings, you can instead create
an ASCII version like this:</p>
<blockquote><code>
gpg --export -a &gt; filename<br>
</code></blockquote>
<p>
Having extracted the public key, you can upload the file to your account on
the web server by using FTP or <code>scp</code> .</p>
<p>
The following commands assume that you are using Unix or Linux.
The steps are the same for Windows, but directory names and system commands
are different. First, log in to your account on the web server and change
the permissions on the file so that other users will be able to read it. Type:</p>
<blockquote><code>
chmod 644 filename<br>
</code></blockquote>
<p>
You need to create a key ring so that the user who your PHP scripts get
executed as can use GPG.  Which user this is depends on how your server
is set up. It is often the user <code>nobody</code> but could be something else.</p>
<p>
Change to the web server user. You need to have root access to the server
to do this. On many systems, the web server runs as user <code>nobody</code> .
The following examples assume this user. (You can change it to the appropriate
user on your system.) If this is the case on your system, type:</p>
<blockquote><code>
su root<br>
su nobody<br>
</code></blockquote>
<p>
Create a directory where "nobody" can store his key ring and other GPG configuration
information. It needs to be in nobody's home directory.</p>
<p>
The home directory for each user is specified in file <code>/etc/passwd</code> .
On many Linux systems, nobody's home directory defaults to the root directory (/),
which "nobody" does not have permission to write to. On many BSD systems,
nobody's home directory defaults to <code>/nonexistent</code> ,
which, because it does not exist, cannot be written to. On our system, "nobody"
has been assigned the home directory <code>/tmp</code> . You need to make sure
your web server user has a home directory that (s)he can write to. Type:</p>
<blockquote><code>
cd ~<br>
mkdir .gnupg<br>
</code></blockquote>
<p>
The user "nobody" needs a signing key of her/his own. To create this key,
run this command again:</p>
<blockquote><code>
gpg --gen-key<br>
</code></blockquote>
<p>
Because your "nobody" user probably receives very little personal email,
you can create a signing-only key for him/her. This key's only purpose is to
allow you to trust the public key you extracted earlier.</p>
<p>
To import the pubic key exported earlier, use the following command:</p>
<blockquote><code>
gpg --import  filename<br>
</code></blockquote>
<p>
To tell GPG that you want to trust this key, you need to edit the key's
properties using this command:</p>
<code>
gpg --edit-key 'Luke Welling &lt;luke@tangledweb.com.au&gt;'<br>
</code>
<p>
On this line, the text in single quotation marks is the name of the key.
Obviously, the name of your key will not be 
"<code>Luke Welling &lt;luke@tangledweb.com.au&gt;</code>", but a
combination of the name, comment, and email address you provided when generating it.</p>
<p>
Options within this program include <code>help</code> , which describes the
available commands: <code>trust , sign ,</code> and <code>save</code> .</p>
<p>
Type <code>trust</code> and tell GPG that you trust your key fully.
Type <code>sign</code> to sign this public key using nobody's private key.
Finally, type <code>save</code> to exit this program, keeping your changes.</p>
</li>
<li>
<p>
Testing GPG</p>
<p>
GPG should now be set up and ready to use. Creating a file containing some text and
saving it as <b>test.txt</b> will allow you to test it.</p>
<p>
Typing the following command (modified to use the name of your key):</p>
<code>
gpg -a --recipient 'Luke Welling &lt;luke@tangledweb.com.au&gt;' --encrypt test.txt<br>
</code>
<p>
should give you the warning:</p>
<blockquote><code>
gpg: Warning: using insecure memory!<br>
</code></blockquote>
<p>
and create a file named <b>test.txt.asc</b>. If you open <b>test.txt.asc</b>,
you should see an encrypted message like this:</p>
<blockquote><code><small>
-----BEGIN PGP MESSAGE-----<br>
Version: GnuPG v1.0.3 (GNU/Linux)<br>
Comment: For info see http://www.gnupg.org<br>
hQEOA0DU7hVGgdtnEAQAhr4HgR7xpIBsK9CiELQw85+k1QdQ+p/FzqL8tICrQ+B3<br>
0GJTEehPUDErwqUw/uQLTds0r1oPSrIAZ7c6GVkh0YEVBj2MskT81IIBvdo95OyH<br>
K9PUCvg/rLxJ1kxe4Vp8QFET5E3FdII/ly8VP5gSTE7gAgm0SbFf3S91PqwMyTkD<br>
/2oJEvL6e3cP384s0i8lrBbDbOUAAhCjjXt2DX/uX9q6P18QW56UICUOn4DPaW1G<br>
/gnNZCkcVDgLcKfBjbkB/TCWWhpA7o7kX4CIcIh7KlIMHY4RKdnCWQf271oE+8i9<br>
cJRSCMsFIoI6MMNRCQHY6p9bfxL2uE39IRJrQbe6xoEe0nkB0uTYxiL0TG+FrNrE<br>
tvBVMS0nsHu7HJey+oY4Z833pk5+MeVwYumJwlvHjdZxZmV6wz46GO2XGT17b28V<br>
wSBnWOoBHSZsPvkQXHTOq65EixP8y+YJvBN3z4pzdH0Xa+NpqbH7q3+xXmd30hDR<br>
+u7t6MxTLDbgC+NR<br>
=gfQu<br>
-----END PGP MESSAGE-----<br>
</small></code></blockquote>
<p>
You should be able to transfer this file to the system where you generated
the key initially and run:</p>
<blockquote><code>
gpg test.txt.asc<br>
</code></blockquote>
<p>
to retrieve your original text. The text will be written to a file with the
same name as it had before - in this case, <b>test.txt</b> .
To have the text echoed to the screen, use the "<code>-d</code>" flag:</p>
<blockquote><code>
gpg -d test.txt.asc<br>
</code></blockquote>
<p>
To place the text in a file of your choice rather than the default name,
you can use the "<code>-o</code>" flag as well and specify an output file like this:</p>
<blockquote><code>
gpg -do test.out test.txt.asc<br>
</code></blockquote>
<p>
Note that the output file is named first.</p>
<p>
If you have GPG set up so that the user your PHP scripts run as can use it
from the command line, you are most of the way there. If this setup is not working,
see your system administrator or the GPG documentation.</p>
<p>
The scripts <b>private_mail.php</b> and
<a href="../examples/send_private_mail_php.html">send_private_mail.php</a>
enable people to send encrypted email by using PHP to call GPG.</p>
<p>
Listing: private_mail.php<br>
The HTML Form to Send Encrypted Email</p>
<blockquote><code><small>
&lt;html&gt;<br>
&lt;body&gt;<br>
&nbsp;&lt;h1&gt;Send Me Private Mail&lt;/h1&gt;<br><br>
&lt;?php<br>
&nbsp;&nbsp;// you might need to change this line, if you do not use<br>
&nbsp;&nbsp;// the default ports, 80 for normal traffic and 443 for SSL<br>
&nbsp;&nbsp;if($_SERVER['SERVER_PORT'] != 443)<br>
&nbsp;&nbsp;&nbsp;&nbsp;echo '&lt;p&gt;&lt;font color = red&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WARNING: you have not connected to this page using SSL.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Your message could be read by others.&lt;/font&gt;&lt;/p&gt;";<br>
?&gt;<br><br>
&nbsp;&nbsp;&lt;form method = post action = "send_private_mail.php"&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Your email address:&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&lt;input type = text name = from size = 38&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Subject:&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&lt;input type = text name = title size = 38&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;Your message:&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&lt;textarea name = body cols = 30 rows = 10&gt;<br>
&nbsp;&nbsp;&nbsp;&lt;/textarea&gt;&lt;br&gt;<br>
&nbsp;&nbsp;&nbsp;&lt;input type = submit value = "Send!"&gt;<br>
&nbsp;&nbsp;&lt;/form&gt;<br>
&lt;/body&gt;<br>
&lt;/html&gt;<br>
</small></code></blockquote>
<p>
To make this code work for you, you need to change a few things.
Email will be sent to the address in <code>$to_email</code> .</p>
<p>
In file <b>send_private_mail.php</b>, you need to change the line:</p>
<blockquote><code>
putenv('GNUPGHOME=/tmp/.gnupg');<br>
</code></blockquote>
<p>
to reflect the location of your GPG key ring. On our system, the web server runs as the
user "nobody" and has the home directory <code>/tmp/</code> .</p>
<p>
We used the function <code>tempnam()</code> to create a unique temporary filename.
You can specify both the directory and a filename prefix. You are going to
create and delete these files in about 1 second, so it is not very important
what you call them as long as the names are unique. We specified a prefix of
"pgp" but let PHP use the system temporary directory.</p>
<p>
The statement:</p>
<blockquote><code><small>
$command = '/usr/local/bin/gpg -a '.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
'--recipient "Luke Welling &lt;luke@tangledweb.com.au&gt;" '.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
'--encrypt -o $outfile $infile';<br>
</small></code></blockquote>
<p>
sets up the command and parameters that will be used to call GPG.
You need to modify this statement to suit your situation. As when you used
it on the command line, you need to tell GPG which key to use to encrypt
the message.</p>
<p>
The statement:</p>
<blockquote><code>
system($command, $result);<br>
</code></blockquote>
<p>
executes the instructions stored in <code>$command</code> and stores the
return value in <code>$result</code> . You could ignore the return value,
but it allows you to use an "if" statement to tell the user that
something went wrong.</p>
<p>
After you finish with the temporary files you use, you delete them using the
<code>unlink()</code> function. This means that your user's unencrypted
email is stored on the server for a short time. If the server fails during
execution, it is even possible that the file could be left on the server.</p>
<p>
While you are thinking about the security of your script, it is important to consider
all flows of information within your system. GPG encrypts your email and allows your
recipient to decrypt it, but how does the information originally come from the sender?
If you are providing a web interface to send GPG-encrypted mail, the flow of
information will look something like this:</p>
<blockquote><small><pre>
+----------+       +--------+       +-----------+       +-----------+
| Sender's |   1   |  Web   |   2   |Recipient's|   3   |Recipient's|
| Browser  |------>| Server |------>|   Mail    |------>|   Mail    |
|          |       |        |       |  Server   |       |  Client   |
+----------+       +--------+       +-----------+       +-----------+
</pre></small></blockquote>
<p>
In an encrypted email application, the message is sent via the Internet
three times. Each arrow represents the message being sent from one machine
to another. Each time the message is sent, it travels over the Internet and
might pass through a number of intermediary networks and machines.</p>
<p>
The script you are looking at here exists on the machine labeled "Web Server"
in the diagram. At the web server, the message is encrypted using the
recipient's public key. It is then sent via SMTP to the recipient's mail server.
The recipient connects to her/his mail server, probably using POP or IMAP,
and downloads the message using a mail reader. Here, (s)he decrypts the message
using his/her private key.</p>
<p>
The data transfers are labeled 1, 2, and 3 on the diagram above. For stages 2 and 3,
the information being transmitted is a GPG-encrypted message and is of little
value to anybody who does not have the private key. For transfer 1,
the message being transmitted is the text that the sender entered in the form.</p>
<p>
If the information is important enough that you need to encrypt it for the second
and third leg of its journey, sending it unencrypted for the first leg is a
bit silly. Therefore, this script belongs on a server that uses SSL.</p>
<p>
If you attempt connection to this script without SSL, it will provide a
warning message. It does this by checking the value of: <code>$_SERVER['SERVER_PORT']</code>
SSL connections use port 443. Any other connection will cause an error.</p>
<p>
Instead of providing an error message, you could deal with this situation in other
ways. You could redirect the user to the same URL via an SSL connection. You could
also choose to ignore it because it is not important if the form was delivered using a
secure connection. What is usually important is that the information the user
typed into the form are sent to you securely. You could simply have given a
complete URL as the action of your form.</p>
<p>
Currently, the open form tag looks like this:</p>
<blockquote><code><small>
&lt;form method = post action = "send_private_mail.php"&gt;<br>
</small></code></blockquote>
<p>
You could alter it to send data via SSL even if the user connected without SSL,like this:</p>
<blockquote><code><small>
&lt;form method = post action = "https://webserver/send_private_mail.php"&gt;<br>
</small></code></blockquote>
<p>
If you hard-code the complete URL like this, you can be assured that visitors'
data will be sent using SSL, but you will need to modify the code every time
you use it on a different server or even in a different directory.</p>
<p>
Although in this case, and many others, it is not important that the empty
form is sent to the user via SSL, sending it this way is usually a good idea.
Seeing the little padlock symbol in the status bar of their browsers reassures
people that their information will be sent securely. They should not need to
look at your HTML source and see the action attribute of the form to know
whether their data will be safe!</p>
</li>
<li>
<p>
Further Reading</p>
<p>
The specification for SSL version 3.0 is available from Netscape at:</p>
<blockquote><code>
http://home.netscape.com/eng/ssl3/<br>
</code></blockquote>
<p>
If you would like to know more about how networks and networking protocols work, a
classic introductory text is Andrew S. Tanenbaum's "Computer Networks".
</p>
</li>
</ul>
</div>
</body>
</html>
