<!DOCTYPE html PUBLIC "-//IETF//DTD HTML 2.0//EN">
<html>
<head>
<meta name="generator" content="HTML Tidy, see www.w3.org">
<title>Repetition, Files and Forms</title>
<link href="../../../css/basic.css" rel="stylesheet" type="text/css">
<script type="text/javascript" language="JavaScript">
<!--
function putSemester() {
    var today=new Date();
    var thisMonth=today.getMonth()+1;
    var thisYear=today.getFullYear();
    if(thisMonth <=6) {
        return "Spring, " + thisYear;
    }
    else {
       return "Fall, " + thisYear;
    }
}//-->
</script>
<style type="text/css">
<!--
    .bgStripes {
        background-image:url(../../../images/Xstripes.gif);
        background-attachment: fixed;
    }
    body {
        background-color:white;
    }
    strong {
        font-family: Arial, Helvetica, sans-serif;
    }
-->
</style>
</head>
<body style="color: rgb(0, 0, 0); background-color: rgb(255, 255, 255);">
<table class="bgStripes" border="0" width="100%">
<tbody>
<tr name="firstRow">
<td valign="top" width="80"><span style="font-size: x-small; font-weight: bold;">
<script type="text/javascript">
<!--
    document.write(putSemester());
-->
</script>
</span> <br>
</td>
<td style="text-align: center;"><span style="font-weight: bold; font-size: medium; color: darkblue;">
PHP Web Development with MySQL
</span> </td>
<td align="right" valign="top" width="80"><span style="font-size: x-small; font-weight: bold;">
3 Credits</span> </td>
</tr>
<tr>
<td colspan="3" style="text-align: center;"><span style="font-size: xx-small; font-weight: bold;">
152-166</span> </td>
</tr>
</tbody>
</table>
<!--The heading for the slides --> <br>
<table class="headTable1" border="0">
<tbody>
<tr>
<td width="100"><a href="index.html"><img alt="" src="../../../images/btn_lArrow.gif" border="0"></a><a href="index.html"><img alt="" src="../../../images/btn_upArrow.gif" border="0"></a><a href="regex1.html"><img alt="" src="../../../images/btn_rArrow.gif" border="0"></a></td>
<td>Repeating Patterns and Regular Expressions in Files and Forms</td>
</tr>
</tbody>
</table>
<br>
<div class="disp1">
<ul class="slidesUl1">
<li><p>
Metacharacters to Repeat Pattern Matches
</p><p>
In the previous examples, the metacharacter matched on a single character.
What if you want to match on more than one character?
</p><p>
For example, let's say you are looking for all lines containing names and the
first letter must be in uppercase, which can be represented as [A-Z],
but the following letters are lowercase and the number of letters varies in
each name. [a-z] matches on a single lowercase letter.
</p><p>
How can you match on one or more lowercase letters? Zero or more lowercase
letters? To do this you can use what are called "quantifiers".
</p><p>
To match on one or more lowercase letters, the regular expression can be written:
<b>/[a-z]+/</b> where the "+" sign means "one or more of the previous characters",
in this case, one or more lowercase letters.
</p><p>
PHP provides a number of quantifiers as shown in the table below.
</p><p>
Table: The Greedy Metacharacters
</p>
<blockquote>
<table>
<tr>
<td><code><b><u>
Metacharacter</u></b>&nbsp;</code></td>
<td><code><b><u>
What It Matches</u></b></code></td>
</tr><tr>
<td><code>
x?</code></td>
<td><code>
Matches 0 or 1 occurrences of the letter x.</code></td>
</tr><tr>
<td><code>
(xyz)?</code></td>
<td><code>
Matches 0 or 1 pattern of xyz.</code></td>
</tr><tr>
<td><code>
x*</code></td>
<td><code>
Matches 0 or more occurrences of the letter x.</code></td>
</tr><tr>
<td><code>
(xyz)*</code></td>
<td><code>
Matches 0 or more patterns of xyz.</code></td>
</tr><tr>
<td><code>
x+</code></td>
<td><code>
Matches 1 or more occurrences of the letter x.</code></td>
</tr><tr>
<td><code>
(xyz)+</code></td>
<td><code>
Matches one or more patterns of xyz.</code></td>
</tr><tr>
<td><code>
x{m}</code></td>
<td><code>
Matches exactly m occurrences of the letter x.</code></td>
</tr><tr>
<td><code>
x{m,n}</code></td>
<td><code>
Matches at least m occurrences of the letter x and no more than n occurrences
of the letter x.</code></td>
</tr><tr>
<td><code>
x{m,}</code></td>
<td><code>
Matches m or more occurrences of the letter x.</code></td>
</tr>
</table>
</blockquote>
</li>
<li><p>
The Greed Factor
</p><p>
Normally quantifiers are greedy; that is, they match on the largest possible
set of characters starting at the left side of the string and searching to
the right, looking for the last possible character that would satisfy the
condition. For example, given the string:
</p>
<blockquote><code><small>
var string="ab123456783445554437AB"<br>
</small></code></blockquote>
<p>
and the regular expression:
</p>
<blockquote><code><small>
/ab[0-9]*/<br>
</small></code></blockquote>
<p>
If the preg_replace() function were to substitute what is matched with an "X":
</p>
<code><small>
$new_string = preg_replace('/ab[0-9]*/','X','ab12345678445554437AB');<br>
</small></code>
<p>
The resulting string would be:
</p>
<blockquote><code><small>
"XAB"<br>
</small></code></blockquote>
<p>
The asterisk is a greedy metacharacter. It matches zero or more of the
preceding characters. In other words, it attaches itself to the character
preceding it.
</p><p>
In the preceding example, the asterisk attaches itself to the character
class [0-9]. The matching starts on the left, searching for "ab" followed
by zero or more numbers in the range between 0 and 9.
</p><p>
It is called greedy because the matching continues until the last number
is found, in this example the number 7. The pattern "ab" and all of the
numbers in the range between 0 and 9 are replaced with a single "X".
</p><p>
Greediness can be turned off so that instead of matching on the maximum number
of characters, the match is made on the minimal number of characters found.
</p><p>
This is done by appending a question mark after the greedy metacharacter.
</p>
<h4>
Filename: quantifiers.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">fh</span> <span class="syntax18">=</span> <span class="syntax9">fopen</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">data10.txt</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">r</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span>
<span class="gutter">   4:</span>    <span class="syntax8">exit</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">File</span><span class="syntax13"> </span><span class="syntax13">not</span><span class="syntax13"> </span><span class="syntax13">found.</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">   5:</span>  <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span>  <span class="syntax8">while</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax9">feof</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   7:</span>    <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax9">preg_match</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">/e\s?[A-Z]/</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   8:</span>      <span class="syntax8">echo</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>    <span class="syntax18">}</span>
<span class="gutterH">  10:</span>    <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  11:</span>  <span class="syntax18">}</span>
<span class="gutter">  12:</span><span class="syntax17">?&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
The first argument to the preg_match() function is a regular expression
containing a quantifier. The function will return TRUE if the
pattern is matched in $text; that is, a letter "e" followed by either a space
or no space at all, and an uppercase letter.
</p><p>
The question mark means "zero or one of the preceding character". Note that
the letter "e" in DeLoach is not followed by a space (zero or more spaces).
</p></li>
<li><p>
The * Metacharacter and Greed
</p><p>
The * metacharacter is often misunderstood as being a wildcard to match on
everything, but it only matches the character that precedes it.
</p><p>
In the regular expression <b>/ab*c/</b> the asterisk is attached to the "b",
meaning that zero or more occurrences of the letter "b" will be matched.
The strings "abc", "abbbbbbbc", and "ac" would all be matched.
</p>
<h4>
Filename: quantifiers2.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">fh</span> <span class="syntax18">=</span> <span class="syntax9">fopen</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">data10.txt</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">r</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span>
<span class="gutter">   4:</span>    <span class="syntax8">exit</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">File</span><span class="syntax13"> </span><span class="syntax13">not</span><span class="syntax13"> </span><span class="syntax13">found.</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">   5:</span>  <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span>  <span class="syntax8">while</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax9">feof</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   7:</span>    <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax9">preg_match</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">/B[a-z]*/</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   8:</span>      <span class="syntax8">echo</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>    <span class="syntax18">}</span>
<span class="gutterH">  10:</span>    <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  11:</span>  <span class="syntax18">}</span>
<span class="gutter">  12:</span><span class="syntax17">?&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
The first argument to the preg_match() function is a regular expression
containing a greedy metacharacter. The function will return TRUE if the
pattern is matched in $text: that is, a pattern that begins with an uppercase "B",
followed by zero or more lowercase letters.
</p><p>
The only character required to make a match is the first "B". The starred
character class represents zero or more letters ranging from "a" to "z",
which means there might not be any at all, as shown with "BB Kingson".
</p>
<h4>
Filename: quantifiers3.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">fh</span> <span class="syntax18">=</span> <span class="syntax9">fopen</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">data10.txt</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">r</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span>
<span class="gutter">   4:</span>    <span class="syntax8">exit</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">File</span><span class="syntax13"> </span><span class="syntax13">not</span><span class="syntax13"> </span><span class="syntax13">found.</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">   5:</span>  <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span>  <span class="syntax8">while</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax9">feof</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   7:</span>    <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax9">preg_match</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">/^[A-Z][a-z]*\s[A-Z][a-z]*\s/</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   8:</span>      <span class="syntax8">echo</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>    <span class="syntax18">}</span>
<span class="gutterH">  10:</span>    <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  11:</span>  <span class="syntax18">}</span>
<span class="gutter">  12:</span><span class="syntax17">?&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
The first argument to the preg_match() function is a regular expression
containing a greedy metacharacter. The function will return TRUE if the
pattern is matched in $text: that is, a pattern that begins with an 
uppercase letter, followed by zero or more lowercase letters, a space,
another uppercase letter, followed by zero or more lowercase letters
(only lowercase), and a space.
</p><p>
Because the last name DeLoach contains an uppercase letter "D", followed by
both upper-and lowercase letters, this line is not a match.
</p><p>
The first name in "BB Kingson" is not a match because the first letter is not
followed by a lowercase letter or a space.
</p>
<h4>
Filename: quantifiers4.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">fh</span> <span class="syntax18">=</span> <span class="syntax9">fopen</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">data10.txt</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">r</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span>
<span class="gutter">   4:</span>    <span class="syntax8">exit</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">File</span><span class="syntax13"> </span><span class="syntax13">not</span><span class="syntax13"> </span><span class="syntax13">found.</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">   5:</span>  <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span>  <span class="syntax8">while</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax9">feof</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   7:</span>    <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax9">preg_match</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">/^[A-Z][a-z]*\s[A-Z][a-zA-Z]*\s/</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   8:</span>      <span class="syntax8">echo</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>    <span class="syntax18">}</span>
<span class="gutterH">  10:</span>    <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  11:</span>  <span class="syntax18">}</span>
<span class="gutter">  12:</span><span class="syntax17">?&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
The first argument to the preg_match() function is a regular expression
containing a greedy metacharacter. The function will return TRUE if the
pattern is matched in $text: that is, a pattern that begins with an uppercase
letter, followed by zero or more lowercase letters, a space, another uppercase
letter, followed by zero or more upper- and lowercase letters.
</p><p>
In the previous example, DeLoach did not match because the last name contained
a mix of upper- and lowercase letters. That problem was addressed in this
example, by including [a-zA-Z] in the expression, McDougal or MacDonald would
also match, but what about O'Reilley?
</p></li>
<li><p>
The + Metacharacter and Greed
</p><p>
The "+" metacharacter attaches itself to the preceding character and matches
on one or more of that character.
</p>
<h4>
Filename: quantifiers5.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">fh</span> <span class="syntax18">=</span> <span class="syntax9">fopen</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">data10.txt</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">r</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span>
<span class="gutter">   4:</span>    <span class="syntax8">exit</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">File</span><span class="syntax13"> </span><span class="syntax13">not</span><span class="syntax13"> </span><span class="syntax13">found.</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">   5:</span>  <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span>  <span class="syntax8">while</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax9">feof</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   7:</span>    <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax9">preg_match</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">/B[a-z]+/</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   8:</span>      <span class="syntax8">echo</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>    <span class="syntax18">}</span>
<span class="gutterH">  10:</span>    <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  11:</span>  <span class="syntax18">}</span>
<span class="gutter">  12:</span><span class="syntax17">?&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
The first argument to the preg_match() function is a regular expression
containing a greedy metacharacter, the "+" sign. The function will return
TRUE if the pattern is matched in $text; that is, a pattern consisting of
an uppercase "B", followed by one or more lowercase letters <b>[a-z]+</b> .
</p></li>
<li><p>
Matching for Repeating Characters
</p><p>
To match for a character that is repeated a fixed number of times, the character
is followed by a set of curly braces containing a number to represent how many
times the pattern should be repeated.
</p><p>
A single number within the curly braces (e.g., {5}), represents an exact amount
of occurrences; two numbers separated by a comma (e.g., {3,10}), represents an
inclusive range; and a number followed by a comma (e.g., {4,}), represents a
minimum number of occurrences and any amount after that.
</p><p>
Table: Repeating Characters
</p>
<blockquote>
<table>
<tr>
<td><code><b><u>
Metacharacter</u></b>&nbsp;</code></td>
<td><code><b><u>
What It Does</u></b></code></td>
</tr><tr>
<td><code>
a{10}</code></td>
<td><code>
Matches exactly 10 occurrences of the letter a.</code></td>
</tr><tr>
<td><code>
a{3,5}</code></td>
<td><code>
Matches between 3 and 5 occurrences of the letter a.</code></td>
</tr><tr>
<td><code>
a{6,}</code></td>
<td><code>
Matches 6 or more occurrences of the letter a.</code></td>
</tr>
</table>
</blockquote>
<h4>
Filename: quantifiers6.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">fh</span> <span class="syntax18">=</span> <span class="syntax9">fopen</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">data10.txt</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">r</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span>
<span class="gutter">   4:</span>    <span class="syntax8">exit</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">File</span><span class="syntax13"> </span><span class="syntax13">not</span><span class="syntax13"> </span><span class="syntax13">found.</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">   5:</span>  <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span>  <span class="syntax8">while</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax9">feof</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   7:</span>    <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax9">preg_match</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">/\s\d{3}$/</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   8:</span>      <span class="syntax8">echo</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>    <span class="syntax18">}</span>
<span class="gutterH">  10:</span>    <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  11:</span>  <span class="syntax18">}</span>
<span class="gutter">  12:</span><span class="syntax17">?&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
The regular expression contains the curly brace {} metacharacters,
representing the number of times the preceeding expression will be repeated.
</p><p>
The expression matches for a space, followed by exactly 3 repeating digits,
anchored at the end of the line ($).
</p></li>
<li><p>
Metacharacters That Turn Off Greediness
</p><p>
By placing a question mark after a greedy quantifier, the greed is turned off
and the search ends after the first match, rather than the last one.
</p>
<h4>
Filename: noGreed.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">fh</span> <span class="syntax18">=</span> <span class="syntax9">fopen</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">data10.txt</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">r</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span>
<span class="gutter">   4:</span>    <span class="syntax8">exit</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">File</span><span class="syntax13"> </span><span class="syntax13">not</span><span class="syntax13"> </span><span class="syntax13">found.</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">   5:</span>  <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span>  <span class="syntax8">while</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax9">feof</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   7:</span>    <span class="syntax10">$</span><span class="syntax10">newtext</span> <span class="syntax18">=</span> <span class="syntax9">preg_replace</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">/B.*</span><span class="syntax13"> </span><span class="syntax13">/</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">John</span><span class="syntax13"> </span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   8:</span>    <span class="syntax8">echo</span> <span class="syntax10">$</span><span class="syntax10">newtext</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>    <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">  10:</span>  <span class="syntax18">}</span>
<span class="gutter">  11:</span>  <span class="syntax8">echo</span> <span class="syntax13">'</span><span class="syntax13">&lt;hr</span><span class="syntax13"> </span><span class="syntax13">width=&quot;75%&quot;&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  12:</span>  <span class="syntax9">rewind</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  13:</span>  <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  14:</span>  <span class="syntax8">while</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax9">feof</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutterH">  15:</span>    <span class="syntax10">$</span><span class="syntax10">newtext</span> <span class="syntax18">=</span> <span class="syntax9">preg_replace</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">/B.*?</span><span class="syntax13"> </span><span class="syntax13">/</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">John</span><span class="syntax13"> </span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  16:</span>    <span class="syntax8">echo</span> <span class="syntax10">$</span><span class="syntax10">newtext</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  17:</span>    <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  18:</span>  <span class="syntax18">}</span>
<span class="gutter">  19:</span><span class="syntax17">?&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
The first regular expression contains "B.*". The ".*" means zero or more of any
character. When a "B" is matched, it and all characters after it until the last
space will be consumed and replaced with "John".
</p><p>
The Bear in the line Mama Bear will be replaced with John; Blenheim in the
line Steve Blenheim is replaced with "John"; and Betty Boop is also replaced
with "John".
</p><p>
The rewind() function moves the file pointer back to the beginning of the file
($fh), so that we can loop through it again.
</p><p>
By placing a "?" after the ".*" in the second regular expression, the greed
factor of the asterisk is turned off; that is, find a "B", followed by zero
or more characters up until the first space and replace it with "John".
</p></li>
<li><p>
Metacharacters for Alternation
</p><p>
Alternation allows the regular expression to contain alternative patterns to
be matched; for example, the regular expression <b>/John|Karen|Steve/</b>
will match a line containing John or Karen or Steve.
</p><p>
If Karen, John, or Steve are all on different lines, all lines are matched.
Each of the alternative expressions is separated by a vertical bar
(pipe symbol) and the expressions can consist of any number of characters,
unlike the character class that only matches for one character.
</p><p>
that is, <b>/a|b|c/</b> is the same as <b>[abc]</b> , whereas <b>/ab|de/</b>
cannot be represented as <b>[abde]</b> . The pattern <b>/ab|de/</b> is either
"ab" or "de", whereas the class <b>[abcd]</b> represents only one character in
the set: "a", "b", "c", or "d".
</p>
<h4>
Filename: alternates.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">fh</span> <span class="syntax18">=</span> <span class="syntax9">fopen</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">data10.txt</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">r</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span>
<span class="gutter">   4:</span>    <span class="syntax8">exit</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">File</span><span class="syntax13"> </span><span class="syntax13">not</span><span class="syntax13"> </span><span class="syntax13">found.</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">   5:</span>  <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span>  <span class="syntax8">while</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax9">feof</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   7:</span>    <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax9">preg_match</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">/Steve|Betty|Jon/</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   8:</span>      <span class="syntax8">echo</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>    <span class="syntax18">}</span>
<span class="gutterH">  10:</span>    <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  11:</span>  <span class="syntax18">}</span>
<span class="gutter">  12:</span><span class="syntax17">?&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
The pipe symbol (|) is used in the regular expression to match on a set of
alternative string patterns. If any of the strings, "Steve", "Betty", or "Jon",
are found, the match is successful.
</p><p>
The preg_match function will return true if the pattern contains either
Steve, Betty, or Jon.
</p></li>
<li><p>
Grouping or Clustering
</p><p>
If the regular expression pattern is enclosed in parentheses, a subpattern
is created. Then, for example, instead of the greedy metacharacters matching
on zero, one, or more of the previous single character, they can match on the
previous subpattern.
</p><p>
Alternation can also be controlled if the patterns are enclosed in parentheses.
This process of grouping characters together is also called clustering.
</p>
<h4>
Filename: grouping.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">fh</span> <span class="syntax18">=</span> <span class="syntax9">fopen</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">data10.txt</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">r</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span>
<span class="gutter">   4:</span>    <span class="syntax8">exit</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">File</span><span class="syntax13"> </span><span class="syntax13">not</span><span class="syntax13"> </span><span class="syntax13">found.</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">   5:</span>  <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span>  <span class="syntax8">while</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax9">feof</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   7:</span>    <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax9">preg_match</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">/(Steve|Alexander)</span><span class="syntax13"> </span><span class="syntax13">Blenheim/</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   8:</span>      <span class="syntax8">echo</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>    <span class="syntax18">}</span>
<span class="gutterH">  10:</span>    <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  11:</span>  <span class="syntax18">}</span>
<span class="gutter">  12:</span><span class="syntax17">?&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
The regular expression contains the alternation character; the alternative
patterns are "Steve" and "Alexander". By enclosing this pattern in parentheses,
it is treated as a grouped unit so that the regular expression matches either
Steve Blenheim or Alexander Blenheim.
</p>
<h4>
Filename: grouping2.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">fh</span> <span class="syntax18">=</span> <span class="syntax9">fopen</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">data10.txt</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">r</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span>
<span class="gutter">   4:</span>    <span class="syntax8">exit</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">File</span><span class="syntax13"> </span><span class="syntax13">not</span><span class="syntax13"> </span><span class="syntax13">found.</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">   5:</span>  <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span>  <span class="syntax8">while</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax9">feof</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   7:</span>    <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax9">preg_match</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">/(ma)+/</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   8:</span>      <span class="syntax8">echo</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>    <span class="syntax18">}</span>
<span class="gutterH">  10:</span>    <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  11:</span>  <span class="syntax18">}</span>
<span class="gutter">  12:</span><span class="syntax17">?&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
If one or more occurrences of the pattern "ma" are found, the preg_match()
function will return TRUE. The "+" metacharacter is applied to the group of
characters within the parentheses; that is, "ma".
</p></li>
<li><p>
Remembering or Capturing
</p><p>
If the regular expression pattern is enclosed in parentheses, a subpattern is
created. The subpattern is found in the third argument to preg_match()
as an array of subpatterns.
</p><p>
With preg_replace(), parenthesized patterns can be backreferenced by using
a backslash and the number of the pattern; for example, the first parenthesized
pattern is referenced as "\1", the second as "\2", the third as "\3", up to "\"9.
</p><p>
If enclosed in double quotes, the backreferences are referenced as "\\1", "\\2",
"\\3", and so on. Newer versions of PHP use "$1", "$2", "$3", and so on,
rather than backslashes without limit on the number of subpatterns captured.
</p>
<h4>
Filename: capture2.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">fh</span> <span class="syntax18">=</span> <span class="syntax9">fopen</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">data10.txt</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">r</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span>
<span class="gutter">   4:</span>    <span class="syntax8">exit</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">File</span><span class="syntax13"> </span><span class="syntax13">not</span><span class="syntax13"> </span><span class="syntax13">found.</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">   5:</span>  <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span>  <span class="syntax8">while</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax9">feof</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   7:</span>    <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax9">preg_match</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">/(Steve)\s(Blenheim)/</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">matches</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   8:</span>      <span class="syntax8">echo</span> <span class="syntax14">&quot;</span><span class="syntax10">$</span><span class="syntax10">matches</span><span class="syntax14">[</span><span class="syntax14">0</span><span class="syntax14">]</span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>      <span class="syntax8">echo</span> <span class="syntax14">&quot;</span><span class="syntax10">$</span><span class="syntax10">matches</span><span class="syntax14">[</span><span class="syntax14">1</span><span class="syntax14">]</span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutterH">  10:</span>      <span class="syntax8">echo</span> <span class="syntax14">&quot;</span><span class="syntax10">$</span><span class="syntax10">matches</span><span class="syntax14">[</span><span class="syntax14">2</span><span class="syntax14">]</span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">  11:</span>    <span class="syntax18">}</span>
<span class="gutter">  12:</span>    <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  13:</span>  <span class="syntax18">}</span>
<span class="gutter">  14:</span><span class="syntax17">?&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
The regular expression contains two subpatterns, "Steve" and "Blenheim" both
enclosed in parentheses. These patterns are captured and saved in the third
argument to preg_match(), an array called $matches that contains the whole
pattern in $matches[0], the captured pattern "Steve", in $matches[1], and
the captured pattern "Blenheim", in $matches[2].
</p>
<h4>
Filename: matchVars.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">fh</span> <span class="syntax18">=</span> <span class="syntax9">fopen</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">data10.txt</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">r</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span>
<span class="gutter">   4:</span>    <span class="syntax8">exit</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">File</span><span class="syntax13"> </span><span class="syntax13">not</span><span class="syntax13"> </span><span class="syntax13">found.</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">   5:</span>  <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span>  <span class="syntax8">while</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax9">feof</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   7:</span>    <span class="syntax10">$</span><span class="syntax10">new</span> <span class="syntax18">=</span> <span class="syntax9">preg_replace</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">/(Betty)\s(Boop)/</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">$2,</span><span class="syntax13"> </span><span class="syntax13">$1</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   8:</span>    <span class="syntax8">echo</span> <span class="syntax10">$</span><span class="syntax10">new</span> <span class="syntax18">.</span><span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>
<span class="gutterH">  10:</span>    <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  11:</span>  <span class="syntax18">}</span>
<span class="gutter">  12:</span><span class="syntax17">?&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
The preg_replace() function will search the target string containing the regular
expression with two parenthesized subpatterns. The first one, (Betty), will be
captured in $1, the second one, (Boop), will be captured in $2.
</p><p>
The second argument is the replacement string and contains the captured subpatterns.
It causes the subpatterns to be reversed in the replacement string.
</p></li>
<li><p>
Searching, Capturing, and Replacing
</p><p>
If the search pattern contains parenthesized (captured) strings, those
subpatterns can be referenced in the replacement side by either backslashed
numbers such as \1, \2, up to \9, or the preferred way since PHP 4.0.4,
with $1, $2, up to $99.
</p><p>
The number refers to the position where the parenthesized pattern is placed
in the search pattern (left to right); for example, the first captured string
is referenced in the replacement string as $1, the second as $2, and so on.
</p><p>
$0 or \0 refers to the text matched by the entire pattern.
</p>
<h4>
Filename: matchVars2.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">fh</span> <span class="syntax18">=</span> <span class="syntax9">fopen</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">data10.txt</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">r</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span>
<span class="gutter">   4:</span>    <span class="syntax8">exit</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">File</span><span class="syntax13"> </span><span class="syntax13">not</span><span class="syntax13"> </span><span class="syntax13">found.</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">   5:</span>  <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span>  <span class="syntax8">while</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax9">feof</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   7:</span>    <span class="syntax10">$</span><span class="syntax10">new</span> <span class="syntax18">=</span> <span class="syntax9">preg_replace</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">/(\w+)\s(\w+)\s(\w+)/</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">$2,</span><span class="syntax13"> </span><span class="syntax13">$1</span><span class="syntax13"> </span><span class="syntax13">$3</span><span class="syntax13">'</span><span class="syntax18">,</span>
<span class="gutter">   8:</span>                        <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>    <span class="syntax8">echo</span> <span class="syntax10">$</span><span class="syntax10">new</span> <span class="syntax18">.</span><span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutterH">  10:</span>
<span class="gutter">  11:</span>    <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  12:</span>  <span class="syntax18">}</span>
<span class="gutter">  13:</span><span class="syntax17">?&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
The preg_replace() function will search the target string containing the regular
expression with three parenthesized subpatterns.
</p><p>
The first one, (\w+), will be captured in $1, the second one (\w+) will be
captured in $2, and everything after the last space will be captured in $3.
</p><p>
The second argument is the replacement string and contains the captured
subpatterns to be printed in the order in which they are placed.
</p>
<h4>
Filename: matchVars3.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">fh</span> <span class="syntax18">=</span> <span class="syntax9">fopen</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">data10.txt</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">r</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span>
<span class="gutter">   4:</span>    <span class="syntax8">exit</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">File</span><span class="syntax13"> </span><span class="syntax13">not</span><span class="syntax13"> </span><span class="syntax13">found.</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">   5:</span>  <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span>  <span class="syntax8">while</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax9">feof</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   7:</span>    <span class="syntax8">list</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fname</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">lname</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">number</span><span class="syntax18">)</span> <span class="syntax18">=</span> <span class="syntax9">preg_split</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">/\s+/</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   8:</span>    <span class="syntax10">$</span><span class="syntax10">new_number</span> <span class="syntax18">=</span> <span class="syntax9">preg_replace</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">/(\d{3})$/e</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">$1</span><span class="syntax13"> </span><span class="syntax13">*</span><span class="syntax13"> </span><span class="syntax13">1.1</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">number</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>    <span class="syntax9">printf</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">%s,</span><span class="syntax13"> </span><span class="syntax13">%s</span><span class="syntax13"> </span><span class="syntax13">%.2f&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">lname</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">fname</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">new_number</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">  10:</span>
<span class="gutter">  11:</span>    <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  12:</span>  <span class="syntax18">}</span>
<span class="gutter">  13:</span><span class="syntax17">?&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
The preg_split() function splits up the line by one or more spaces. The list()
function creates variables from each of the items returned from the split() function.
</p><p>
The preg_replace() function will search for any number ending in three digits,
capture and save those three digits in $1, and replace the number it saved with
that number, $1, muliplied by 1.1; that is, increase the number by 10 percent.
</p><p>
The printf() function formats and prints the name, last name first, and the
number as a floating-point number with precision of two decimal places.
</p></li>
<li><p>
Positive Lookahead
</p><p>
A lookahead is used to help refine a search but is not part of the resultin
g pattern. The lookahead peeks ahead of a pattern in the regular expression
to see if the text in the lookahead is there.
</p><p>
The lookahead text is enclosed in parentheses and prepended with "?=".
The text in the lookahead is not captured as in the previous examples,
but is only used as criteria for the search.
</p><p>
For example, the regular expression "/Bob (?= Black|Jones)/" says search for
Bob and look ahead to see if either Black or Jones are next, and if so,
there is a match.
</p><p>
The parentheses will not capture and create $1, and the values Black and Jones
will not be altered in a replacement.
</p>
<h4>
Filename: lookahead.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">fh</span> <span class="syntax18">=</span> <span class="syntax9">fopen</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">moredata.txt</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">r</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span>
<span class="gutter">   4:</span>    <span class="syntax8">exit</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">File</span><span class="syntax13"> </span><span class="syntax13">not</span><span class="syntax13"> </span><span class="syntax13">found.</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">   5:</span>  <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span>  <span class="syntax8">while</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax9">feof</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   7:</span>    <span class="syntax10">$</span><span class="syntax10">newstring</span> <span class="syntax18">=</span> <span class="syntax9">preg_replace</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">/mama</span><span class="syntax13"> </span><span class="syntax13">(monkey|bird)/i</span><span class="syntax13">'</span><span class="syntax18">,</span>
<span class="gutter">   8:</span>                              <span class="syntax13">'</span><span class="syntax13">Papa</span><span class="syntax13"> </span><span class="syntax13">$1</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>    <span class="syntax8">print</span> <span class="syntax10">$</span><span class="syntax10">newstring</span> <span class="syntax18">.</span><span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutterH">  10:</span>    <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  11:</span>  <span class="syntax18">}</span>
<span class="gutter">  12:</span>  
<span class="gutter">  13:</span>  <span class="syntax9">rewind</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  14:</span>  <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">  15:</span>  <span class="syntax4">#</span><span class="syntax4"> </span><span class="syntax4">Forward</span><span class="syntax4"> </span><span class="syntax4">lookahead</span>
<span class="gutter">  16:</span>  <span class="syntax8">print</span> <span class="syntax13">'</span><span class="syntax13">-------lookahead---------&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  17:</span>  <span class="syntax8">while</span><span class="syntax18">(</span><span class="syntax18">!</span><span class="syntax9">feof</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">  18:</span>    <span class="syntax10">$</span><span class="syntax10">newstring</span> <span class="syntax18">=</span> <span class="syntax9">preg_replace</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">/mama</span><span class="syntax13"> </span><span class="syntax13">(?=monkey|bird)/i</span><span class="syntax13">'</span><span class="syntax18">,</span>
<span class="gutter">  19:</span>                              <span class="syntax13">'</span><span class="syntax13">Papa</span><span class="syntax13"> </span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">  20:</span>    <span class="syntax8">print</span> <span class="syntax10">$</span><span class="syntax10">newstring</span> <span class="syntax18">.</span><span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  21:</span>    <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  22:</span>  <span class="syntax18">}</span>
<span class="gutter">  23:</span><span class="syntax17">?&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
The data file this time is "moredata.txt", which is opened for reading.
</p><p>
The regular expression used in the first while loop does not use a positive
lookahead. Instead, it uses capturing.
</p><p>
The preg_replace() function searches (case-insensitive) for either "mama monkey"
or "mama bird". If either "monkey" or "bird" is found, its value will be captured
and placed in $1.
</p><p>
The original string will be replaced with either "Papa bird" or "Papa monkey".
If $1 were not used in the replacement string, both "mama monkey" and "mama bird"
would be replaced with just "Papa ".
</p><p>
The rewind() function moves the internal file pointer back to the start of the file.
</p><p>
The preg_replace() function in the second while loop searches (case-insensitive)
for either "mama monkey" or "mama bird", but uses what is called a lookahead,
text preceded by "?=" and enclosed in parentheses.
</p><p>
Capturing is not performed when using lookahead. Notice that the lookahead text
is not included in the replacement string. It simply asserts that either "monkey"
or "bird" must follow "mama ", but are not considered part of what will be replaced.
"Papa " replaces "mama ". The rest of the string is left intact.
</p></li>
<li><p>
Positive Lookbehind
</p><p>
Like a positive lookahead, a positive lookbehind is used to help refine a
search but is not part of the resulting pattern.
It looks to see if the text in the lookbehind precedes the pattern being
searched for or replaced.
</p><p>
The lookbehind text is enclosed in parentheses and prepended with "?&lt;=".
The text is not captured as in the previous examples, but is only used as
criteria for the search.
</p>
<h4>
Filename: lookbehind.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax10">$</span><span class="syntax10">fh</span> <span class="syntax18">=</span> <span class="syntax9">fopen</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">moredata.txt</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">r</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   3:</span>  <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span>
<span class="gutter">   4:</span>    <span class="syntax8">exit</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">File</span><span class="syntax13"> </span><span class="syntax13">not</span><span class="syntax13"> </span><span class="syntax13">found.</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">   5:</span>  <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   6:</span>  <span class="syntax8">while</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax9">feof</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">   7:</span>    <span class="syntax10">$</span><span class="syntax10">newstring</span> <span class="syntax18">=</span> <span class="syntax9">preg_replace</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">/(?&lt;=ma</span><span class="syntax13"> </span><span class="syntax13">)[MC][a-z]+/</span><span class="syntax13">'</span><span class="syntax18">,</span>
<span class="gutter">   8:</span>                              <span class="syntax13">'</span><span class="syntax13">Goose</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>    <span class="syntax8">print</span> <span class="syntax10">$</span><span class="syntax10">newstring</span> <span class="syntax18">.</span><span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutterH">  10:</span>    <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  11:</span>  <span class="syntax18">}</span>
<span class="gutter">  12:</span><span class="syntax17">?&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
The lookbehind is "(?&lt;=ma )". The text in the lookbehind is "ma ".
</p><p>
If that pattern precedes the pattern in the regular expression, "[MC][a-z]+",
the string will be replaced by "Goose".
</p><p>
That is, "Norma Cord" and "Mama Monkey" will be replaced with "Norma Goose" and
"Mama Goose".
</p></li>
<li><p>
Commenting Regular Expressions and the x Modifier
</p><p>
You can add whitespace and comments to a regular expression if you want to
clarify how the regular expression is broken down and what each symbol means.
</p><p>
This is very helpful in unraveling a long regular expression you might have
inherited from another person or program and are not sure how it works.
</p><p>
To do this use the "x" modifier after the closing delimiter.
</p>
<h4>
Filename: xmodifier.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;?php</span>
<span class="gutter">   2:</span>  <span class="syntax4">#</span><span class="syntax4"> </span><span class="syntax4">/^([A-Z][a-z]+)\s([A-Z][a-zA-Z]+)\s(\d{3})/</span>
<span class="gutter">   3:</span>  <span class="syntax10">$</span><span class="syntax10">regex</span> <span class="syntax18">=</span>
<span class="gutter">   4:</span>     <span class="syntax13">'</span><span class="syntax13">/</span>
<span class="gutterH">   5:</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">^</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">#</span><span class="syntax13"> </span><span class="syntax13">At</span><span class="syntax13"> </span><span class="syntax13">the</span><span class="syntax13"> </span><span class="syntax13">beginning</span><span class="syntax13"> </span><span class="syntax13">of</span><span class="syntax13"> </span><span class="syntax13">the</span><span class="syntax13"> </span><span class="syntax13">line</span>
<span class="gutter">   6:</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">(</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">#</span><span class="syntax13"> </span><span class="syntax13">start</span><span class="syntax13"> </span><span class="syntax13">a</span><span class="syntax13"> </span><span class="syntax13">new</span><span class="syntax13"> </span><span class="syntax13">subpattern</span><span class="syntax13"> </span><span class="syntax13">$1</span>
<span class="gutter">   7:</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">[A-Z]</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">#</span><span class="syntax13"> </span><span class="syntax13">Find</span><span class="syntax13"> </span><span class="syntax13">an</span><span class="syntax13"> </span><span class="syntax13">uppercase</span><span class="syntax13"> </span><span class="syntax13">letter</span>
<span class="gutter">   8:</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">[A-Za-z]</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">#</span><span class="syntax13"> </span><span class="syntax13">find</span><span class="syntax13"> </span><span class="syntax13">an</span><span class="syntax13"> </span><span class="syntax13">upper</span><span class="syntax13"> </span><span class="syntax13">or</span><span class="syntax13"> </span><span class="syntax13">lowercase</span><span class="syntax13"> </span><span class="syntax13">letter</span>
<span class="gutter">   9:</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">*</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">#</span><span class="syntax13"> </span><span class="syntax13">match</span><span class="syntax13"> </span><span class="syntax13">it</span><span class="syntax13"> </span><span class="syntax13">zero</span><span class="syntax13"> </span><span class="syntax13">or</span><span class="syntax13"> </span><span class="syntax13">more</span><span class="syntax13"> </span><span class="syntax13">times</span>
<span class="gutterH">  10:</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">)</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">#</span><span class="syntax13"> </span><span class="syntax13">close</span><span class="syntax13"> </span><span class="syntax13">first</span><span class="syntax13"> </span><span class="syntax13">subpattern</span>
<span class="gutter">  11:</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">\s</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">#</span><span class="syntax13"> </span><span class="syntax13">find</span><span class="syntax13"> </span><span class="syntax13">a</span><span class="syntax13"> </span><span class="syntax13">whitespace</span><span class="syntax13"> </span><span class="syntax13">character</span>
<span class="gutter">  12:</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">(</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">#</span><span class="syntax13"> </span><span class="syntax13">start</span><span class="syntax13"> </span><span class="syntax13">another</span><span class="syntax13"> </span><span class="syntax13">subpattern</span><span class="syntax13"> </span><span class="syntax13">$2</span>
<span class="gutter">  13:</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">[A-Z]</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">#</span><span class="syntax13"> </span><span class="syntax13">match</span><span class="syntax13"> </span><span class="syntax13">an</span><span class="syntax13"> </span><span class="syntax13">uppercase</span><span class="syntax13"> </span><span class="syntax13">letter</span>
<span class="gutter">  14:</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">[a-zA-Z]</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">#</span><span class="syntax13"> </span><span class="syntax13">match</span><span class="syntax13"> </span><span class="syntax13">an</span><span class="syntax13"> </span><span class="syntax13">upper</span><span class="syntax13"> </span><span class="syntax13">or</span><span class="syntax13"> </span><span class="syntax13">lowercase</span><span class="syntax13"> </span><span class="syntax13">letter</span>
<span class="gutterH">  15:</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">+</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">#</span><span class="syntax13"> </span><span class="syntax13">match</span><span class="syntax13"> </span><span class="syntax13">for</span><span class="syntax13"> </span><span class="syntax13">one</span><span class="syntax13"> </span><span class="syntax13">or</span><span class="syntax13"> </span><span class="syntax13">more</span><span class="syntax13"> </span><span class="syntax13">of</span><span class="syntax13"> </span><span class="syntax13">them</span>
<span class="gutter">  16:</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">)</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">#</span><span class="syntax13"> </span><span class="syntax13">close</span><span class="syntax13"> </span><span class="syntax13">the</span><span class="syntax13"> </span><span class="syntax13">subpattern</span>
<span class="gutter">  17:</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">\s</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">#</span><span class="syntax13"> </span><span class="syntax13">match</span><span class="syntax13"> </span><span class="syntax13">a</span><span class="syntax13"> </span><span class="syntax13">whitespace</span><span class="syntax13"> </span><span class="syntax13">character</span>
<span class="gutter">  18:</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">(</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">#</span><span class="syntax13"> </span><span class="syntax13">start</span><span class="syntax13"> </span><span class="syntax13">subpattern</span><span class="syntax13"> </span><span class="syntax13">$3</span>
<span class="gutter">  19:</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">\d</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">#</span><span class="syntax13"> </span><span class="syntax13">match</span><span class="syntax13"> </span><span class="syntax13">a</span><span class="syntax13"> </span><span class="syntax13">digit</span>
<span class="gutterH">  20:</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">{3}</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">#</span><span class="syntax13"> </span><span class="syntax13">match</span><span class="syntax13"> </span><span class="syntax13">it</span><span class="syntax13"> </span><span class="syntax13">three</span><span class="syntax13"> </span><span class="syntax13">times</span>
<span class="gutter">  21:</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">)</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">#</span><span class="syntax13"> </span><span class="syntax13">close</span><span class="syntax13"> </span><span class="syntax13">the</span><span class="syntax13"> </span><span class="syntax13">subpattern</span>
<span class="gutter">  22:</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">$</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">#</span><span class="syntax13"> </span><span class="syntax13">end</span><span class="syntax13"> </span><span class="syntax13">of</span><span class="syntax13"> </span><span class="syntax13">line</span>
<span class="gutter">  23:</span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13"> </span><span class="syntax13">/x</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  24:</span>     
<span class="gutterH">  25:</span>  <span class="syntax10">$</span><span class="syntax10">fh</span> <span class="syntax18">=</span> <span class="syntax9">fopen</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">data10.txt</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">r</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  26:</span>  <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span>
<span class="gutter">  27:</span>    <span class="syntax8">exit</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">File</span><span class="syntax13"> </span><span class="syntax13">not</span><span class="syntax13"> </span><span class="syntax13">found.</span><span class="syntax13">'</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  28:</span>  <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  29:</span>  <span class="syntax8">while</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax9">feof</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutterH">  30:</span>    <span class="syntax10">$</span><span class="syntax10">new_text</span> <span class="syntax18">=</span> <span class="syntax9">preg_replace</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">regex</span><span class="syntax18">,</span><span class="syntax13">'</span><span class="syntax13">$2,</span><span class="syntax13"> </span><span class="syntax13">$1</span><span class="syntax13"> </span><span class="syntax13">$3</span><span class="syntax13">'</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">text</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  31:</span>    <span class="syntax8">echo</span> <span class="syntax10">$</span><span class="syntax10">new_text</span> <span class="syntax18">.</span><span class="syntax13">'</span><span class="syntax13">&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  32:</span>    <span class="syntax10">$</span><span class="syntax10">text</span> <span class="syntax18">=</span> <span class="syntax9">fgets</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">fh</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  33:</span>  <span class="syntax18">}</span>
<span class="gutter">  34:</span><span class="syntax17">?&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
Line 2 contains the regular expression (in a comment) that will be broken down
and commented.
</p><p>
The variable $regex is assigned a commented regular expression where each
regular expression metacharacter is described. By breaking down the expression
in this way, you can decipher what it is trying to do.
</p><p>
The "x" modifier at the end of the expression allows the regular expression
to contain whitespace and comments without affecting the parsing of the
regular expression at all.
</p></li>
<li><p>
Searching for Patterns in Text Files
</p><p>
You might be using text files, rather than a database, to store information.
You can perform pattern matching with regular expressions to find specific data
from a file using the PHP built-in functions such as <b>preg_match()</b> ,
<b>preg_replace()</b> , and so on.
</p><p>
In the following example, a form is provided so that the user can select all
names and phone numbers within a particular area code found in a text file.
</p>
<h4>
Filename: areaCode.html - The HTML Form
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;</span><span class="syntax17">html</span><span class="syntax17">&gt;</span>
<span class="gutter">   2:</span> <span class="syntax17">&lt;</span><span class="syntax17">head</span><span class="syntax17">&gt;</span>
<span class="gutter">   3:</span>  <span class="syntax17">&lt;</span><span class="syntax17">title</span><span class="syntax17">&gt;</span>Searching for Area Code from a File<span class="syntax17">&lt;</span><span class="syntax17">/</span><span class="syntax17">title</span><span class="syntax17">&gt;</span>
<span class="gutter">   4:</span> <span class="syntax17">&lt;</span><span class="syntax17">/</span><span class="syntax17">head</span><span class="syntax17">&gt;</span>
<span class="gutterH">   5:</span> <span class="syntax17">&lt;</span><span class="syntax17">body</span><span class="syntax17"> </span><span class="syntax17">bgcolor</span><span class="syntax18">=</span><span class="syntax13">&quot;</span><span class="syntax13">silver</span><span class="syntax13">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">   6:</span>  <span class="syntax17">&lt;</span><span class="syntax17">font</span><span class="syntax17"> </span><span class="syntax17">face</span><span class="syntax18">=</span><span class="syntax13">&quot;</span><span class="syntax13">verdana</span><span class="syntax13">&quot;</span><span class="syntax17"> </span><span class="syntax17">size</span><span class="syntax18">=</span><span class="syntax13">&quot;</span><span class="syntax13">+1</span><span class="syntax13">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">   7:</span>  <span class="syntax17">&lt;</span><span class="syntax17">form</span><span class="syntax17"> </span><span class="syntax17">action</span><span class="syntax18">=</span><span class="syntax13">&quot;</span><span class="syntax13">areaCode.php</span><span class="syntax13">&quot;</span><span class="syntax17"> </span><span class="syntax17">method</span><span class="syntax18">=</span><span class="syntax13">&quot;</span><span class="syntax13">POST</span><span class="syntax13">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">   8:</span>   <span class="syntax17">&lt;</span><span class="syntax17">p</span><span class="syntax17">&gt;</span>
<span class="gutter">   9:</span>   Please enter the area code
<span class="gutterH">  10:</span>   <span class="syntax17">&lt;</span><span class="syntax17">input</span><span class="syntax17"> </span><span class="syntax17">type</span><span class="syntax18">=</span><span class="syntax13">&quot;</span><span class="syntax13">text</span><span class="syntax13">&quot;</span><span class="syntax17"> </span><span class="syntax17">name</span><span class="syntax18">=</span><span class="syntax13">&quot;</span><span class="syntax13">area_code</span><span class="syntax13">&quot;</span><span class="syntax17"> </span><span class="syntax17">size</span><span class="syntax18">=</span><span class="syntax17">5</span><span class="syntax17">&gt;</span>
<span class="gutter">  11:</span>   <span class="syntax17">&lt;</span><span class="syntax17">/</span><span class="syntax17">p</span><span class="syntax17">&gt;</span><span class="syntax17">&lt;</span><span class="syntax17">p</span><span class="syntax17">&gt;</span>
<span class="gutter">  12:</span>   <span class="syntax17">&lt;</span><span class="syntax17">input</span><span class="syntax17"> </span><span class="syntax17">type</span><span class="syntax18">=</span><span class="syntax13">&quot;</span><span class="syntax13">submit</span><span class="syntax13">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">  13:</span>   <span class="syntax17">&lt;</span><span class="syntax17">input</span><span class="syntax17"> </span><span class="syntax17">type</span><span class="syntax18">=</span><span class="syntax13">&quot;</span><span class="syntax13">reset</span><span class="syntax13">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">  14:</span>   <span class="syntax17">&lt;</span><span class="syntax17">/</span><span class="syntax17">p</span><span class="syntax17">&gt;</span>
<span class="gutterH">  15:</span>  <span class="syntax17">&lt;</span><span class="syntax17">/</span><span class="syntax17">form</span><span class="syntax17">&gt;</span>
<span class="gutter">  16:</span>  <span class="syntax17">&lt;</span><span class="syntax17">/</span><span class="syntax17">font</span><span class="syntax17">&gt;</span>
<span class="gutter">  17:</span> <span class="syntax17">&lt;</span><span class="syntax17">/</span><span class="syntax17">body</span><span class="syntax17">&gt;</span>
<span class="gutter">  18:</span><span class="syntax17">&lt;</span><span class="syntax17">/</span><span class="syntax17">html</span><span class="syntax17">&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
<h4>
Filename: areaCode.php - The PHP Script
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;html</span><span class="syntax17">&gt;</span>
<span class="gutter">   2:</span> <span class="syntax17">&lt;head</span><span class="syntax17">&gt;</span>
<span class="gutter">   3:</span>  <span class="syntax17">&lt;title</span><span class="syntax17">&gt;</span>Finding Phones by Area Code<span class="syntax17">&lt;/title</span><span class="syntax17">&gt;</span>
<span class="gutter">   4:</span> <span class="syntax17">&lt;/head</span><span class="syntax17">&gt;</span>
<span class="gutterH">   5:</span> <span class="syntax17">&lt;body</span><span class="syntax17"> </span><span class="syntax17">bgcolor</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">silver</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">   6:</span>  <span class="syntax17">&lt;font</span><span class="syntax17"> </span><span class="syntax17">face</span><span class="syntax18">=</span><span class="syntax17">verdana</span><span class="syntax14">&quot;</span><span class="syntax14">&gt;</span>
<span class="gutter">   7:</span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax17">&lt;?php</span>
<span class="gutter">   8:</span>    <span class="syntax10">$</span><span class="syntax10">filename</span> <span class="syntax18">=</span> <span class="syntax10">$</span><span class="syntax10">_SERVER</span><span class="syntax18">[</span><span class="syntax13">'</span><span class="syntax13">DOCUMENT_ROOT</span><span class="syntax13">'</span><span class="syntax18">]</span> <span class="syntax18">.</span><span class="syntax13">'</span><span class="syntax13">/files/datebook.txt</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">   9:</span>    <span class="syntax10">$</span><span class="syntax10">lines</span> <span class="syntax18">=</span> <span class="syntax9">file</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">filename</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">  10:</span>    <span class="syntax10">$</span><span class="syntax10">area_code</span> <span class="syntax18">=</span> <span class="syntax9">trim</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">_POST</span><span class="syntax18">[</span><span class="syntax13">'</span><span class="syntax13">area_code</span><span class="syntax13">'</span><span class="syntax18">]</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  11:</span>    <span class="syntax8">echo</span> <span class="syntax13">'</span><span class="syntax13">&lt;h2&gt;Names</span><span class="syntax13"> </span><span class="syntax13">and</span><span class="syntax13"> </span><span class="syntax13">Phones</span><span class="syntax13"> </span><span class="syntax13">in</span><span class="syntax13"> </span><span class="syntax13">'</span><span class="syntax18">.</span> <span class="syntax10">$</span><span class="syntax10">area_code</span> <span class="syntax18">.</span><span class="syntax13">'</span><span class="syntax13"> </span><span class="syntax13">area</span><span class="syntax13"> </span><span class="syntax13">code&lt;/h2&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  12:</span>       
<span class="gutter">  13:</span>    <span class="syntax8">foreach</span><span class="syntax18"> (</span><span class="syntax10">$</span><span class="syntax10">lines</span> <span class="syntax8">as</span> <span class="syntax10">$</span><span class="syntax10">the_line</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">  14:</span>      <span class="syntax10">$</span><span class="syntax10">fields</span> <span class="syntax18">=</span> <span class="syntax9">explode</span><span class="syntax18">(</span><span class="syntax13">'</span><span class="syntax13">:</span><span class="syntax13">'</span><span class="syntax18">,</span><span class="syntax10">$</span><span class="syntax10">the_line</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">  15:</span>      <span class="syntax10">$</span><span class="syntax10">name</span> <span class="syntax18">=</span> <span class="syntax10">$</span><span class="syntax10">fields</span><span class="syntax18">[</span><span class="syntax5">0</span><span class="syntax18">]</span><span class="syntax18">;</span>
<span class="gutter">  16:</span>      <span class="syntax10">$</span><span class="syntax10">phone</span> <span class="syntax18">=</span> <span class="syntax10">$</span><span class="syntax10">fields</span><span class="syntax18">[</span><span class="syntax5">1</span><span class="syntax18">]</span><span class="syntax18">;</span>
<span class="gutter">  17:</span>      <span class="syntax10">$</span><span class="syntax10">address</span> <span class="syntax18">=</span> <span class="syntax10">$</span><span class="syntax10">fields</span><span class="syntax18">[</span><span class="syntax5">2</span><span class="syntax18">]</span><span class="syntax18">;</span>
<span class="gutter">  18:</span>      <span class="syntax10">$</span><span class="syntax10">birthday</span> <span class="syntax18">=</span> <span class="syntax10">$</span><span class="syntax10">fields</span><span class="syntax18">[</span><span class="syntax5">3</span><span class="syntax18">]</span><span class="syntax18">;</span>
<span class="gutter">  19:</span>      <span class="syntax10">$</span><span class="syntax10">salary</span> <span class="syntax18">=</span> <span class="syntax10">$</span><span class="syntax10">fields</span><span class="syntax18">[</span><span class="syntax5">4</span><span class="syntax18">]</span><span class="syntax18">;</span>
<span class="gutterH">  20:</span>      
<span class="gutter">  21:</span>      <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax9">preg_match</span><span class="syntax18">(</span><span class="syntax14">&quot;</span><span class="syntax14">/</span><span class="syntax14">^</span><span class="syntax10">$</span><span class="syntax10">area_code</span><span class="syntax14">-</span><span class="syntax14">/</span><span class="syntax14">&quot;</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">phone</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">  22:</span>         <span class="syntax8">echo</span> <span class="syntax14">&quot;</span><span class="syntax10">$</span><span class="syntax10">name</span><span class="syntax14">:</span><span class="syntax14"> </span><span class="syntax10">$</span><span class="syntax10">phone</span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">  23:</span>         <span class="syntax10">$</span><span class="syntax10">count</span><span class="syntax18">+</span><span class="syntax18">+</span><span class="syntax18">;</span>
<span class="gutter">  24:</span>       <span class="syntax18">}</span>
<span class="gutterH">  25:</span>     <span class="syntax18">}</span>
<span class="gutter">  26:</span>     
<span class="gutter">  27:</span>     <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax10">$</span><span class="syntax10">count</span> <span class="syntax18">=</span><span class="syntax18">=</span> <span class="syntax5">0</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">  28:</span>        <span class="syntax8">echo</span> <span class="syntax13">'</span><span class="syntax13">The</span><span class="syntax13"> </span><span class="syntax13">area</span><span class="syntax13"> </span><span class="syntax13">code</span><span class="syntax13"> </span><span class="syntax13">was</span><span class="syntax13"> </span><span class="syntax13">not</span><span class="syntax13"> </span><span class="syntax13">found.&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  29:</span>     <span class="syntax18">}</span>
<span class="gutterH">  30:</span>  <span class="syntax17">?&gt;</span>
<span class="gutter">  31:</span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14">&lt;</span><span class="syntax14">/</span><span class="syntax14">font</span><span class="syntax14">&gt;</span>
<span class="gutter">  32:</span><span class="syntax14"> </span><span class="syntax14">&lt;</span><span class="syntax14">/</span><span class="syntax14">body</span><span class="syntax14">&gt;</span>
<span class="gutter">  33:</span><span class="syntax14">&lt;</span><span class="syntax14">/</span><span class="syntax14">html</span><span class="syntax14">&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
In this HTML form, the user is asked to enter an area code into the text box.
</p><p>
The PHP built-in file() function reads the entire file and assigns it to an
array. Each element of the array is a line of the file.
</p><p>
The foreach loop is used to cycle through the array; that is, each line of the file.
</p><p>
Each line is split up into fields where the colon designates the field separator.
</p><p>
The preg_match() function searches in the $phone variable for the area code that
was requested by the user in the form.
</p><p>
The regular expression reads: go to the beginning of the $phone field, find the
area code (value of $area_code), followed by a dash.
</p><p>
If the requested area code is found, the preg_match() function returns true and
the block starting on line 22 is entered.
</p><p>
For every successful match, the counter, $count, is incremented by 1.
</p><p>
If the value of $count is 0 after completing the foreach loop, no matches were
found.
</p></p>
<li><p>
Form Validation with PHP
</p><p>
If you are going to use PHP to validate data in a fillout form, you can use
regular expressions to create sophisticated patterns for finding e-mail
addresses, phone numbers, credit card data, and so on.
</p><p>
But rather than create the pattern yourself, there are a number of Web sites
that can help you, such as: <a href="http://regexlib.com/">regexlib.com</a>
</p><p>
The following table provides regular expressions for input data that can be
routinely checked. The example that follows the table shows you how to creat
e a form and process the validation using a regular expression.
</p><p>
Table: Regular Expressions Used for Validating Form Input
</p>
<table>
<tr>
<td><code><b><u>
Type of Input</u></b></code></td>
<td><code><b><u>
Regular Expression</u></b></code></td>
</tr><tr>
<td><code>
Social Security&nbsp;<br>
number</code></td>
<td><code>
/^\d{3}-?\d\d-?\d{4}$/</code></td>
</tr><tr>
<td><code>
U.S. phone<br>
number</code></td>
<td><code>
/^\(?\d{3}\)?-?\s*\d{3}\s*-?\d{4}$/</code></td>
</tr><tr>
<td><code>
Zip code</code></td>
<td><code>
/^\d{5}((-|\s)?\d{4})?$/</code></td>
</tr><tr>
<td><code>
E-mail</code></td>
<td><code>
/^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$/</code></td>
</tr><tr>
<td><code>
Credit card<br>
number</code></td>
<td><code>
/^((4\d{3})|(5[1-5]\d{2})|(6011))-?\d{4}-?\d{4}-?\d{4}|3[4,7]\d{13}$/</code></td>
</tr><tr>
<td><code>
URL</code></td>
<td><code>
/^((http|https|ftp)://)?([\w-])+(\.)(\w){2,4}([\w/+=%&amp;_.~?-]*)$/</code></td>
</tr>
</table>
</li>
<li><p>
Checking for a Valid E-Mail Address
</p><p>
In the following example, we validate an e-mail address.
You can use the same format, and apply any of the regular expressions from
the table to create similar functions to add to the validation program.
</p><p>
When validating an e-mail address, you are looking for the typical format found in such addresses. There might be some domain names that are more than four characters, but it is not typical. Also, just because the user types what looks like a valid e-mail address, does not mean that it is; for example, the e-mail address santa@northpole.org uses a valid syntax, but does not check to see if santa is a real user.
</p><p>
E-mail addresses usually have the following format:
</p>
<ul>
<li>
An @ sign between the username and address (lequig@aol.com).
</li><li>
At least one dot between the address and domain name (.com, .mil, .edu, .se).
</li><li>
At least six characters (a@b.se).
(As of this writing, domain names have at least two characters.)
</li>
</ul>
<p>
The following are examples of valid e-mail addresses:
</p>
<blockquote><code><small>
username@mailserver.com<br>
username@mailserver.info<br>
username@mailserver.org.se<br>
username.moretext@mailserver.mil<br>
username@mailserver.co.uk<br>
user-name.moretext.sometext.mailserver.se<br>
</small></code></blockquote>
</li>
<li><p>
Breaking down the regular expression for validating an email:</p>
<p>
<code><small>
/^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$/<br>
</small></code>
</p>
<ul>
<li>
<b>^</b>&nbsp;<small>Go to the beginning of the line.</small>
</li><li>
<b>[a-zA-Z]</b>&nbsp;<small>The username must begin with a letter.</small>
</li><li>
<b>[\w \.\-]+</b>&nbsp;<small>The username can consist of one or more word characters, dots,
spaces, dashes; for example: <code>Joe.Shome_somebody</code></small>
</li><li>
<b>[a-zA-Z0-9]</b>&nbsp;<small>The last character in the user's name must be an alphanumeric
character.</small>
</li><li>
<b>@</b>&nbsp;<small>A literal @ symbol is required in the e-mail addresses.</small>
</li><li>
<b>([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+</b>&nbsp;<small>The mail server's name is like the user's
name, a group consisting of a word character, followed by zero or more word
characters and a dash, and then a dot. Because the parentheses are followed by a
"+", the group can be repeated one or more times.</small>
</li><li>
<b>[a-zA-Z]{2,4}</b>&nbsp;<small>The domain name follows the mail server's name.
The domain name consists of between two and four alphabetic characters;
for example: <code>savageman@IMEFDM.USMC.MIL</code>
or <code>patricia.person@sweden.sun.com</code></small>
</li><li>
<b>$</b>&nbsp;<small>This the end-of-line anchor, where the pattern ends.</small>
</li>
</ul>
<p>
This example uses a regular expression to check for a valid e-mail address.
</p>
<h4>
Filename: validEmail.php
</h4>
<blockquote><small>
<div class="disp2">
<PRE>
<span class="syntax0"><span class="gutter">   1:</span><span class="syntax17">&lt;html</span><span class="syntax17">&gt;</span>
<span class="gutter">   2:</span> <span class="syntax17">&lt;head</span><span class="syntax17">&gt;</span>
<span class="gutter">   3:</span>  <span class="syntax17">&lt;title</span><span class="syntax17">&gt;</span>Validate an Email Address<span class="syntax17">&lt;/title</span><span class="syntax17">&gt;</span>
<span class="gutter">   4:</span> <span class="syntax17">&lt;/head</span><span class="syntax17">&gt;</span>
<span class="gutterH">   5:</span> <span class="syntax17">&lt;body</span><span class="syntax17"> </span><span class="syntax17">bgcolor</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">#</span><span class="syntax14">ccffcc</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">   6:</span>  <span class="syntax17">&lt;font</span><span class="syntax17"> </span><span class="syntax17">size</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">+</span><span class="syntax14">1</span><span class="syntax14">&quot;</span><span class="syntax17"> </span><span class="syntax17">color</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">darkblue</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">   7:</span>  <span class="syntax17">&lt;h1</span><span class="syntax17">&gt;</span>Validating Email<span class="syntax17">&lt;/h1</span><span class="syntax17">&gt;</span>
<span class="gutter">   8:</span>  <span class="syntax17">&lt;?php</span>
<span class="gutter">   9:</span>    <span class="syntax10">$</span><span class="syntax10">errors</span> <span class="syntax18">=</span> <span class="syntax8">array</span><span class="syntax18">(</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutterH">  10:</span>    <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax8">isset</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">_POST</span><span class="syntax18">[</span><span class="syntax13">'</span><span class="syntax13">submit</span><span class="syntax13">'</span><span class="syntax18">]</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">  11:</span>      <span class="syntax6">validate_input</span><span class="syntax18">(</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  12:</span>      <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax9">count</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">errors</span><span class="syntax18">)</span> <span class="syntax18">!</span><span class="syntax18">=</span> <span class="syntax5">0</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">  13:</span>        <span class="syntax6">show_form</span><span class="syntax18">(</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  14:</span>      <span class="syntax18">}</span>
<span class="gutterH">  15:</span>      <span class="syntax8">else</span> <span class="syntax18">{</span>
<span class="gutter">  16:</span>        <span class="syntax8">echo</span> <span class="syntax13">'</span><span class="syntax13">&lt;b&gt;OK!</span><span class="syntax13"> </span><span class="syntax13">Go</span><span class="syntax13"> </span><span class="syntax13">ahead</span><span class="syntax13"> </span><span class="syntax13">and</span><span class="syntax13"> </span><span class="syntax13">Process</span><span class="syntax13"> </span><span class="syntax13">the</span><span class="syntax13"> </span><span class="syntax13">form&lt;/b&gt;&lt;br</span><span class="syntax13"> </span><span class="syntax13">/&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  17:</span>        <span class="syntax8">echo</span> <span class="syntax14">&quot;</span><span class="syntax14">&lt;</span><span class="syntax14">em</span><span class="syntax14">&gt;</span><span class="syntax14">&lt;</span><span class="syntax14">b</span><span class="syntax14">&gt;</span><span class="syntax10">$</span><span class="syntax10">_POST</span><span class="syntax14">[</span><span class="syntax14">email</span><span class="syntax14">]</span><span class="syntax14">&lt;</span><span class="syntax14">/</span><span class="syntax14">em</span><span class="syntax14">&gt;</span><span class="syntax14">&lt;</span><span class="syntax14">/</span><span class="syntax14">b</span><span class="syntax14">&gt;</span><span class="syntax14"> </span><span class="syntax14">is</span><span class="syntax14"> </span><span class="syntax14">a</span><span class="syntax14"> </span><span class="syntax14">valid</span><span class="syntax14"> </span><span class="syntax14">email</span>
<span class="gutter">  18:</span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14"> </span><span class="syntax14">address</span><span class="syntax14">.</span><span class="syntax14">&lt;</span><span class="syntax14">br</span><span class="syntax14"> </span><span class="syntax14">/</span><span class="syntax14">&gt;</span><span class="syntax14">&quot;</span><span class="syntax18">;</span>
<span class="gutter">  19:</span>      <span class="syntax18">}</span>
<span class="gutterH">  20:</span>    <span class="syntax18">}</span>
<span class="gutter">  21:</span>    <span class="syntax8">else</span> <span class="syntax18">{</span>
<span class="gutter">  22:</span>      <span class="syntax6">show_form</span><span class="syntax18">(</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  23:</span>    <span class="syntax18">}</span>
<span class="gutter">  24:</span>    
<span class="gutterH">  25:</span>    <span class="syntax8">function</span> <span class="syntax6">validate_input</span><span class="syntax18">(</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">  26:</span>      <span class="syntax8">global</span> <span class="syntax10">$</span><span class="syntax10">errors</span> <span class="syntax18">;</span>
<span class="gutter">  27:</span>      
<span class="gutter">  28:</span>      <span class="syntax10">$</span><span class="syntax10">email</span> <span class="syntax18">=</span> <span class="syntax9">stripslashes</span><span class="syntax18">(</span><span class="syntax9">trim</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">_POST</span><span class="syntax18">[</span><span class="syntax13">'</span><span class="syntax13">email</span><span class="syntax13">'</span><span class="syntax18">]</span><span class="syntax18">)</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  29:</span>      <span class="syntax2">//</span><span class="syntax2"> </span><span class="syntax2">Did</span><span class="syntax2"> </span><span class="syntax2">the</span><span class="syntax2"> </span><span class="syntax2">user</span><span class="syntax2"> </span><span class="syntax2">enter</span><span class="syntax2"> </span><span class="syntax2">anything?</span>
<span class="gutterH">  30:</span>      <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax10">$</span><span class="syntax10">email</span> <span class="syntax18">=</span><span class="syntax18">=</span> <span class="syntax13">'</span><span class="syntax13">'</span><span class="syntax18">)</span> <span class="syntax18">{</span> 
<span class="gutter">  31:</span>        <span class="syntax10">$</span><span class="syntax10">errors</span><span class="syntax18">[</span><span class="syntax13">'</span><span class="syntax13">email</span><span class="syntax13">'</span><span class="syntax18">]</span> <span class="syntax18">=</span> <span class="syntax13">'</span><span class="syntax13">&lt;b&gt;&lt;font</span><span class="syntax13"> </span><span class="syntax13">color=&quot;red&quot;&gt;***Email</span><span class="syntax13">'</span>
<span class="gutter">  32:</span>                          <span class="syntax18">.</span><span class="syntax13">'</span><span class="syntax13"> </span><span class="syntax13">address?***&lt;/font&gt;&lt;b&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  33:</span>      <span class="syntax18">}</span>
<span class="gutter">  34:</span>      <span class="syntax8">else</span> <span class="syntax18">{</span>
<span class="gutterH">  35:</span>        <span class="syntax10">$</span><span class="syntax10">ok</span> <span class="syntax18">=</span> <span class="syntax6">validate_email</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">email</span><span class="syntax18">)</span><span class="syntax18">;</span>
<span class="gutter">  36:</span>        <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax18">!</span><span class="syntax10">$</span><span class="syntax10">ok</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">  37:</span>          <span class="syntax10">$</span><span class="syntax10">errors</span><span class="syntax18">[</span><span class="syntax13">'</span><span class="syntax13">email</span><span class="syntax13">'</span><span class="syntax18">]</span> <span class="syntax18">=</span> <span class="syntax13">'</span><span class="syntax13">&lt;b&gt;&lt;font</span><span class="syntax13"> </span><span class="syntax13">color=&quot;red&quot;&gt;***Invalid</span><span class="syntax13">'</span>
<span class="gutter">  38:</span>                            <span class="syntax18">.</span><span class="syntax13">'</span><span class="syntax13"> </span><span class="syntax13">email</span><span class="syntax13"> </span><span class="syntax13">address***&lt;/font&gt;&lt;/b&gt;</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  39:</span>        <span class="syntax18">}</span>
<span class="gutterH">  40:</span>      <span class="syntax18">}</span>
<span class="gutter">  41:</span>    <span class="syntax18">}</span>
<span class="gutter">  42:</span>    
<span class="gutter">  43:</span>    <span class="syntax8">function</span> <span class="syntax6">validate_email</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">email</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">  44:</span>      <span class="syntax10">$</span><span class="syntax10">regex</span> <span class="syntax18">=</span> <span class="syntax13">'</span><span class="syntax13">/^[a-zA-Z][\w</span><span class="syntax13"> </span><span class="syntax13">\.\-]+[a-zA-Z0-9]@([a-zA-Z0-9]</span><span class="syntax13">'</span>
<span class="gutterH">  45:</span>              <span class="syntax18">.</span><span class="syntax13">'</span><span class="syntax13">[a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,4}$/</span><span class="syntax13">'</span><span class="syntax18">;</span>
<span class="gutter">  46:</span>      <span class="syntax8">if</span><span class="syntax18"> (</span><span class="syntax9">preg_match</span><span class="syntax18">(</span><span class="syntax10">$</span><span class="syntax10">regex</span><span class="syntax18">,</span> <span class="syntax10">$</span><span class="syntax10">email</span><span class="syntax18">)</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutter">  47:</span>        <span class="syntax8">return</span> <span class="syntax8">true</span><span class="syntax18">;</span>
<span class="gutter">  48:</span>      <span class="syntax18">}</span>
<span class="gutter">  49:</span>      <span class="syntax8">else</span> <span class="syntax18">{</span>
<span class="gutterH">  50:</span>        <span class="syntax8">return</span> <span class="syntax8">false</span><span class="syntax18">;</span>
<span class="gutter">  51:</span>      <span class="syntax18">}</span>
<span class="gutter">  52:</span>    <span class="syntax18">}</span>
<span class="gutter">  53:</span>    
<span class="gutter">  54:</span>    <span class="syntax8">function</span> <span class="syntax6">show_form</span><span class="syntax18">(</span><span class="syntax18">)</span> <span class="syntax18">{</span>
<span class="gutterH">  55:</span>      <span class="syntax8">global</span> <span class="syntax10">$</span><span class="syntax10">errors</span><span class="syntax18">;</span>
<span class="gutter">  56:</span>      <span class="syntax10">$</span><span class="syntax10">currEmail</span> <span class="syntax18">=</span> <span class="syntax10">$</span><span class="syntax10">_POST</span><span class="syntax18">[</span><span class="syntax13">'</span><span class="syntax13">email</span><span class="syntax13">'</span><span class="syntax18">]</span><span class="syntax18">;</span>
<span class="gutter">  57:</span>  <span class="syntax17">?&gt;</span>
<span class="gutter">  58:</span>  <span class="syntax17">&lt;form</span><span class="syntax17"> </span><span class="syntax17">method</span><span class="syntax18">=</span><span class="syntax17">POST</span><span class="syntax17"> </span><span class="syntax17">action</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax17">&lt;?php</span> <span class="syntax8">echo</span> <span class="syntax10">$</span><span class="syntax10">_SERVER</span><span class="syntax18">[</span><span class="syntax13">'</span><span class="syntax13">PHP_SELF</span><span class="syntax13">'</span><span class="syntax18">]</span><span class="syntax17">?&gt;</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">  59:</span>   <span class="syntax17">&lt;table</span><span class="syntax17"> </span><span class="syntax17">cellspacing</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">0</span><span class="syntax14">&quot;</span><span class="syntax17"> </span><span class="syntax17">cellpadding</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">2</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutterH">  60:</span>    <span class="syntax17">&lt;tr</span><span class="syntax17">&gt;</span>
<span class="gutter">  61:</span>     <span class="syntax17">&lt;b</span><span class="syntax17">&gt;</span> Email address:<span class="syntax17">&lt;/b</span><span class="syntax17">&gt;</span>
<span class="gutter">  62:</span>     <span class="syntax17">&lt;td</span><span class="syntax17">&gt;</span>
<span class="gutter">  63:</span>      <span class="syntax17">&lt;input</span><span class="syntax17"> </span><span class="syntax17">type</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">text</span><span class="syntax14">&quot;</span><span class="syntax17"> </span><span class="syntax17">size</span><span class="syntax18">=</span><span class="syntax17">30</span>
<span class="gutter">  64:</span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17">name</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">email</span><span class="syntax14">&quot;</span>
<span class="gutterH">  65:</span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17">value</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax17">&lt;?php</span> <span class="syntax8">echo</span> <span class="syntax10">$</span><span class="syntax10">currEmail</span><span class="syntax18">;</span><span class="syntax17">?&gt;</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">  66:</span>      <span class="syntax17">&lt;br</span><span class="syntax17"> </span><span class="syntax17">/</span><span class="syntax17">&gt;</span>
<span class="gutter">  67:</span>      <span class="syntax17">&lt;?php</span> <span class="syntax8">echo</span> <span class="syntax10">$</span><span class="syntax10">errors</span><span class="syntax18">[</span><span class="syntax13">'</span><span class="syntax13">email</span><span class="syntax13">'</span><span class="syntax18">]</span><span class="syntax18">;</span><span class="syntax17">?&gt;</span>
<span class="gutter">  68:</span>     <span class="syntax17">&lt;/td</span><span class="syntax17">&gt;</span>
<span class="gutter">  69:</span>    <span class="syntax17">&lt;/tr</span><span class="syntax17">&gt;</span>
<span class="gutterH">  70:</span>    <span class="syntax17">&lt;tr</span><span class="syntax17">&gt;</span>
<span class="gutter">  71:</span>     <span class="syntax17">&lt;td</span><span class="syntax17">&gt;</span><span class="syntax14">&amp;</span><span class="syntax14">nbsp&lt;/td&gt;</span>
<span class="gutter">  72:</span>    <span class="syntax17">&lt;/tr</span><span class="syntax17">&gt;</span>
<span class="gutter">  73:</span>    <span class="syntax17">&lt;tr</span><span class="syntax17">&gt;</span>
<span class="gutter">  74:</span>     <span class="syntax17">&lt;td</span><span class="syntax17">&gt;</span>
<span class="gutterH">  75:</span>      <span class="syntax17">&lt;input</span><span class="syntax17"> </span><span class="syntax17">type</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">submit</span><span class="syntax14">&quot;</span>
<span class="gutter">  76:</span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17"> </span><span class="syntax17">name</span><span class="syntax18">=</span><span class="syntax14">&quot;</span><span class="syntax14">submit</span><span class="syntax14">&quot;</span><span class="syntax17">&gt;</span>
<span class="gutter">  77:</span>     <span class="syntax17">&lt;/td</span><span class="syntax17">&gt;</span>
<span class="gutter">  78:</span>    <span class="syntax17">&lt;/tr</span><span class="syntax17">&gt;</span>
<span class="gutter">  79:</span>    <span class="syntax17">&lt;br</span><span class="syntax17"> </span><span class="syntax17">/</span><span class="syntax17">&gt;</span>
<span class="gutterH">  80:</span>   <span class="syntax17">&lt;/table</span><span class="syntax17">&gt;</span>
<span class="gutter">  81:</span>  <span class="syntax17">&lt;/form</span><span class="syntax17">&gt;</span>
<span class="gutter">  82:</span>  <span class="syntax17">&lt;?php</span>
<span class="gutter">  83:</span>    <span class="syntax18">}</span>
<span class="gutter">  84:</span>  <span class="syntax17">?&gt;</span>
<span class="gutterH">  85:</span> <span class="syntax17">&lt;/body</span><span class="syntax17">&gt;</span>
<span class="gutter">  86:</span><span class="syntax17">&lt;/html</span><span class="syntax17">&gt;</span></span>
</PRE>
</div>
</small></blockquote>
<p>
If the form has already been submitted, then the validate_input() function will
be called on line 11.
</p><p>
If the $errors array has elements in it, then there are problems in the way the
form was submitted. If there are errors in the way the user filled out the form
(the user did not enter an e-mail address or what he or she entered was invalid),
the show_form() function will be called to redisplay the form with the appropriate
error message.
</p><p>
If there were no errors in the submitted input (i.e., the user entered a valid
e-mail address), then it is time to process the form. At this point the e-mail
address is ready to be sent to a file, database, used to send a message to the
user, and so on.
</p><p>
If the form has not been submitted, the show_form() function will be called,
and the form will appear in the browser.
</p><p>
If the user did not enter anything at all, the $errors['email'] array will be
assigned a message that will appear in red under the input field in the browser.
</p><p>
The regular expression is assigned to the variable $regex on lines 44-45.

The HTML form starts on line 58. When the form is submitted this same script
will be called to process it, referenced by $_SERVER['PHP_SELF'].
</p><p>
If this is the first time the form was submitted, $email will have no value.
If the form has already been submitted and there were errors, the original
value the user typed, stored in $email, will be replaced in the input text
field box. PHP will echo its value and HTML will assign it to the text box.
</p><li>
<li><p>
Help on the Web
</p>
There are a number of regular expression validators on the Internet that can
help you unravel regular expressions.
</li><p>
The regular expression library at <a href="http://regexlib.com">http://regexlib.com</a>
is an excellent resource for finding and testing regular expressions for e-mail,
phone numbers, credit cards, Social Security numbers, and more.
</p>
</li>
</ul>
</div>
</body>
</html>
